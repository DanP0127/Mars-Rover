
CleanStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080090f0  080090f0  000190f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009148  08009148  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08009148  08009148  00019148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009150  08009150  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009150  08009150  00019150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009154  08009154  00019154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08009158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012fc4  2000001c  08009174  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012fe0  08009174  00022fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014faa  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000335f  00000000  00000000  00035039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  00038398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3f  00000000  00000000  000395e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023179  00000000  00000000  0003a427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000188ef  00000000  00000000  0005d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9d6b  00000000  00000000  00075e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cd0  00000000  00000000  0014fbfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001548cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080090d8 	.word	0x080090d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	080090d8 	.word	0x080090d8

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a41      	ldr	r2, [pc, #260]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a3a      	ldr	r2, [pc, #232]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a33      	ldr	r2, [pc, #204]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a2c      	ldr	r2, [pc, #176]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_GPIO_Init+0x124>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f240 1103 	movw	r1, #259	; 0x103
 8000dd4:	4826      	ldr	r0, [pc, #152]	; (8000e70 <MX_GPIO_Init+0x128>)
 8000dd6:	f001 fe35 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2130      	movs	r1, #48	; 0x30
 8000dde:	4825      	ldr	r0, [pc, #148]	; (8000e74 <MX_GPIO_Init+0x12c>)
 8000de0:	f001 fe30 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000de4:	2200      	movs	r2, #0
 8000de6:	f24c 0131 	movw	r1, #49201	; 0xc031
 8000dea:	4823      	ldr	r0, [pc, #140]	; (8000e78 <MX_GPIO_Init+0x130>)
 8000dec:	f001 fe2a 	bl	8002a44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000df6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	481a      	ldr	r0, [pc, #104]	; (8000e70 <MX_GPIO_Init+0x128>)
 8000e08:	f001 fc70 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8;
 8000e0c:	f240 1303 	movw	r3, #259	; 0x103
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4812      	ldr	r0, [pc, #72]	; (8000e70 <MX_GPIO_Init+0x128>)
 8000e26:	f001 fc61 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8000e2a:	2330      	movs	r3, #48	; 0x30
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <MX_GPIO_Init+0x12c>)
 8000e42:	f001 fc53 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB15 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000e46:	f24c 0331 	movw	r3, #49201	; 0xc031
 8000e4a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_GPIO_Init+0x130>)
 8000e60:	f001 fc44 	bl	80026ec <HAL_GPIO_Init>

}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020800 	.word	0x40020800
 8000e74:	40020000 	.word	0x40020000
 8000e78:	40020400 	.word	0x40020400

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f001 fa7d 	bl	8002380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f000 f883 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8a:	f7ff ff5d 	bl	8000d48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e8e:	f001 f99f 	bl	80021d0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000e92:	f001 f971 	bl	8002178 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000e96:	f000 ffad 	bl	8001df4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e9a:	f001 f841 	bl	8001f20 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  queue_motor = xQueueCreate(18, sizeof(uint16_t[18]));
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2124      	movs	r1, #36	; 0x24
 8000ea2:	2012      	movs	r0, #18
 8000ea4:	f005 f852 	bl	8005f4c <xQueueGenericCreate>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a29      	ldr	r2, [pc, #164]	; (8000f50 <main+0xd4>)
 8000eac:	6013      	str	r3, [r2, #0]
  queue_autonomous = xQueueCreate(1, sizeof(float));
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f005 f84a 	bl	8005f4c <xQueueGenericCreate>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4a26      	ldr	r2, [pc, #152]	; (8000f54 <main+0xd8>)
 8000ebc:	6013      	str	r3, [r2, #0]

  bin_sem = xSemaphoreCreateBinary();
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f005 f842 	bl	8005f4c <xQueueGenericCreate>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <main+0xdc>)
 8000ecc:	6013      	str	r3, [r2, #0]

  if(bin_sem != NULL)
 8000ece:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <main+0xdc>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d03b      	beq.n	8000f4e <main+0xd2>
  {
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4820      	ldr	r0, [pc, #128]	; (8000f5c <main+0xe0>)
 8000eda:	f002 fe3d 	bl	8003b58 <HAL_TIM_IC_Start_IT>
	  xTaskCreate(led_blink, "Led Blink", 256, NULL, 1, &led_handler);
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <main+0xe4>)
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eec:	491d      	ldr	r1, [pc, #116]	; (8000f64 <main+0xe8>)
 8000eee:	481e      	ldr	r0, [pc, #120]	; (8000f68 <main+0xec>)
 8000ef0:	f005 ff12 	bl	8006d18 <xTaskCreate>
	  xTaskCreate(motor_task, "MotorTask", 256, NULL, 2, &motor_handler);
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <main+0xf0>)
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	2302      	movs	r3, #2
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2300      	movs	r3, #0
 8000efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f02:	491b      	ldr	r1, [pc, #108]	; (8000f70 <main+0xf4>)
 8000f04:	481b      	ldr	r0, [pc, #108]	; (8000f74 <main+0xf8>)
 8000f06:	f005 ff07 	bl	8006d18 <xTaskCreate>
	  xTaskCreate(autonomy_mode, "Autonomy Mode", 256, NULL, 2, &auto_handler);
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <main+0xfc>)
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	2302      	movs	r3, #2
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2300      	movs	r3, #0
 8000f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f18:	4918      	ldr	r1, [pc, #96]	; (8000f7c <main+0x100>)
 8000f1a:	4819      	ldr	r0, [pc, #100]	; (8000f80 <main+0x104>)
 8000f1c:	f005 fefc 	bl	8006d18 <xTaskCreate>
	  HAL_UART_Receive_IT(&huart1, buffer_SBUS, 25);
 8000f20:	2219      	movs	r2, #25
 8000f22:	4918      	ldr	r1, [pc, #96]	; (8000f84 <main+0x108>)
 8000f24:	4818      	ldr	r0, [pc, #96]	; (8000f88 <main+0x10c>)
 8000f26:	f003 ffa2 	bl	8004e6e <HAL_UART_Receive_IT>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4817      	ldr	r0, [pc, #92]	; (8000f8c <main+0x110>)
 8000f2e:	f002 fcf1 	bl	8003914 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f32:	2104      	movs	r1, #4
 8000f34:	4815      	ldr	r0, [pc, #84]	; (8000f8c <main+0x110>)
 8000f36:	f002 fced 	bl	8003914 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	4813      	ldr	r0, [pc, #76]	; (8000f8c <main+0x110>)
 8000f3e:	f002 fce9 	bl	8003914 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f42:	210c      	movs	r1, #12
 8000f44:	4811      	ldr	r0, [pc, #68]	; (8000f8c <main+0x110>)
 8000f46:	f002 fce5 	bl	8003914 <HAL_TIM_PWM_Start>
	  vTaskStartScheduler();
 8000f4a:	f006 f9db 	bl	8007304 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <main+0xd2>
 8000f50:	200000d0 	.word	0x200000d0
 8000f54:	200000d4 	.word	0x200000d4
 8000f58:	200000cc 	.word	0x200000cc
 8000f5c:	20000168 	.word	0x20000168
 8000f60:	200000c0 	.word	0x200000c0
 8000f64:	080090f0 	.word	0x080090f0
 8000f68:	08001839 	.word	0x08001839
 8000f6c:	200000c4 	.word	0x200000c4
 8000f70:	080090fc 	.word	0x080090fc
 8000f74:	08001139 	.word	0x08001139
 8000f78:	200000c8 	.word	0x200000c8
 8000f7c:	08009108 	.word	0x08009108
 8000f80:	08001571 	.word	0x08001571
 8000f84:	20000074 	.word	0x20000074
 8000f88:	200001b0 	.word	0x200001b0
 8000f8c:	20000120 	.word	0x20000120

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	; 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	2234      	movs	r2, #52	; 0x34
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f008 f860 	bl	8009064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <SystemClock_Config+0xd4>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a29      	ldr	r2, [pc, #164]	; (8001064 <SystemClock_Config+0xd4>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <SystemClock_Config+0xd4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <SystemClock_Config+0xd8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fdc:	4a22      	ldr	r2, [pc, #136]	; (8001068 <SystemClock_Config+0xd8>)
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <SystemClock_Config+0xd8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001000:	2300      	movs	r3, #0
 8001002:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001004:	2310      	movs	r3, #16
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001008:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800100c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800100e:	2304      	movs	r3, #4
 8001010:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4618      	mov	r0, r3
 8001020:	f002 f8c0 	bl	80031a4 <HAL_RCC_OscConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800102a:	f000 fdfd 	bl	8001c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001032:	2302      	movs	r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	2102      	movs	r1, #2
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fd2e 	bl	8002aac <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001056:	f000 fde7 	bl	8001c28 <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	3750      	adds	r7, #80	; 0x50
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000
 800106c:	00000000 	.word	0x00000000

08001070 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken_V2;
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7f1b      	ldrb	r3, [r3, #28]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d145      	bne.n	800110c <HAL_TIM_IC_CaptureCallback+0x9c>
		if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) == 1){
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	4827      	ldr	r0, [pc, #156]	; (8001120 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001084:	f001 fcc6 	bl	8002a14 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	d104      	bne.n	8001098 <HAL_TIM_IC_CaptureCallback+0x28>

			__HAL_TIM_SET_COUNTER(&htim3, 0);
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	; 0x24

			xQueueSendFromISR(queue_autonomous,&distance,&xHigherPriorityTaskWoken_V2);
			portYIELD_FROM_ISR( xHigherPriorityTaskWoken_V2);
		}
	}
}
 8001096:	e039      	b.n	800110c <HAL_TIM_IC_CaptureCallback+0x9c>
			pulseWidth = __HAL_TIM_GET_COUNTER(&htim3);
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	4a22      	ldr	r2, [pc, #136]	; (8001128 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80010a0:	6013      	str	r3, [r2, #0]
			distance = ((float)pulseWidth * 0.0343) / 2.0;
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ae:	ee17 0a90 	vmov	r0, s15
 80010b2:	f7ff fa11 	bl	80004d8 <__aeabi_f2d>
 80010b6:	a318      	add	r3, pc, #96	; (adr r3, 8001118 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa64 	bl	8000588 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010d0:	f7ff fb84 	bl	80007dc <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fc66 	bl	80009ac <__aeabi_d2f>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80010e4:	6013      	str	r3, [r2, #0]
			xQueueSendFromISR(queue_autonomous,&distance,&xHigherPriorityTaskWoken_V2);
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	f107 020c 	add.w	r2, r7, #12
 80010ee:	2300      	movs	r3, #0
 80010f0:	490e      	ldr	r1, [pc, #56]	; (800112c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80010f2:	f005 f89b 	bl	800622c <xQueueGenericSendFromISR>
			portYIELD_FROM_ISR( xHigherPriorityTaskWoken_V2);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d007      	beq.n	800110c <HAL_TIM_IC_CaptureCallback+0x9c>
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80010fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	f3bf 8f4f 	dsb	sy
 8001108:	f3bf 8f6f 	isb	sy
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	f3af 8000 	nop.w
 8001118:	04816f00 	.word	0x04816f00
 800111c:	3fa18fc5 	.word	0x3fa18fc5
 8001120:	40020000 	.word	0x40020000
 8001124:	20000168 	.word	0x20000168
 8001128:	200000b4 	.word	0x200000b4
 800112c:	200000b8 	.word	0x200000b8
 8001130:	200000d4 	.word	0x200000d4
 8001134:	e000ed04 	.word	0xe000ed04

08001138 <motor_task>:

void motor_task(void *parameters)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	BaseType_t xStatus;
	while(1)
	{
		xStatus = xQueueReceive( queue_motor, channel_SBUS, portMAX_DELAY );
 8001140:	4b94      	ldr	r3, [pc, #592]	; (8001394 <motor_task+0x25c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	4993      	ldr	r1, [pc, #588]	; (8001398 <motor_task+0x260>)
 800114a:	4618      	mov	r0, r3
 800114c:	f005 f9c4 	bl	80064d8 <xQueueReceive>
 8001150:	60f8      	str	r0, [r7, #12]
		/*****************************
		 * THROTTLE CONTROL
		 ****************************/
	if (xStatus == pdPASS) {
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d1f3      	bne.n	8001140 <motor_task+0x8>
		if(channel_SBUS[0]){
 8001158:	4b8f      	ldr	r3, [pc, #572]	; (8001398 <motor_task+0x260>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	b29b      	uxth	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0ee      	beq.n	8001140 <motor_task+0x8>
			throttle_perct = 1 - ((max_RC_Value - ((float)channel_SBUS[0] - 60)) / max_RC_Value);
 8001162:	4b8e      	ldr	r3, [pc, #568]	; (800139c <motor_task+0x264>)
 8001164:	ed93 7a00 	vldr	s14, [r3]
 8001168:	4b8b      	ldr	r3, [pc, #556]	; (8001398 <motor_task+0x260>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001176:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80013a0 <motor_task+0x268>
 800117a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800117e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001182:	4b86      	ldr	r3, [pc, #536]	; (800139c <motor_task+0x264>)
 8001184:	ed93 7a00 	vldr	s14, [r3]
 8001188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800118c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001194:	4b83      	ldr	r3, [pc, #524]	; (80013a4 <motor_task+0x26c>)
 8001196:	edc3 7a00 	vstr	s15, [r3]

			if(channel_SBUS[1] >= 872 && channel_SBUS[1] <= 1072){ // 990 is middle condition, 172 low, 1808 high
 800119a:	4b7f      	ldr	r3, [pc, #508]	; (8001398 <motor_task+0x260>)
 800119c:	885b      	ldrh	r3, [r3, #2]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80011a4:	f0c0 8110 	bcc.w	80013c8 <motor_task+0x290>
 80011a8:	4b7b      	ldr	r3, [pc, #492]	; (8001398 <motor_task+0x260>)
 80011aa:	885b      	ldrh	r3, [r3, #2]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80011b2:	f200 8109 	bhi.w	80013c8 <motor_task+0x290>

				/*****************************
				* FORWARD
				****************************/
				if(channel_SBUS[2] >= 576 && channel_SBUS[2] <= 1292){
 80011b6:	4b78      	ldr	r3, [pc, #480]	; (8001398 <motor_task+0x260>)
 80011b8:	889b      	ldrh	r3, [r3, #4]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80011c0:	d35f      	bcc.n	8001282 <motor_task+0x14a>
 80011c2:	4b75      	ldr	r3, [pc, #468]	; (8001398 <motor_task+0x260>)
 80011c4:	889b      	ldrh	r3, [r3, #4]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f240 520c 	movw	r2, #1292	; 0x50c
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d858      	bhi.n	8001282 <motor_task+0x14a>
					// Back Left Forward
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2102      	movs	r1, #2
 80011d4:	4874      	ldr	r0, [pc, #464]	; (80013a8 <motor_task+0x270>)
 80011d6:	f001 fc35 	bl	8002a44 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2101      	movs	r1, #1
 80011de:	4872      	ldr	r0, [pc, #456]	; (80013a8 <motor_task+0x270>)
 80011e0:	f001 fc30 	bl	8002a44 <HAL_GPIO_WritePin>

					// Back Right Forward
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2110      	movs	r1, #16
 80011e8:	4870      	ldr	r0, [pc, #448]	; (80013ac <motor_task+0x274>)
 80011ea:	f001 fc2b 	bl	8002a44 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2101      	movs	r1, #1
 80011f2:	486f      	ldr	r0, [pc, #444]	; (80013b0 <motor_task+0x278>)
 80011f4:	f001 fc26 	bl	8002a44 <HAL_GPIO_WritePin>

					// Front Left Forward
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011fe:	486c      	ldr	r0, [pc, #432]	; (80013b0 <motor_task+0x278>)
 8001200:	f001 fc20 	bl	8002a44 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120a:	4869      	ldr	r0, [pc, #420]	; (80013b0 <motor_task+0x278>)
 800120c:	f001 fc1a 	bl	8002a44 <HAL_GPIO_WritePin>

					// Front Right Forward
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2110      	movs	r1, #16
 8001214:	4866      	ldr	r0, [pc, #408]	; (80013b0 <motor_task+0x278>)
 8001216:	f001 fc15 	bl	8002a44 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800121a:	2201      	movs	r2, #1
 800121c:	2120      	movs	r1, #32
 800121e:	4864      	ldr	r0, [pc, #400]	; (80013b0 <motor_task+0x278>)
 8001220:	f001 fc10 	bl	8002a44 <HAL_GPIO_WritePin>

				TIM2->CCR1 = CH1_DC;
 8001224:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <motor_task+0x27c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800122c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = CH2_DC;
 800122e:	4b62      	ldr	r3, [pc, #392]	; (80013b8 <motor_task+0x280>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001236:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3 = CH3_DC;
 8001238:	4b60      	ldr	r3, [pc, #384]	; (80013bc <motor_task+0x284>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001240:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM2->CCR4 = CH4_DC;
 8001242:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <motor_task+0x288>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
				CH1_DC = CH2_DC = CH3_DC = CH4_DC = throttle_perct * tot_TIM;
 800124c:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <motor_task+0x26c>)
 800124e:	ed93 7a00 	vldr	s14, [r3]
 8001252:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <motor_task+0x28c>)
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001260:	ee17 2a90 	vmov	r2, s15
 8001264:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <motor_task+0x288>)
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	4b55      	ldr	r3, [pc, #340]	; (80013c0 <motor_task+0x288>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a53      	ldr	r2, [pc, #332]	; (80013bc <motor_task+0x284>)
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b52      	ldr	r3, [pc, #328]	; (80013bc <motor_task+0x284>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a50      	ldr	r2, [pc, #320]	; (80013b8 <motor_task+0x280>)
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b4f      	ldr	r3, [pc, #316]	; (80013b8 <motor_task+0x280>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a4d      	ldr	r2, [pc, #308]	; (80013b4 <motor_task+0x27c>)
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e087      	b.n	8001392 <motor_task+0x25a>

				/*****************************
				* BACKWARDS
				****************************/
				} else if(channel_SBUS[2] >= 172 && channel_SBUS[2] <= 376){
 8001282:	4b45      	ldr	r3, [pc, #276]	; (8001398 <motor_task+0x260>)
 8001284:	889b      	ldrh	r3, [r3, #4]
 8001286:	b29b      	uxth	r3, r3
 8001288:	2bab      	cmp	r3, #171	; 0xab
 800128a:	d95e      	bls.n	800134a <motor_task+0x212>
 800128c:	4b42      	ldr	r3, [pc, #264]	; (8001398 <motor_task+0x260>)
 800128e:	889b      	ldrh	r3, [r3, #4]
 8001290:	b29b      	uxth	r3, r3
 8001292:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 8001296:	d858      	bhi.n	800134a <motor_task+0x212>
					// Back Left Backward
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2102      	movs	r1, #2
 800129c:	4842      	ldr	r0, [pc, #264]	; (80013a8 <motor_task+0x270>)
 800129e:	f001 fbd1 	bl	8002a44 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2101      	movs	r1, #1
 80012a6:	4840      	ldr	r0, [pc, #256]	; (80013a8 <motor_task+0x270>)
 80012a8:	f001 fbcc 	bl	8002a44 <HAL_GPIO_WritePin>

					// Back Right Backward
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2110      	movs	r1, #16
 80012b0:	483e      	ldr	r0, [pc, #248]	; (80013ac <motor_task+0x274>)
 80012b2:	f001 fbc7 	bl	8002a44 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2101      	movs	r1, #1
 80012ba:	483d      	ldr	r0, [pc, #244]	; (80013b0 <motor_task+0x278>)
 80012bc:	f001 fbc2 	bl	8002a44 <HAL_GPIO_WritePin>

					// Front Left Backward
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c6:	483a      	ldr	r0, [pc, #232]	; (80013b0 <motor_task+0x278>)
 80012c8:	f001 fbbc 	bl	8002a44 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012d2:	4837      	ldr	r0, [pc, #220]	; (80013b0 <motor_task+0x278>)
 80012d4:	f001 fbb6 	bl	8002a44 <HAL_GPIO_WritePin>

					// Front Right Backward
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80012d8:	2201      	movs	r2, #1
 80012da:	2110      	movs	r1, #16
 80012dc:	4834      	ldr	r0, [pc, #208]	; (80013b0 <motor_task+0x278>)
 80012de:	f001 fbb1 	bl	8002a44 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2120      	movs	r1, #32
 80012e6:	4832      	ldr	r0, [pc, #200]	; (80013b0 <motor_task+0x278>)
 80012e8:	f001 fbac 	bl	8002a44 <HAL_GPIO_WritePin>

					TIM2->CCR1 = CH1_DC;
 80012ec:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <motor_task+0x27c>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
					TIM2->CCR2 = CH2_DC;
 80012f6:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <motor_task+0x280>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012fe:	639a      	str	r2, [r3, #56]	; 0x38
					TIM2->CCR3 = CH3_DC;
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <motor_task+0x284>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001308:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM2->CCR4 = CH4_DC;
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <motor_task+0x288>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001312:	641a      	str	r2, [r3, #64]	; 0x40
					CH1_DC = CH2_DC = CH3_DC = CH4_DC = throttle_perct * tot_TIM;
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <motor_task+0x26c>)
 8001316:	ed93 7a00 	vldr	s14, [r3]
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <motor_task+0x28c>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001328:	ee17 2a90 	vmov	r2, s15
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <motor_task+0x288>)
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <motor_task+0x288>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a21      	ldr	r2, [pc, #132]	; (80013bc <motor_task+0x284>)
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <motor_task+0x284>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <motor_task+0x280>)
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <motor_task+0x280>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <motor_task+0x27c>)
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	e023      	b.n	8001392 <motor_task+0x25a>
				} else{
					TIM2->CCR1 = CH1_DC;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <motor_task+0x27c>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001352:	635a      	str	r2, [r3, #52]	; 0x34
					TIM2->CCR2 = CH2_DC;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <motor_task+0x280>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800135c:	639a      	str	r2, [r3, #56]	; 0x38
					TIM2->CCR3 = CH3_DC;
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <motor_task+0x284>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001366:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM2->CCR4 = CH4_DC;
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <motor_task+0x288>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
					CH1_DC = CH2_DC = CH3_DC = CH4_DC = 0;
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <motor_task+0x288>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <motor_task+0x288>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <motor_task+0x284>)
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <motor_task+0x284>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <motor_task+0x280>)
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <motor_task+0x280>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <motor_task+0x27c>)
 800138e:	6013      	str	r3, [r2, #0]
				if(channel_SBUS[2] >= 576 && channel_SBUS[2] <= 1292){
 8001390:	e0d8      	b.n	8001544 <motor_task+0x40c>
 8001392:	e0d7      	b.n	8001544 <motor_task+0x40c>
 8001394:	200000d0 	.word	0x200000d0
 8001398:	20000038 	.word	0x20000038
 800139c:	20000000 	.word	0x20000000
 80013a0:	42700000 	.word	0x42700000
 80013a4:	2000005c 	.word	0x2000005c
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020400 	.word	0x40020400
 80013b4:	20000060 	.word	0x20000060
 80013b8:	20000064 	.word	0x20000064
 80013bc:	20000068 	.word	0x20000068
 80013c0:	2000006c 	.word	0x2000006c
 80013c4:	20000004 	.word	0x20000004
				}
			/*****************************
			* TURN LEFT
			****************************/
			} else if(channel_SBUS[1] < 872){
 80013c8:	4b5f      	ldr	r3, [pc, #380]	; (8001548 <motor_task+0x410>)
 80013ca:	885b      	ldrh	r3, [r3, #2]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80013d2:	d258      	bcs.n	8001486 <motor_task+0x34e>
				// Back Left Backward
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2102      	movs	r1, #2
 80013d8:	485c      	ldr	r0, [pc, #368]	; (800154c <motor_task+0x414>)
 80013da:	f001 fb33 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80013de:	2201      	movs	r2, #1
 80013e0:	2101      	movs	r1, #1
 80013e2:	485a      	ldr	r0, [pc, #360]	; (800154c <motor_task+0x414>)
 80013e4:	f001 fb2e 	bl	8002a44 <HAL_GPIO_WritePin>

				// Back Right Forward
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2110      	movs	r1, #16
 80013ec:	4858      	ldr	r0, [pc, #352]	; (8001550 <motor_task+0x418>)
 80013ee:	f001 fb29 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80013f2:	2201      	movs	r2, #1
 80013f4:	2101      	movs	r1, #1
 80013f6:	4857      	ldr	r0, [pc, #348]	; (8001554 <motor_task+0x41c>)
 80013f8:	f001 fb24 	bl	8002a44 <HAL_GPIO_WritePin>

				// Front Left Backward
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80013fc:	2201      	movs	r2, #1
 80013fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001402:	4854      	ldr	r0, [pc, #336]	; (8001554 <motor_task+0x41c>)
 8001404:	f001 fb1e 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140e:	4851      	ldr	r0, [pc, #324]	; (8001554 <motor_task+0x41c>)
 8001410:	f001 fb18 	bl	8002a44 <HAL_GPIO_WritePin>

				// Front Right Forward
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2110      	movs	r1, #16
 8001418:	484e      	ldr	r0, [pc, #312]	; (8001554 <motor_task+0x41c>)
 800141a:	f001 fb13 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800141e:	2201      	movs	r2, #1
 8001420:	2120      	movs	r1, #32
 8001422:	484c      	ldr	r0, [pc, #304]	; (8001554 <motor_task+0x41c>)
 8001424:	f001 fb0e 	bl	8002a44 <HAL_GPIO_WritePin>

				TIM2->CCR1 = CH1_DC;
 8001428:	4b4b      	ldr	r3, [pc, #300]	; (8001558 <motor_task+0x420>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001430:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = CH2_DC;
 8001432:	4b4a      	ldr	r3, [pc, #296]	; (800155c <motor_task+0x424>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800143a:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3 = CH3_DC;
 800143c:	4b48      	ldr	r3, [pc, #288]	; (8001560 <motor_task+0x428>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001444:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM2->CCR4 = CH4_DC;
 8001446:	4b47      	ldr	r3, [pc, #284]	; (8001564 <motor_task+0x42c>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144e:	641a      	str	r2, [r3, #64]	; 0x40
				CH1_DC = CH2_DC = CH3_DC = CH4_DC = throttle_perct * tot_TIM;
 8001450:	4b45      	ldr	r3, [pc, #276]	; (8001568 <motor_task+0x430>)
 8001452:	ed93 7a00 	vldr	s14, [r3]
 8001456:	4b45      	ldr	r3, [pc, #276]	; (800156c <motor_task+0x434>)
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001464:	ee17 2a90 	vmov	r2, s15
 8001468:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <motor_task+0x42c>)
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <motor_task+0x42c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a3b      	ldr	r2, [pc, #236]	; (8001560 <motor_task+0x428>)
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <motor_task+0x428>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a38      	ldr	r2, [pc, #224]	; (800155c <motor_task+0x424>)
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b37      	ldr	r3, [pc, #220]	; (800155c <motor_task+0x424>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a35      	ldr	r2, [pc, #212]	; (8001558 <motor_task+0x420>)
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e65c      	b.n	8001140 <motor_task+0x8>

			/*****************************
			* TURN RIGHT
			****************************/
			} else if(channel_SBUS[1] > 1072){
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <motor_task+0x410>)
 8001488:	885b      	ldrh	r3, [r3, #2]
 800148a:	b29b      	uxth	r3, r3
 800148c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8001490:	f67f ae56 	bls.w	8001140 <motor_task+0x8>
				// Back Left Forward
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8001494:	2201      	movs	r2, #1
 8001496:	2102      	movs	r1, #2
 8001498:	482c      	ldr	r0, [pc, #176]	; (800154c <motor_task+0x414>)
 800149a:	f001 fad3 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2101      	movs	r1, #1
 80014a2:	482a      	ldr	r0, [pc, #168]	; (800154c <motor_task+0x414>)
 80014a4:	f001 face 	bl	8002a44 <HAL_GPIO_WritePin>

				// Back Right Backward
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2110      	movs	r1, #16
 80014ac:	4828      	ldr	r0, [pc, #160]	; (8001550 <motor_task+0x418>)
 80014ae:	f001 fac9 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2101      	movs	r1, #1
 80014b6:	4827      	ldr	r0, [pc, #156]	; (8001554 <motor_task+0x41c>)
 80014b8:	f001 fac4 	bl	8002a44 <HAL_GPIO_WritePin>

				// Front Left Forward
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c2:	4824      	ldr	r0, [pc, #144]	; (8001554 <motor_task+0x41c>)
 80014c4:	f001 fabe 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ce:	4821      	ldr	r0, [pc, #132]	; (8001554 <motor_task+0x41c>)
 80014d0:	f001 fab8 	bl	8002a44 <HAL_GPIO_WritePin>

				// Front Right Backward
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2110      	movs	r1, #16
 80014d8:	481e      	ldr	r0, [pc, #120]	; (8001554 <motor_task+0x41c>)
 80014da:	f001 fab3 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2120      	movs	r1, #32
 80014e2:	481c      	ldr	r0, [pc, #112]	; (8001554 <motor_task+0x41c>)
 80014e4:	f001 faae 	bl	8002a44 <HAL_GPIO_WritePin>

				TIM2->CCR1 = CH1_DC;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <motor_task+0x420>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014f0:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = CH2_DC;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <motor_task+0x424>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fa:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3 = CH3_DC;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <motor_task+0x428>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001504:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM2->CCR4 = CH4_DC;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <motor_task+0x42c>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800150e:	641a      	str	r2, [r3, #64]	; 0x40
				CH1_DC = CH2_DC = CH3_DC = CH4_DC = throttle_perct * tot_TIM;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <motor_task+0x430>)
 8001512:	ed93 7a00 	vldr	s14, [r3]
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <motor_task+0x434>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001524:	ee17 2a90 	vmov	r2, s15
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <motor_task+0x42c>)
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <motor_task+0x42c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <motor_task+0x428>)
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <motor_task+0x428>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a08      	ldr	r2, [pc, #32]	; (800155c <motor_task+0x424>)
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <motor_task+0x424>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a05      	ldr	r2, [pc, #20]	; (8001558 <motor_task+0x420>)
 8001542:	6013      	str	r3, [r2, #0]
		xStatus = xQueueReceive( queue_motor, channel_SBUS, portMAX_DELAY );
 8001544:	e5fc      	b.n	8001140 <motor_task+0x8>
 8001546:	bf00      	nop
 8001548:	20000038 	.word	0x20000038
 800154c:	40020800 	.word	0x40020800
 8001550:	40020000 	.word	0x40020000
 8001554:	40020400 	.word	0x40020400
 8001558:	20000060 	.word	0x20000060
 800155c:	20000064 	.word	0x20000064
 8001560:	20000068 	.word	0x20000068
 8001564:	2000006c 	.word	0x2000006c
 8001568:	2000005c 	.word	0x2000005c
 800156c:	20000004 	.word	0x20000004

08001570 <autonomy_mode>:
		}
	}
}

void autonomy_mode(void *parameters)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	vTaskDelay(pdMS_TO_TICKS(500));
 8001578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800157c:	f005 fd36 	bl	8006fec <vTaskDelay>
	BaseType_t xHigherPriorityTaskWoken_V2;

	while(1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001586:	48a0      	ldr	r0, [pc, #640]	; (8001808 <autonomy_mode+0x298>)
 8001588:	f001 fa5c 	bl	8002a44 <HAL_GPIO_WritePin>
		vTaskDelay(1);
 800158c:	2001      	movs	r0, #1
 800158e:	f005 fd2d 	bl	8006fec <vTaskDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001598:	489b      	ldr	r0, [pc, #620]	; (8001808 <autonomy_mode+0x298>)
 800159a:	f001 fa53 	bl	8002a44 <HAL_GPIO_WritePin>

		xQueueReceiveFromISR(queue_autonomous, &distances, &xHigherPriorityTaskWoken_V2);
 800159e:	4b9b      	ldr	r3, [pc, #620]	; (800180c <autonomy_mode+0x29c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f107 020c 	add.w	r2, r7, #12
 80015a6:	499a      	ldr	r1, [pc, #616]	; (8001810 <autonomy_mode+0x2a0>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f005 f973 	bl	8006894 <xQueueReceiveFromISR>

		if(distances < 10)
 80015ae:	4b98      	ldr	r3, [pc, #608]	; (8001810 <autonomy_mode+0x2a0>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	f140 80c5 	bpl.w	800174e <autonomy_mode+0x1de>
		{
			/*****************************
			* BACKWARDS
			****************************/
			for(int i = 0; i < 100000; i++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e05a      	b.n	8001680 <autonomy_mode+0x110>
			{
				// Back Left Backward
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2102      	movs	r1, #2
 80015ce:	488e      	ldr	r0, [pc, #568]	; (8001808 <autonomy_mode+0x298>)
 80015d0:	f001 fa38 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2101      	movs	r1, #1
 80015d8:	488b      	ldr	r0, [pc, #556]	; (8001808 <autonomy_mode+0x298>)
 80015da:	f001 fa33 	bl	8002a44 <HAL_GPIO_WritePin>

				// Back Right Backward
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80015de:	2201      	movs	r2, #1
 80015e0:	2110      	movs	r1, #16
 80015e2:	488c      	ldr	r0, [pc, #560]	; (8001814 <autonomy_mode+0x2a4>)
 80015e4:	f001 fa2e 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2101      	movs	r1, #1
 80015ec:	488a      	ldr	r0, [pc, #552]	; (8001818 <autonomy_mode+0x2a8>)
 80015ee:	f001 fa29 	bl	8002a44 <HAL_GPIO_WritePin>

				// Front Left Backward
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f8:	4887      	ldr	r0, [pc, #540]	; (8001818 <autonomy_mode+0x2a8>)
 80015fa:	f001 fa23 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001604:	4884      	ldr	r0, [pc, #528]	; (8001818 <autonomy_mode+0x2a8>)
 8001606:	f001 fa1d 	bl	8002a44 <HAL_GPIO_WritePin>

				// Front Right Backward
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	2110      	movs	r1, #16
 800160e:	4882      	ldr	r0, [pc, #520]	; (8001818 <autonomy_mode+0x2a8>)
 8001610:	f001 fa18 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2120      	movs	r1, #32
 8001618:	487f      	ldr	r0, [pc, #508]	; (8001818 <autonomy_mode+0x2a8>)
 800161a:	f001 fa13 	bl	8002a44 <HAL_GPIO_WritePin>

				TIM2->CCR1 = CH1_DC;
 800161e:	4b7f      	ldr	r3, [pc, #508]	; (800181c <autonomy_mode+0x2ac>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001626:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = CH2_DC;
 8001628:	4b7d      	ldr	r3, [pc, #500]	; (8001820 <autonomy_mode+0x2b0>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001630:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3 = CH3_DC;
 8001632:	4b7c      	ldr	r3, [pc, #496]	; (8001824 <autonomy_mode+0x2b4>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163a:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM2->CCR4 = CH4_DC;
 800163c:	4b7a      	ldr	r3, [pc, #488]	; (8001828 <autonomy_mode+0x2b8>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
				CH1_DC = CH2_DC = CH3_DC = CH4_DC = throttle_perct * tot_TIM;
 8001646:	4b79      	ldr	r3, [pc, #484]	; (800182c <autonomy_mode+0x2bc>)
 8001648:	ed93 7a00 	vldr	s14, [r3]
 800164c:	4b78      	ldr	r3, [pc, #480]	; (8001830 <autonomy_mode+0x2c0>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165a:	ee17 2a90 	vmov	r2, s15
 800165e:	4b72      	ldr	r3, [pc, #456]	; (8001828 <autonomy_mode+0x2b8>)
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	4b71      	ldr	r3, [pc, #452]	; (8001828 <autonomy_mode+0x2b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a6f      	ldr	r2, [pc, #444]	; (8001824 <autonomy_mode+0x2b4>)
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b6e      	ldr	r3, [pc, #440]	; (8001824 <autonomy_mode+0x2b4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6c      	ldr	r2, [pc, #432]	; (8001820 <autonomy_mode+0x2b0>)
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b6b      	ldr	r3, [pc, #428]	; (8001820 <autonomy_mode+0x2b0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a69      	ldr	r2, [pc, #420]	; (800181c <autonomy_mode+0x2ac>)
 8001678:	6013      	str	r3, [r2, #0]
			for(int i = 0; i < 100000; i++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	4a6c      	ldr	r2, [pc, #432]	; (8001834 <autonomy_mode+0x2c4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	dda0      	ble.n	80015ca <autonomy_mode+0x5a>
			}

			/*****************************
			* Left
			****************************/
			for(int i = 0; i < 100000; i++)
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	e05a      	b.n	8001744 <autonomy_mode+0x1d4>
			{
				// Back Left Backward
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2102      	movs	r1, #2
 8001692:	485d      	ldr	r0, [pc, #372]	; (8001808 <autonomy_mode+0x298>)
 8001694:	f001 f9d6 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8001698:	2201      	movs	r2, #1
 800169a:	2101      	movs	r1, #1
 800169c:	485a      	ldr	r0, [pc, #360]	; (8001808 <autonomy_mode+0x298>)
 800169e:	f001 f9d1 	bl	8002a44 <HAL_GPIO_WritePin>

				// Back Right Forward
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2110      	movs	r1, #16
 80016a6:	485b      	ldr	r0, [pc, #364]	; (8001814 <autonomy_mode+0x2a4>)
 80016a8:	f001 f9cc 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2101      	movs	r1, #1
 80016b0:	4859      	ldr	r0, [pc, #356]	; (8001818 <autonomy_mode+0x2a8>)
 80016b2:	f001 f9c7 	bl	8002a44 <HAL_GPIO_WritePin>

				// Front Left Backward
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016bc:	4856      	ldr	r0, [pc, #344]	; (8001818 <autonomy_mode+0x2a8>)
 80016be:	f001 f9c1 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c8:	4853      	ldr	r0, [pc, #332]	; (8001818 <autonomy_mode+0x2a8>)
 80016ca:	f001 f9bb 	bl	8002a44 <HAL_GPIO_WritePin>

				// Front Right Forward
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2110      	movs	r1, #16
 80016d2:	4851      	ldr	r0, [pc, #324]	; (8001818 <autonomy_mode+0x2a8>)
 80016d4:	f001 f9b6 	bl	8002a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80016d8:	2201      	movs	r2, #1
 80016da:	2120      	movs	r1, #32
 80016dc:	484e      	ldr	r0, [pc, #312]	; (8001818 <autonomy_mode+0x2a8>)
 80016de:	f001 f9b1 	bl	8002a44 <HAL_GPIO_WritePin>

				TIM2->CCR1 = CH1_DC;
 80016e2:	4b4e      	ldr	r3, [pc, #312]	; (800181c <autonomy_mode+0x2ac>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ea:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2 = CH2_DC;
 80016ec:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <autonomy_mode+0x2b0>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3 = CH3_DC;
 80016f6:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <autonomy_mode+0x2b4>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016fe:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM2->CCR4 = CH4_DC;
 8001700:	4b49      	ldr	r3, [pc, #292]	; (8001828 <autonomy_mode+0x2b8>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
				CH1_DC = CH2_DC = CH3_DC = CH4_DC = throttle_perct * tot_TIM;
 800170a:	4b48      	ldr	r3, [pc, #288]	; (800182c <autonomy_mode+0x2bc>)
 800170c:	ed93 7a00 	vldr	s14, [r3]
 8001710:	4b47      	ldr	r3, [pc, #284]	; (8001830 <autonomy_mode+0x2c0>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800171e:	ee17 2a90 	vmov	r2, s15
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <autonomy_mode+0x2b8>)
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	4b40      	ldr	r3, [pc, #256]	; (8001828 <autonomy_mode+0x2b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a3e      	ldr	r2, [pc, #248]	; (8001824 <autonomy_mode+0x2b4>)
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <autonomy_mode+0x2b4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a3b      	ldr	r2, [pc, #236]	; (8001820 <autonomy_mode+0x2b0>)
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <autonomy_mode+0x2b0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a38      	ldr	r2, [pc, #224]	; (800181c <autonomy_mode+0x2ac>)
 800173c:	6013      	str	r3, [r2, #0]
			for(int i = 0; i < 100000; i++)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	3301      	adds	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4a3b      	ldr	r2, [pc, #236]	; (8001834 <autonomy_mode+0x2c4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	dda0      	ble.n	800168e <autonomy_mode+0x11e>
 800174c:	e057      	b.n	80017fe <autonomy_mode+0x28e>
		}else {
			/*****************************
			* FORWARD
			****************************/
			// Back Left Forward
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 800174e:	2201      	movs	r2, #1
 8001750:	2102      	movs	r1, #2
 8001752:	482d      	ldr	r0, [pc, #180]	; (8001808 <autonomy_mode+0x298>)
 8001754:	f001 f976 	bl	8002a44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2101      	movs	r1, #1
 800175c:	482a      	ldr	r0, [pc, #168]	; (8001808 <autonomy_mode+0x298>)
 800175e:	f001 f971 	bl	8002a44 <HAL_GPIO_WritePin>

			// Back Right Forward
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2110      	movs	r1, #16
 8001766:	482b      	ldr	r0, [pc, #172]	; (8001814 <autonomy_mode+0x2a4>)
 8001768:	f001 f96c 	bl	8002a44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800176c:	2201      	movs	r2, #1
 800176e:	2101      	movs	r1, #1
 8001770:	4829      	ldr	r0, [pc, #164]	; (8001818 <autonomy_mode+0x2a8>)
 8001772:	f001 f967 	bl	8002a44 <HAL_GPIO_WritePin>

			// Front Left Forward
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800177c:	4826      	ldr	r0, [pc, #152]	; (8001818 <autonomy_mode+0x2a8>)
 800177e:	f001 f961 	bl	8002a44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001788:	4823      	ldr	r0, [pc, #140]	; (8001818 <autonomy_mode+0x2a8>)
 800178a:	f001 f95b 	bl	8002a44 <HAL_GPIO_WritePin>

			// Front Right Forward
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2110      	movs	r1, #16
 8001792:	4821      	ldr	r0, [pc, #132]	; (8001818 <autonomy_mode+0x2a8>)
 8001794:	f001 f956 	bl	8002a44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001798:	2201      	movs	r2, #1
 800179a:	2120      	movs	r1, #32
 800179c:	481e      	ldr	r0, [pc, #120]	; (8001818 <autonomy_mode+0x2a8>)
 800179e:	f001 f951 	bl	8002a44 <HAL_GPIO_WritePin>

			TIM2->CCR1 = CH1_DC;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <autonomy_mode+0x2ac>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = CH2_DC;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <autonomy_mode+0x2b0>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = CH3_DC;
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <autonomy_mode+0x2b4>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = CH4_DC;
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <autonomy_mode+0x2b8>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
			CH1_DC = CH2_DC = CH3_DC = CH4_DC = throttle_perct * tot_TIM;
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <autonomy_mode+0x2bc>)
 80017cc:	ed93 7a00 	vldr	s14, [r3]
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <autonomy_mode+0x2c0>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017de:	ee17 2a90 	vmov	r2, s15
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <autonomy_mode+0x2b8>)
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <autonomy_mode+0x2b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <autonomy_mode+0x2b4>)
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <autonomy_mode+0x2b4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <autonomy_mode+0x2b0>)
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <autonomy_mode+0x2b0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <autonomy_mode+0x2ac>)
 80017fc:	6013      	str	r3, [r2, #0]

		}

		vTaskDelay(pdMS_TO_TICKS(1));
 80017fe:	2001      	movs	r0, #1
 8001800:	f005 fbf4 	bl	8006fec <vTaskDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8001804:	e6bc      	b.n	8001580 <autonomy_mode+0x10>
 8001806:	bf00      	nop
 8001808:	40020800 	.word	0x40020800
 800180c:	200000d4 	.word	0x200000d4
 8001810:	200000bc 	.word	0x200000bc
 8001814:	40020000 	.word	0x40020000
 8001818:	40020400 	.word	0x40020400
 800181c:	20000060 	.word	0x20000060
 8001820:	20000064 	.word	0x20000064
 8001824:	20000068 	.word	0x20000068
 8001828:	2000006c 	.word	0x2000006c
 800182c:	2000005c 	.word	0x2000005c
 8001830:	20000004 	.word	0x20000004
 8001834:	0001869f 	.word	0x0001869f

08001838 <led_blink>:
	}
}

void led_blink(void *parameters)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake( bin_sem, portMAX_DELAY );
 8001840:	4b9c      	ldr	r3, [pc, #624]	; (8001ab4 <led_blink+0x27c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	4618      	mov	r0, r3
 800184a:	f004 ff25 	bl	8006698 <xQueueSemaphoreTake>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800184e:	2120      	movs	r1, #32
 8001850:	4899      	ldr	r0, [pc, #612]	; (8001ab8 <led_blink+0x280>)
 8001852:	f001 f910 	bl	8002a76 <HAL_GPIO_TogglePin>
		if(buffer_SBUS[0] == 0x0F) //The first start byte should be 0x0F. Check if that's the case.
 8001856:	4b99      	ldr	r3, [pc, #612]	; (8001abc <led_blink+0x284>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b0f      	cmp	r3, #15
 800185e:	f040 8191 	bne.w	8001b84 <led_blink+0x34c>
			 * Each channel should hold 11 bits of data
			 * First buffer goes left as LSB, second buffer fills the remainder to 11 bit shifting right
			 * The next channel shift to get the remaining bits not used and ORs with next buffer item. Continue trying to get 11 bits per channel
			 * Of course, mask the 16 bit channels to just keep the 11 bits.
			 */
			channels_SBUS[0] = (buffer_SBUS[1] >> 0 | (buffer_SBUS[2] << 8)) & 0x07FF;//Extract 11 bits for channel 0.
 8001862:	4b96      	ldr	r3, [pc, #600]	; (8001abc <led_blink+0x284>)
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	b21a      	sxth	r2, r3
 800186a:	4b94      	ldr	r3, [pc, #592]	; (8001abc <led_blink+0x284>)
 800186c:	789b      	ldrb	r3, [r3, #2]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	b21b      	sxth	r3, r3
 8001874:	4313      	orrs	r3, r2
 8001876:	b21b      	sxth	r3, r3
 8001878:	b29b      	uxth	r3, r3
 800187a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b8f      	ldr	r3, [pc, #572]	; (8001ac0 <led_blink+0x288>)
 8001882:	801a      	strh	r2, [r3, #0]
			//EX: buffer[2](shifted):1111111100000000 buffer[1]:0000000011111111
			channels_SBUS[1] = (buffer_SBUS[2] >> 3 | (buffer_SBUS[3] << 5)) & 0x07FF;
 8001884:	4b8d      	ldr	r3, [pc, #564]	; (8001abc <led_blink+0x284>)
 8001886:	789b      	ldrb	r3, [r3, #2]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	08db      	lsrs	r3, r3, #3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	b21a      	sxth	r2, r3
 8001890:	4b8a      	ldr	r3, [pc, #552]	; (8001abc <led_blink+0x284>)
 8001892:	78db      	ldrb	r3, [r3, #3]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	015b      	lsls	r3, r3, #5
 8001898:	b21b      	sxth	r3, r3
 800189a:	4313      	orrs	r3, r2
 800189c:	b21b      	sxth	r3, r3
 800189e:	b29b      	uxth	r3, r3
 80018a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	4b86      	ldr	r3, [pc, #536]	; (8001ac0 <led_blink+0x288>)
 80018a8:	805a      	strh	r2, [r3, #2]
			//EX: buffer[2] needs to combine the five bits left over with bits from next byte
			channels_SBUS[2] = (buffer_SBUS[3] >> 6 | (buffer_SBUS[4] << 2) | buffer_SBUS[5] << 10) & 0x07FF;
 80018aa:	4b84      	ldr	r3, [pc, #528]	; (8001abc <led_blink+0x284>)
 80018ac:	78db      	ldrb	r3, [r3, #3]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	099b      	lsrs	r3, r3, #6
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	4b81      	ldr	r3, [pc, #516]	; (8001abc <led_blink+0x284>)
 80018b8:	791b      	ldrb	r3, [r3, #4]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	b21b      	sxth	r3, r3
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	4b7d      	ldr	r3, [pc, #500]	; (8001abc <led_blink+0x284>)
 80018c6:	795b      	ldrb	r3, [r3, #5]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	029b      	lsls	r3, r3, #10
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018d8:	b29a      	uxth	r2, r3
 80018da:	4b79      	ldr	r3, [pc, #484]	; (8001ac0 <led_blink+0x288>)
 80018dc:	809a      	strh	r2, [r3, #4]
			//EX: buffer[3] needs two more bits, buffer[4] must be shifted to account for buffer 3, buffer[5] must be added in to make 11 bits
			channels_SBUS[3] = (buffer_SBUS[5] >> 1 | (buffer_SBUS[6] << 7)) & 0x07FF;
 80018de:	4b77      	ldr	r3, [pc, #476]	; (8001abc <led_blink+0x284>)
 80018e0:	795b      	ldrb	r3, [r3, #5]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	085b      	lsrs	r3, r3, #1
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	4b74      	ldr	r3, [pc, #464]	; (8001abc <led_blink+0x284>)
 80018ec:	799b      	ldrb	r3, [r3, #6]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	01db      	lsls	r3, r3, #7
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <led_blink+0x288>)
 8001902:	80da      	strh	r2, [r3, #6]
			channels_SBUS[4] = (buffer_SBUS[6] >> 4 | (buffer_SBUS[7] << 4)) & 0x07FF;
 8001904:	4b6d      	ldr	r3, [pc, #436]	; (8001abc <led_blink+0x284>)
 8001906:	799b      	ldrb	r3, [r3, #6]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	b2db      	uxtb	r3, r3
 800190e:	b21a      	sxth	r2, r3
 8001910:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <led_blink+0x284>)
 8001912:	79db      	ldrb	r3, [r3, #7]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	b21b      	sxth	r3, r3
 800191a:	4313      	orrs	r3, r2
 800191c:	b21b      	sxth	r3, r3
 800191e:	b29b      	uxth	r3, r3
 8001920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001924:	b29a      	uxth	r2, r3
 8001926:	4b66      	ldr	r3, [pc, #408]	; (8001ac0 <led_blink+0x288>)
 8001928:	811a      	strh	r2, [r3, #8]
			channels_SBUS[5] = (buffer_SBUS[7] >> 7 | (buffer_SBUS[8] << 1) | buffer_SBUS[9] << 9) & 0x07FF;
 800192a:	4b64      	ldr	r3, [pc, #400]	; (8001abc <led_blink+0x284>)
 800192c:	79db      	ldrb	r3, [r3, #7]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	09db      	lsrs	r3, r3, #7
 8001932:	b2db      	uxtb	r3, r3
 8001934:	b21a      	sxth	r2, r3
 8001936:	4b61      	ldr	r3, [pc, #388]	; (8001abc <led_blink+0x284>)
 8001938:	7a1b      	ldrb	r3, [r3, #8]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	b21b      	sxth	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	b21a      	sxth	r2, r3
 8001944:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <led_blink+0x284>)
 8001946:	7a5b      	ldrb	r3, [r3, #9]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	025b      	lsls	r3, r3, #9
 800194c:	b21b      	sxth	r3, r3
 800194e:	4313      	orrs	r3, r2
 8001950:	b21b      	sxth	r3, r3
 8001952:	b29b      	uxth	r3, r3
 8001954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <led_blink+0x288>)
 800195c:	815a      	strh	r2, [r3, #10]
			channels_SBUS[6] = (buffer_SBUS[9] >> 2 | (buffer_SBUS[10] << 6)) & 0x07FF;
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <led_blink+0x284>)
 8001960:	7a5b      	ldrb	r3, [r3, #9]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	b21a      	sxth	r2, r3
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <led_blink+0x284>)
 800196c:	7a9b      	ldrb	r3, [r3, #10]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	b21b      	sxth	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b21b      	sxth	r3, r3
 8001978:	b29b      	uxth	r3, r3
 800197a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <led_blink+0x288>)
 8001982:	819a      	strh	r2, [r3, #12]
			channels_SBUS[7] = (buffer_SBUS[10] >> 5 | (buffer_SBUS[11] << 3)) & 0x07FF;
 8001984:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <led_blink+0x284>)
 8001986:	7a9b      	ldrb	r3, [r3, #10]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	b2db      	uxtb	r3, r3
 800198e:	b21a      	sxth	r2, r3
 8001990:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <led_blink+0x284>)
 8001992:	7adb      	ldrb	r3, [r3, #11]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	b21b      	sxth	r3, r3
 800199a:	4313      	orrs	r3, r2
 800199c:	b21b      	sxth	r3, r3
 800199e:	b29b      	uxth	r3, r3
 80019a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4b46      	ldr	r3, [pc, #280]	; (8001ac0 <led_blink+0x288>)
 80019a8:	81da      	strh	r2, [r3, #14]
			channels_SBUS[8] = (buffer_SBUS[12] << 0 | (buffer_SBUS[13] << 8)) & 0x07FF;
 80019aa:	4b44      	ldr	r3, [pc, #272]	; (8001abc <led_blink+0x284>)
 80019ac:	7b1b      	ldrb	r3, [r3, #12]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <led_blink+0x284>)
 80019b4:	7b5b      	ldrb	r3, [r3, #13]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	4313      	orrs	r3, r2
 80019be:	b21b      	sxth	r3, r3
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <led_blink+0x288>)
 80019ca:	821a      	strh	r2, [r3, #16]
			channels_SBUS[9] = (buffer_SBUS[13] >> 3 | (buffer_SBUS[14] << 5)) & 0x07FF;
 80019cc:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <led_blink+0x284>)
 80019ce:	7b5b      	ldrb	r3, [r3, #13]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	08db      	lsrs	r3, r3, #3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	4b38      	ldr	r3, [pc, #224]	; (8001abc <led_blink+0x284>)
 80019da:	7b9b      	ldrb	r3, [r3, #14]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	015b      	lsls	r3, r3, #5
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	4313      	orrs	r3, r2
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <led_blink+0x288>)
 80019f0:	825a      	strh	r2, [r3, #18]
			channels_SBUS[10] = (buffer_SBUS[14] >> 6 | (buffer_SBUS[15] << 2) | buffer_SBUS[16] << 10) & 0x07FF;
 80019f2:	4b32      	ldr	r3, [pc, #200]	; (8001abc <led_blink+0x284>)
 80019f4:	7b9b      	ldrb	r3, [r3, #14]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <led_blink+0x284>)
 8001a00:	7bdb      	ldrb	r3, [r3, #15]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <led_blink+0x284>)
 8001a0e:	7c1b      	ldrb	r3, [r3, #16]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	029b      	lsls	r3, r3, #10
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <led_blink+0x288>)
 8001a24:	829a      	strh	r2, [r3, #20]
			channels_SBUS[11] = (buffer_SBUS[16] >> 1 | (buffer_SBUS[17] << 7)) & 0x07FF;
 8001a26:	4b25      	ldr	r3, [pc, #148]	; (8001abc <led_blink+0x284>)
 8001a28:	7c1b      	ldrb	r3, [r3, #16]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	085b      	lsrs	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	b21a      	sxth	r2, r3
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <led_blink+0x284>)
 8001a34:	7c5b      	ldrb	r3, [r3, #17]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	01db      	lsls	r3, r3, #7
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <led_blink+0x288>)
 8001a4a:	82da      	strh	r2, [r3, #22]
			channels_SBUS[12] = (buffer_SBUS[17] >> 4 | (buffer_SBUS[18] << 4)) & 0x07FF;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <led_blink+0x284>)
 8001a4e:	7c5b      	ldrb	r3, [r3, #17]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <led_blink+0x284>)
 8001a5a:	7c9b      	ldrb	r3, [r3, #18]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <led_blink+0x288>)
 8001a70:	831a      	strh	r2, [r3, #24]
			channels_SBUS[13] = (buffer_SBUS[18] >> 7 | (buffer_SBUS[19] << 1) | buffer_SBUS[20] << 9) & 0x07FF;
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <led_blink+0x284>)
 8001a74:	7c9b      	ldrb	r3, [r3, #18]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	09db      	lsrs	r3, r3, #7
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <led_blink+0x284>)
 8001a80:	7cdb      	ldrb	r3, [r3, #19]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b21a      	sxth	r2, r3
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <led_blink+0x284>)
 8001a8e:	7d1b      	ldrb	r3, [r3, #20]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	025b      	lsls	r3, r3, #9
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <led_blink+0x288>)
 8001aa4:	835a      	strh	r2, [r3, #26]
			channels_SBUS[14] = (buffer_SBUS[20] >> 2 | (buffer_SBUS[21] << 6)) & 0x07FF;
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <led_blink+0x284>)
 8001aa8:	7d1b      	ldrb	r3, [r3, #20]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	e007      	b.n	8001ac4 <led_blink+0x28c>
 8001ab4:	200000cc 	.word	0x200000cc
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	20000074 	.word	0x20000074
 8001ac0:	20000090 	.word	0x20000090
 8001ac4:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <led_blink+0x354>)
 8001ac6:	7d5b      	ldrb	r3, [r3, #21]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	019b      	lsls	r3, r3, #6
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <led_blink+0x358>)
 8001adc:	839a      	strh	r2, [r3, #28]
			channels_SBUS[15] = (buffer_SBUS[21] >> 5 | (buffer_SBUS[22] << 3)) & 0x07FF;
 8001ade:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <led_blink+0x354>)
 8001ae0:	7d5b      	ldrb	r3, [r3, #21]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	095b      	lsrs	r3, r3, #5
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	b21a      	sxth	r2, r3
 8001aea:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <led_blink+0x354>)
 8001aec:	7d9b      	ldrb	r3, [r3, #22]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	4313      	orrs	r3, r2
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <led_blink+0x358>)
 8001b02:	83da      	strh	r2, [r3, #30]

			if (buffer_SBUS[23] & (1 << 0))
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <led_blink+0x354>)
 8001b06:	7ddb      	ldrb	r3, [r3, #23]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <led_blink+0x2e2>
			{
				channels_SBUS[16] = 1; //If byte 23(digital channel) is 1, then 17th channel is 1
 8001b12:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <led_blink+0x358>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	841a      	strh	r2, [r3, #32]
 8001b18:	e002      	b.n	8001b20 <led_blink+0x2e8>
			}else{
				channels_SBUS[16] = 0;
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <led_blink+0x358>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	841a      	strh	r2, [r3, #32]
			}

			if (buffer_SBUS[23] & (1 << 1)) //Digital Channel 18.
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <led_blink+0x354>)
 8001b22:	7ddb      	ldrb	r3, [r3, #23]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <led_blink+0x2fe>
			{
				channels_SBUS[17] = 1;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <led_blink+0x358>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	845a      	strh	r2, [r3, #34]	; 0x22
 8001b34:	e002      	b.n	8001b3c <led_blink+0x304>
			}else {
				channels_SBUS[17] = 0;
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <led_blink+0x358>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	845a      	strh	r2, [r3, #34]	; 0x22
			}

			//Failsafe for lost signal
			if (buffer_SBUS[23] & (1 << 2)) {
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <led_blink+0x354>)
 8001b3e:	7ddb      	ldrb	r3, [r3, #23]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <led_blink+0x318>
				failsafe_status = 0;
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <led_blink+0x35c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	801a      	strh	r2, [r3, #0]
			}
			if (channels_SBUS[4] == 1811)
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <led_blink+0x358>)
 8001b52:	891b      	ldrh	r3, [r3, #8]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	f240 7213 	movw	r2, #1811	; 0x713
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d105      	bne.n	8001b6a <led_blink+0x332>
			{
				vTaskResume(auto_handler);
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <led_blink+0x360>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f005 fb48 	bl	80071f8 <vTaskResume>
 8001b68:	e00c      	b.n	8001b84 <led_blink+0x34c>
			} else
			{
				vTaskSuspend(auto_handler);
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <led_blink+0x360>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f005 fa70 	bl	8007054 <vTaskSuspend>
				xQueueSend(queue_motor, channels_SBUS, portMAX_DELAY);
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <led_blink+0x364>)
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7e:	4904      	ldr	r1, [pc, #16]	; (8001b90 <led_blink+0x358>)
 8001b80:	f004 fa56 	bl	8006030 <xQueueGenericSend>
			}

		}
		vTaskDelay(pdMS_TO_TICKS(100));
 8001b84:	2064      	movs	r0, #100	; 0x64
 8001b86:	f005 fa31 	bl	8006fec <vTaskDelay>
		xSemaphoreTake( bin_sem, portMAX_DELAY );
 8001b8a:	e659      	b.n	8001840 <led_blink+0x8>
 8001b8c:	20000074 	.word	0x20000074
 8001b90:	20000090 	.word	0x20000090
 8001b94:	20000070 	.word	0x20000070
 8001b98:	200000c8 	.word	0x200000c8
 8001b9c:	200000d0 	.word	0x200000d0

08001ba0 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken;
	if (huart->Instance == USART1) {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <HAL_UART_RxCpltCallback+0x50>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d119      	bne.n	8001be6 <HAL_UART_RxCpltCallback+0x46>
	    HAL_UART_Receive_IT(&huart1, buffer_SBUS, 25);
 8001bb2:	2219      	movs	r2, #25
 8001bb4:	490f      	ldr	r1, [pc, #60]	; (8001bf4 <HAL_UART_RxCpltCallback+0x54>)
 8001bb6:	4810      	ldr	r0, [pc, #64]	; (8001bf8 <HAL_UART_RxCpltCallback+0x58>)
 8001bb8:	f003 f959 	bl	8004e6e <HAL_UART_Receive_IT>

	    xHigherPriorityTaskWoken = pdFALSE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
	    xSemaphoreGiveFromISR(bin_sem,&xHigherPriorityTaskWoken );
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_UART_RxCpltCallback+0x5c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f107 020c 	add.w	r2, r7, #12
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f004 fbe0 	bl	8006390 <xQueueGiveFromISR>
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_UART_RxCpltCallback+0x46>
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_UART_RxCpltCallback+0x60>)
 8001bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	f3bf 8f4f 	dsb	sy
 8001be2:	f3bf 8f6f 	isb	sy

	}
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	20000074 	.word	0x20000074
 8001bf8:	200001b0 	.word	0x200001b0
 8001bfc:	200000cc 	.word	0x200000cc
 8001c00:	e000ed04 	.word	0xe000ed04

08001c04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c16:	f000 fbd5 	bl	80023c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40010000 	.word	0x40010000

08001c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <Error_Handler+0x8>
	...

08001c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a08      	ldr	r2, [pc, #32]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	; 0x30
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <HAL_InitTick+0xd0>)
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	4a2d      	ldr	r2, [pc, #180]	; (8001d54 <HAL_InitTick+0xd0>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <HAL_InitTick+0xd0>)
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cb0:	f107 020c 	add.w	r2, r7, #12
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 f810 	bl	8002ce0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cc0:	f000 fffa 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 8001cc4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc8:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <HAL_InitTick+0xd4>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0c9b      	lsrs	r3, r3, #18
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_InitTick+0xd8>)
 8001cd6:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <HAL_InitTick+0xdc>)
 8001cd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_InitTick+0xd8>)
 8001cdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ce0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ce2:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <HAL_InitTick+0xd8>)
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <HAL_InitTick+0xd8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_InitTick+0xd8>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_InitTick+0xd8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001cfa:	4818      	ldr	r0, [pc, #96]	; (8001d5c <HAL_InitTick+0xd8>)
 8001cfc:	f001 fcf0 	bl	80036e0 <HAL_TIM_Base_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d11b      	bne.n	8001d46 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d0e:	4813      	ldr	r0, [pc, #76]	; (8001d5c <HAL_InitTick+0xd8>)
 8001d10:	f001 fd36 	bl	8003780 <HAL_TIM_Base_Start_IT>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d111      	bne.n	8001d46 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d22:	2019      	movs	r0, #25
 8001d24:	f000 fc42 	bl	80025ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	d808      	bhi.n	8001d40 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	2019      	movs	r0, #25
 8001d34:	f000 fc1e 	bl	8002574 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d38:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_InitTick+0xe0>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e002      	b.n	8001d46 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3730      	adds	r7, #48	; 0x30
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	431bde83 	.word	0x431bde83
 8001d5c:	200000d8 	.word	0x200000d8
 8001d60:	40010000 	.word	0x40010000
 8001d64:	2000000c 	.word	0x2000000c

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <NMI_Handler+0x4>

08001d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <UsageFault_Handler+0x4>

08001d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d9a:	f002 f805 	bl	8003da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200000d8 	.word	0x200000d8

08001da8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <TIM3_IRQHandler+0x10>)
 8001dae:	f001 fffb 	bl	8003da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000168 	.word	0x20000168

08001dbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <USART1_IRQHandler+0x10>)
 8001dc2:	f003 f885 	bl	8004ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200001b0 	.word	0x200001b0

08001dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <SystemInit+0x20>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <SystemInit+0x20>)
 8001ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08e      	sub	sp, #56	; 0x38
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	f107 0320 	add.w	r3, r7, #32
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
 8001e20:	615a      	str	r2, [r3, #20]
 8001e22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e24:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e2c:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e32:	4b3a      	ldr	r3, [pc, #232]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001e38:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e40:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e46:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e4c:	4833      	ldr	r0, [pc, #204]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001e4e:	f001 fc47 	bl	80036e0 <HAL_TIM_Base_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e58:	f7ff fee6 	bl	8001c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e66:	4619      	mov	r1, r3
 8001e68:	482c      	ldr	r0, [pc, #176]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001e6a:	f002 fa03 	bl	8004274 <HAL_TIM_ConfigClockSource>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e74:	f7ff fed8 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e78:	4828      	ldr	r0, [pc, #160]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001e7a:	f001 fcf1 	bl	8003860 <HAL_TIM_PWM_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e84:	f7ff fed0 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e90:	f107 0320 	add.w	r3, r7, #32
 8001e94:	4619      	mov	r1, r3
 8001e96:	4821      	ldr	r0, [pc, #132]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001e98:	f002 ff0c 	bl	8004cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ea2:	f7ff fec1 	bl	8001c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea6:	2360      	movs	r3, #96	; 0x60
 8001ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4817      	ldr	r0, [pc, #92]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001ebe:	f002 f917 	bl	80040f0 <HAL_TIM_PWM_ConfigChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ec8:	f7ff feae 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4812      	ldr	r0, [pc, #72]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001ed4:	f002 f90c 	bl	80040f0 <HAL_TIM_PWM_ConfigChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001ede:	f7ff fea3 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001eea:	f002 f901 	bl	80040f0 <HAL_TIM_PWM_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001ef4:	f7ff fe98 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	220c      	movs	r2, #12
 8001efc:	4619      	mov	r1, r3
 8001efe:	4807      	ldr	r0, [pc, #28]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001f00:	f002 f8f6 	bl	80040f0 <HAL_TIM_PWM_ConfigChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001f0a:	f7ff fe8d 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f0e:	4803      	ldr	r0, [pc, #12]	; (8001f1c <MX_TIM2_Init+0x128>)
 8001f10:	f000 f8da 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 8001f14:	bf00      	nop
 8001f16:	3738      	adds	r7, #56	; 0x38
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000120 	.word	0x20000120

08001f20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0318 	add.w	r3, r7, #24
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f3e:	463b      	mov	r3, r7
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <MX_TIM3_Init+0xd8>)
 8001f4c:	4a2b      	ldr	r2, [pc, #172]	; (8001ffc <MX_TIM3_Init+0xdc>)
 8001f4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <MX_TIM3_Init+0xd8>)
 8001f52:	2253      	movs	r2, #83	; 0x53
 8001f54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <MX_TIM3_Init+0xd8>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f5c:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <MX_TIM3_Init+0xd8>)
 8001f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <MX_TIM3_Init+0xd8>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6a:	4b23      	ldr	r3, [pc, #140]	; (8001ff8 <MX_TIM3_Init+0xd8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f70:	4821      	ldr	r0, [pc, #132]	; (8001ff8 <MX_TIM3_Init+0xd8>)
 8001f72:	f001 fbb5 	bl	80036e0 <HAL_TIM_Base_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001f7c:	f7ff fe54 	bl	8001c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f84:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f86:	f107 0318 	add.w	r3, r7, #24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	481a      	ldr	r0, [pc, #104]	; (8001ff8 <MX_TIM3_Init+0xd8>)
 8001f8e:	f002 f971 	bl	8004274 <HAL_TIM_ConfigClockSource>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f98:	f7ff fe46 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001f9c:	4816      	ldr	r0, [pc, #88]	; (8001ff8 <MX_TIM3_Init+0xd8>)
 8001f9e:	f001 fd81 	bl	8003aa4 <HAL_TIM_IC_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001fa8:	f7ff fe3e 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480f      	ldr	r0, [pc, #60]	; (8001ff8 <MX_TIM3_Init+0xd8>)
 8001fbc:	f002 fe7a 	bl	8004cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001fc6:	f7ff fe2f 	bl	8001c28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001fca:	230a      	movs	r3, #10
 8001fcc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fda:	463b      	mov	r3, r7
 8001fdc:	2200      	movs	r2, #0
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_TIM3_Init+0xd8>)
 8001fe2:	f001 ffe9 	bl	8003fb8 <HAL_TIM_IC_ConfigChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001fec:	f7ff fe1c 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	3728      	adds	r7, #40	; 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000168 	.word	0x20000168
 8001ffc:	40000400 	.word	0x40000400

08002000 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002020:	d10e      	bne.n	8002040 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <HAL_TIM_Base_MspInit+0xbc>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a24      	ldr	r2, [pc, #144]	; (80020bc <HAL_TIM_Base_MspInit+0xbc>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <HAL_TIM_Base_MspInit+0xbc>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800203e:	e038      	b.n	80020b2 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM3)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_TIM_Base_MspInit+0xc0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d133      	bne.n	80020b2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_TIM_Base_MspInit+0xbc>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <HAL_TIM_Base_MspInit+0xbc>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_TIM_Base_MspInit+0xbc>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_TIM_Base_MspInit+0xbc>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <HAL_TIM_Base_MspInit+0xbc>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_TIM_Base_MspInit+0xbc>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002082:	2340      	movs	r3, #64	; 0x40
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002092:	2302      	movs	r3, #2
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	4809      	ldr	r0, [pc, #36]	; (80020c4 <HAL_TIM_Base_MspInit+0xc4>)
 800209e:	f000 fb25 	bl	80026ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 7, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2107      	movs	r1, #7
 80020a6:	201d      	movs	r0, #29
 80020a8:	f000 fa64 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020ac:	201d      	movs	r0, #29
 80020ae:	f000 fa7d 	bl	80025ac <HAL_NVIC_EnableIRQ>
}
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	; 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40000400 	.word	0x40000400
 80020c4:	40020000 	.word	0x40020000

080020c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e8:	d13c      	bne.n	8002164 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b1f      	ldr	r3, [pc, #124]	; (800216c <HAL_TIM_MspPostInit+0xa4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a1e      	ldr	r2, [pc, #120]	; (800216c <HAL_TIM_MspPostInit+0xa4>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <HAL_TIM_MspPostInit+0xa4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_TIM_MspPostInit+0xa4>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_TIM_MspPostInit+0xa4>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_TIM_MspPostInit+0xa4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002122:	2303      	movs	r3, #3
 8002124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002132:	2301      	movs	r3, #1
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	480c      	ldr	r0, [pc, #48]	; (8002170 <HAL_TIM_MspPostInit+0xa8>)
 800213e:	f000 fad5 	bl	80026ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8002142:	f240 4304 	movw	r3, #1028	; 0x404
 8002146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002154:	2301      	movs	r3, #1
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4619      	mov	r1, r3
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <HAL_TIM_MspPostInit+0xac>)
 8002160:	f000 fac4 	bl	80026ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002164:	bf00      	nop
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40023800 	.word	0x40023800
 8002170:	40020000 	.word	0x40020000
 8002174:	40020400 	.word	0x40020400

08002178 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <MX_USART1_UART_Init+0x4c>)
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <MX_USART1_UART_Init+0x50>)
 8002180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <MX_USART1_UART_Init+0x4c>)
 8002184:	4a11      	ldr	r2, [pc, #68]	; (80021cc <MX_USART1_UART_Init+0x54>)
 8002186:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <MX_USART1_UART_Init+0x4c>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <MX_USART1_UART_Init+0x4c>)
 8002190:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002194:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <MX_USART1_UART_Init+0x4c>)
 8002198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MX_USART1_UART_Init+0x4c>)
 80021a0:	2204      	movs	r2, #4
 80021a2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a4:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <MX_USART1_UART_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <MX_USART1_UART_Init+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021b0:	4804      	ldr	r0, [pc, #16]	; (80021c4 <MX_USART1_UART_Init+0x4c>)
 80021b2:	f002 fe0f 	bl	8004dd4 <HAL_UART_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80021bc:	f7ff fd34 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200001b0 	.word	0x200001b0
 80021c8:	40011000 	.word	0x40011000
 80021cc:	000186a0 	.word	0x000186a0

080021d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <MX_USART2_UART_Init+0x50>)
 80021d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021f6:	220c      	movs	r2, #12
 80021f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <MX_USART2_UART_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <MX_USART2_UART_Init+0x4c>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002206:	4805      	ldr	r0, [pc, #20]	; (800221c <MX_USART2_UART_Init+0x4c>)
 8002208:	f002 fde4 	bl	8004dd4 <HAL_UART_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002212:	f7ff fd09 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200001f4 	.word	0x200001f4
 8002220:	40004400 	.word	0x40004400

08002224 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08c      	sub	sp, #48	; 0x30
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 031c 	add.w	r3, r7, #28
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a36      	ldr	r2, [pc, #216]	; (800231c <HAL_UART_MspInit+0xf8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d135      	bne.n	80022b2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_UART_MspInit+0xfc>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a34      	ldr	r2, [pc, #208]	; (8002320 <HAL_UART_MspInit+0xfc>)
 8002250:	f043 0310 	orr.w	r3, r3, #16
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b32      	ldr	r3, [pc, #200]	; (8002320 <HAL_UART_MspInit+0xfc>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <HAL_UART_MspInit+0xfc>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a2d      	ldr	r2, [pc, #180]	; (8002320 <HAL_UART_MspInit+0xfc>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <HAL_UART_MspInit+0xfc>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800227e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228c:	2303      	movs	r3, #3
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002290:	2307      	movs	r3, #7
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002294:	f107 031c 	add.w	r3, r7, #28
 8002298:	4619      	mov	r1, r3
 800229a:	4822      	ldr	r0, [pc, #136]	; (8002324 <HAL_UART_MspInit+0x100>)
 800229c:	f000 fa26 	bl	80026ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2106      	movs	r1, #6
 80022a4:	2025      	movs	r0, #37	; 0x25
 80022a6:	f000 f965 	bl	8002574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022aa:	2025      	movs	r0, #37	; 0x25
 80022ac:	f000 f97e 	bl	80025ac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022b0:	e030      	b.n	8002314 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_UART_MspInit+0x104>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d12b      	bne.n	8002314 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_UART_MspInit+0xfc>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	4a16      	ldr	r2, [pc, #88]	; (8002320 <HAL_UART_MspInit+0xfc>)
 80022c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ca:	6413      	str	r3, [r2, #64]	; 0x40
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_UART_MspInit+0xfc>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_UART_MspInit+0xfc>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <HAL_UART_MspInit+0xfc>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6313      	str	r3, [r2, #48]	; 0x30
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_UART_MspInit+0xfc>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022f4:	230c      	movs	r3, #12
 80022f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002304:	2307      	movs	r3, #7
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 031c 	add.w	r3, r7, #28
 800230c:	4619      	mov	r1, r3
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <HAL_UART_MspInit+0x100>)
 8002310:	f000 f9ec 	bl	80026ec <HAL_GPIO_Init>
}
 8002314:	bf00      	nop
 8002316:	3730      	adds	r7, #48	; 0x30
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40011000 	.word	0x40011000
 8002320:	40023800 	.word	0x40023800
 8002324:	40020000 	.word	0x40020000
 8002328:	40004400 	.word	0x40004400

0800232c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800232c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002364 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002330:	480d      	ldr	r0, [pc, #52]	; (8002368 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002332:	490e      	ldr	r1, [pc, #56]	; (800236c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002334:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002338:	e002      	b.n	8002340 <LoopCopyDataInit>

0800233a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800233c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800233e:	3304      	adds	r3, #4

08002340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002344:	d3f9      	bcc.n	800233a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002346:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002348:	4c0b      	ldr	r4, [pc, #44]	; (8002378 <LoopFillZerobss+0x26>)
  movs r3, #0
 800234a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800234c:	e001      	b.n	8002352 <LoopFillZerobss>

0800234e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800234e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002350:	3204      	adds	r2, #4

08002352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002354:	d3fb      	bcc.n	800234e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002356:	f7ff fd3b 	bl	8001dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800235a:	f006 fe8b 	bl	8009074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235e:	f7fe fd8d 	bl	8000e7c <main>
  bx  lr    
 8002362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800236c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002370:	08009158 	.word	0x08009158
  ldr r2, =_sbss
 8002374:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002378:	20012fe0 	.word	0x20012fe0

0800237c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800237c:	e7fe      	b.n	800237c <ADC_IRQHandler>
	...

08002380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <HAL_Init+0x40>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <HAL_Init+0x40>)
 800238a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_Init+0x40>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <HAL_Init+0x40>)
 8002396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800239a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HAL_Init+0x40>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <HAL_Init+0x40>)
 80023a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a8:	2003      	movs	r0, #3
 80023aa:	f000 f8d8 	bl	800255e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7ff fc68 	bl	8001c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b4:	f7ff fc3e 	bl	8001c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40023c00 	.word	0x40023c00

080023c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_IncTick+0x20>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_IncTick+0x24>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_IncTick+0x24>)
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000010 	.word	0x20000010
 80023e8:	20000238 	.word	0x20000238

080023ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return uwTick;
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <HAL_GetTick+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000238 	.word	0x20000238

08002404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800242c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002436:	4a04      	ldr	r2, [pc, #16]	; (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60d3      	str	r3, [r2, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <__NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	db0b      	blt.n	8002492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4907      	ldr	r1, [pc, #28]	; (80024a0 <__NVIC_EnableIRQ+0x38>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2001      	movs	r0, #1
 800248a:	fa00 f202 	lsl.w	r2, r0, r2
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	db0a      	blt.n	80024ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	490c      	ldr	r1, [pc, #48]	; (80024f0 <__NVIC_SetPriority+0x4c>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024cc:	e00a      	b.n	80024e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4908      	ldr	r1, [pc, #32]	; (80024f4 <__NVIC_SetPriority+0x50>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3b04      	subs	r3, #4
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	761a      	strb	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	bf28      	it	cs
 8002516:	2304      	movcs	r3, #4
 8002518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3304      	adds	r3, #4
 800251e:	2b06      	cmp	r3, #6
 8002520:	d902      	bls.n	8002528 <NVIC_EncodePriority+0x30>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3b03      	subs	r3, #3
 8002526:	e000      	b.n	800252a <NVIC_EncodePriority+0x32>
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	f04f 32ff 	mov.w	r2, #4294967295
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	401a      	ands	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43d9      	mvns	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	4313      	orrs	r3, r2
         );
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	; 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ff4c 	bl	8002404 <__NVIC_SetPriorityGrouping>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002586:	f7ff ff61 	bl	800244c <__NVIC_GetPriorityGrouping>
 800258a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	6978      	ldr	r0, [r7, #20]
 8002592:	f7ff ffb1 	bl	80024f8 <NVIC_EncodePriority>
 8002596:	4602      	mov	r2, r0
 8002598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff80 	bl	80024a4 <__NVIC_SetPriority>
}
 80025a4:	bf00      	nop
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff54 	bl	8002468 <__NVIC_EnableIRQ>
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025d6:	f7ff ff09 	bl	80023ec <HAL_GetTick>
 80025da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d008      	beq.n	80025fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2280      	movs	r2, #128	; 0x80
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e052      	b.n	80026a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0216 	bic.w	r2, r2, #22
 8002608:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002618:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d103      	bne.n	800262a <HAL_DMA_Abort+0x62>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0208 	bic.w	r2, r2, #8
 8002638:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800264a:	e013      	b.n	8002674 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800264c:	f7ff fece 	bl	80023ec <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b05      	cmp	r3, #5
 8002658:	d90c      	bls.n	8002674 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2220      	movs	r2, #32
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2203      	movs	r2, #3
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e015      	b.n	80026a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1e4      	bne.n	800264c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	223f      	movs	r2, #63	; 0x3f
 8002688:	409a      	lsls	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d004      	beq.n	80026c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2280      	movs	r2, #128	; 0x80
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00c      	b.n	80026e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2205      	movs	r2, #5
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	e165      	b.n	80029d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002708:	2201      	movs	r2, #1
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	429a      	cmp	r2, r3
 8002722:	f040 8154 	bne.w	80029ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d005      	beq.n	800273e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273a:	2b02      	cmp	r3, #2
 800273c:	d130      	bne.n	80027a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 0201 	and.w	r2, r3, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d017      	beq.n	80027dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2203      	movs	r2, #3
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d123      	bne.n	8002830 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	08da      	lsrs	r2, r3, #3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3208      	adds	r2, #8
 80027f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	220f      	movs	r2, #15
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	08da      	lsrs	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3208      	adds	r2, #8
 800282a:	69b9      	ldr	r1, [r7, #24]
 800282c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0203 	and.w	r2, r3, #3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80ae 	beq.w	80029ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b5d      	ldr	r3, [pc, #372]	; (80029ec <HAL_GPIO_Init+0x300>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	4a5c      	ldr	r2, [pc, #368]	; (80029ec <HAL_GPIO_Init+0x300>)
 800287c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002880:	6453      	str	r3, [r2, #68]	; 0x44
 8002882:	4b5a      	ldr	r3, [pc, #360]	; (80029ec <HAL_GPIO_Init+0x300>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800288e:	4a58      	ldr	r2, [pc, #352]	; (80029f0 <HAL_GPIO_Init+0x304>)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	220f      	movs	r2, #15
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4f      	ldr	r2, [pc, #316]	; (80029f4 <HAL_GPIO_Init+0x308>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d025      	beq.n	8002906 <HAL_GPIO_Init+0x21a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4e      	ldr	r2, [pc, #312]	; (80029f8 <HAL_GPIO_Init+0x30c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01f      	beq.n	8002902 <HAL_GPIO_Init+0x216>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4d      	ldr	r2, [pc, #308]	; (80029fc <HAL_GPIO_Init+0x310>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_Init+0x212>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4c      	ldr	r2, [pc, #304]	; (8002a00 <HAL_GPIO_Init+0x314>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_GPIO_Init+0x20e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4b      	ldr	r2, [pc, #300]	; (8002a04 <HAL_GPIO_Init+0x318>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_Init+0x20a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4a      	ldr	r2, [pc, #296]	; (8002a08 <HAL_GPIO_Init+0x31c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x206>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a49      	ldr	r2, [pc, #292]	; (8002a0c <HAL_GPIO_Init+0x320>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_Init+0x202>
 80028ea:	2306      	movs	r3, #6
 80028ec:	e00c      	b.n	8002908 <HAL_GPIO_Init+0x21c>
 80028ee:	2307      	movs	r3, #7
 80028f0:	e00a      	b.n	8002908 <HAL_GPIO_Init+0x21c>
 80028f2:	2305      	movs	r3, #5
 80028f4:	e008      	b.n	8002908 <HAL_GPIO_Init+0x21c>
 80028f6:	2304      	movs	r3, #4
 80028f8:	e006      	b.n	8002908 <HAL_GPIO_Init+0x21c>
 80028fa:	2303      	movs	r3, #3
 80028fc:	e004      	b.n	8002908 <HAL_GPIO_Init+0x21c>
 80028fe:	2302      	movs	r3, #2
 8002900:	e002      	b.n	8002908 <HAL_GPIO_Init+0x21c>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_GPIO_Init+0x21c>
 8002906:	2300      	movs	r3, #0
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	f002 0203 	and.w	r2, r2, #3
 800290e:	0092      	lsls	r2, r2, #2
 8002910:	4093      	lsls	r3, r2
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002918:	4935      	ldr	r1, [pc, #212]	; (80029f0 <HAL_GPIO_Init+0x304>)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	3302      	adds	r3, #2
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002926:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <HAL_GPIO_Init+0x324>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294a:	4a31      	ldr	r2, [pc, #196]	; (8002a10 <HAL_GPIO_Init+0x324>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002950:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <HAL_GPIO_Init+0x324>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002974:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <HAL_GPIO_Init+0x324>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800297a:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <HAL_GPIO_Init+0x324>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800299e:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <HAL_GPIO_Init+0x324>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_GPIO_Init+0x324>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029c8:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <HAL_GPIO_Init+0x324>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	f67f ae96 	bls.w	8002708 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40013800 	.word	0x40013800
 80029f4:	40020000 	.word	0x40020000
 80029f8:	40020400 	.word	0x40020400
 80029fc:	40020800 	.word	0x40020800
 8002a00:	40020c00 	.word	0x40020c00
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40021400 	.word	0x40021400
 8002a0c:	40021800 	.word	0x40021800
 8002a10:	40013c00 	.word	0x40013c00

08002a14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	887b      	ldrh	r3, [r7, #2]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	e001      	b.n	8002a36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]
 8002a50:	4613      	mov	r3, r2
 8002a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a54:	787b      	ldrb	r3, [r7, #1]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a60:	e003      	b.n	8002a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a62:	887b      	ldrh	r3, [r7, #2]
 8002a64:	041a      	lsls	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	619a      	str	r2, [r3, #24]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a88:	887a      	ldrh	r2, [r7, #2]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	041a      	lsls	r2, r3, #16
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	43d9      	mvns	r1, r3
 8002a94:	887b      	ldrh	r3, [r7, #2]
 8002a96:	400b      	ands	r3, r1
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	619a      	str	r2, [r3, #24]
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0cc      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d90c      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b65      	ldr	r3, [pc, #404]	; (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b63      	ldr	r3, [pc, #396]	; (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0b8      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b00:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a52      	ldr	r2, [pc, #328]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b24:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	494d      	ldr	r1, [pc, #308]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d044      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d119      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e07f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d003      	beq.n	8002b6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	4b3f      	ldr	r3, [pc, #252]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e06f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e067      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8a:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f023 0203 	bic.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4934      	ldr	r1, [pc, #208]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b9c:	f7ff fc26 	bl	80023ec <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7ff fc22 	bl	80023ec <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e04f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 020c 	and.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1eb      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b25      	ldr	r3, [pc, #148]	; (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d20c      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e032      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4916      	ldr	r1, [pc, #88]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	490e      	ldr	r1, [pc, #56]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c32:	f000 f887 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	490a      	ldr	r1, [pc, #40]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	5ccb      	ldrb	r3, [r1, r3]
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff f816 	bl	8001c84 <HAL_InitTick>

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023c00 	.word	0x40023c00
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	08009130 	.word	0x08009130
 8002c70:	20000008 	.word	0x20000008
 8002c74:	2000000c 	.word	0x2000000c

08002c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000008 	.word	0x20000008

08002c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c94:	f7ff fff0 	bl	8002c78 <HAL_RCC_GetHCLKFreq>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	0a9b      	lsrs	r3, r3, #10
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	4903      	ldr	r1, [pc, #12]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca6:	5ccb      	ldrb	r3, [r1, r3]
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	08009140 	.word	0x08009140

08002cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cbc:	f7ff ffdc 	bl	8002c78 <HAL_RCC_GetHCLKFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	0b5b      	lsrs	r3, r3, #13
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	4903      	ldr	r1, [pc, #12]	; (8002cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	08009140 	.word	0x08009140

08002ce0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	220f      	movs	r2, #15
 8002cee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_RCC_GetClockConfig+0x5c>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0203 	and.w	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_RCC_GetClockConfig+0x5c>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <HAL_RCC_GetClockConfig+0x5c>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_GetClockConfig+0x5c>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	08db      	lsrs	r3, r3, #3
 8002d1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d22:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <HAL_RCC_GetClockConfig+0x60>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 020f 	and.w	r2, r3, #15
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	601a      	str	r2, [r3, #0]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40023c00 	.word	0x40023c00

08002d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d48:	b0ae      	sub	sp, #184	; 0xb8
 8002d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d6a:	4bcb      	ldr	r3, [pc, #812]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	f200 8206 	bhi.w	8003184 <HAL_RCC_GetSysClockFreq+0x440>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002db5 	.word	0x08002db5
 8002d84:	08003185 	.word	0x08003185
 8002d88:	08003185 	.word	0x08003185
 8002d8c:	08003185 	.word	0x08003185
 8002d90:	08002dbd 	.word	0x08002dbd
 8002d94:	08003185 	.word	0x08003185
 8002d98:	08003185 	.word	0x08003185
 8002d9c:	08003185 	.word	0x08003185
 8002da0:	08002dc5 	.word	0x08002dc5
 8002da4:	08003185 	.word	0x08003185
 8002da8:	08003185 	.word	0x08003185
 8002dac:	08003185 	.word	0x08003185
 8002db0:	08002fb5 	.word	0x08002fb5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4bb9      	ldr	r3, [pc, #740]	; (800309c <HAL_RCC_GetSysClockFreq+0x358>)
 8002db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002dba:	e1e7      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dbc:	4bb8      	ldr	r3, [pc, #736]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dc2:	e1e3      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc4:	4bb4      	ldr	r3, [pc, #720]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dd0:	4bb1      	ldr	r3, [pc, #708]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d071      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ddc:	4bae      	ldr	r3, [pc, #696]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002de8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e02:	4622      	mov	r2, r4
 8002e04:	462b      	mov	r3, r5
 8002e06:	f04f 0000 	mov.w	r0, #0
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	0159      	lsls	r1, r3, #5
 8002e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e14:	0150      	lsls	r0, r2, #5
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	1a51      	subs	r1, r2, r1
 8002e1e:	6439      	str	r1, [r7, #64]	; 0x40
 8002e20:	4629      	mov	r1, r5
 8002e22:	eb63 0301 	sbc.w	r3, r3, r1
 8002e26:	647b      	str	r3, [r7, #68]	; 0x44
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e34:	4649      	mov	r1, r9
 8002e36:	018b      	lsls	r3, r1, #6
 8002e38:	4641      	mov	r1, r8
 8002e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e3e:	4641      	mov	r1, r8
 8002e40:	018a      	lsls	r2, r1, #6
 8002e42:	4641      	mov	r1, r8
 8002e44:	1a51      	subs	r1, r2, r1
 8002e46:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e48:	4649      	mov	r1, r9
 8002e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e5c:	4649      	mov	r1, r9
 8002e5e:	00cb      	lsls	r3, r1, #3
 8002e60:	4641      	mov	r1, r8
 8002e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e66:	4641      	mov	r1, r8
 8002e68:	00ca      	lsls	r2, r1, #3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4622      	mov	r2, r4
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
 8002e76:	462b      	mov	r3, r5
 8002e78:	460a      	mov	r2, r1
 8002e7a:	eb42 0303 	adc.w	r3, r2, r3
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	024b      	lsls	r3, r1, #9
 8002e90:	4621      	mov	r1, r4
 8002e92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e96:	4621      	mov	r1, r4
 8002e98:	024a      	lsls	r2, r1, #9
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ea8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002eac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002eb0:	f7fd fdcc 	bl	8000a4c <__aeabi_uldivmod>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4613      	mov	r3, r2
 8002eba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ebe:	e067      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec0:	4b75      	ldr	r3, [pc, #468]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ecc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eda:	2300      	movs	r3, #0
 8002edc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ede:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002ee2:	4622      	mov	r2, r4
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	f04f 0000 	mov.w	r0, #0
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	0159      	lsls	r1, r3, #5
 8002ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef4:	0150      	lsls	r0, r2, #5
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4621      	mov	r1, r4
 8002efc:	1a51      	subs	r1, r2, r1
 8002efe:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f00:	4629      	mov	r1, r5
 8002f02:	eb63 0301 	sbc.w	r3, r3, r1
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f14:	4649      	mov	r1, r9
 8002f16:	018b      	lsls	r3, r1, #6
 8002f18:	4641      	mov	r1, r8
 8002f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f1e:	4641      	mov	r1, r8
 8002f20:	018a      	lsls	r2, r1, #6
 8002f22:	4641      	mov	r1, r8
 8002f24:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f28:	4649      	mov	r1, r9
 8002f2a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f42:	4692      	mov	sl, r2
 8002f44:	469b      	mov	fp, r3
 8002f46:	4623      	mov	r3, r4
 8002f48:	eb1a 0303 	adds.w	r3, sl, r3
 8002f4c:	623b      	str	r3, [r7, #32]
 8002f4e:	462b      	mov	r3, r5
 8002f50:	eb4b 0303 	adc.w	r3, fp, r3
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f62:	4629      	mov	r1, r5
 8002f64:	028b      	lsls	r3, r1, #10
 8002f66:	4621      	mov	r1, r4
 8002f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	028a      	lsls	r2, r1, #10
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f78:	2200      	movs	r2, #0
 8002f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f7c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f82:	f7fd fd63 	bl	8000a4c <__aeabi_uldivmod>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f90:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fb2:	e0eb      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb4:	4b38      	ldr	r3, [pc, #224]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fc0:	4b35      	ldr	r3, [pc, #212]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d06b      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	663b      	str	r3, [r7, #96]	; 0x60
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	667b      	str	r3, [r7, #100]	; 0x64
 8002fe4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002fe8:	4622      	mov	r2, r4
 8002fea:	462b      	mov	r3, r5
 8002fec:	f04f 0000 	mov.w	r0, #0
 8002ff0:	f04f 0100 	mov.w	r1, #0
 8002ff4:	0159      	lsls	r1, r3, #5
 8002ff6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ffa:	0150      	lsls	r0, r2, #5
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4621      	mov	r1, r4
 8003002:	1a51      	subs	r1, r2, r1
 8003004:	61b9      	str	r1, [r7, #24]
 8003006:	4629      	mov	r1, r5
 8003008:	eb63 0301 	sbc.w	r3, r3, r1
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800301a:	4659      	mov	r1, fp
 800301c:	018b      	lsls	r3, r1, #6
 800301e:	4651      	mov	r1, sl
 8003020:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003024:	4651      	mov	r1, sl
 8003026:	018a      	lsls	r2, r1, #6
 8003028:	4651      	mov	r1, sl
 800302a:	ebb2 0801 	subs.w	r8, r2, r1
 800302e:	4659      	mov	r1, fp
 8003030:	eb63 0901 	sbc.w	r9, r3, r1
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003040:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003044:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003048:	4690      	mov	r8, r2
 800304a:	4699      	mov	r9, r3
 800304c:	4623      	mov	r3, r4
 800304e:	eb18 0303 	adds.w	r3, r8, r3
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	462b      	mov	r3, r5
 8003056:	eb49 0303 	adc.w	r3, r9, r3
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003068:	4629      	mov	r1, r5
 800306a:	024b      	lsls	r3, r1, #9
 800306c:	4621      	mov	r1, r4
 800306e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003072:	4621      	mov	r1, r4
 8003074:	024a      	lsls	r2, r1, #9
 8003076:	4610      	mov	r0, r2
 8003078:	4619      	mov	r1, r3
 800307a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800307e:	2200      	movs	r2, #0
 8003080:	65bb      	str	r3, [r7, #88]	; 0x58
 8003082:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003084:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003088:	f7fd fce0 	bl	8000a4c <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003096:	e065      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x420>
 8003098:	40023800 	.word	0x40023800
 800309c:	00f42400 	.word	0x00f42400
 80030a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a4:	4b3d      	ldr	r3, [pc, #244]	; (800319c <HAL_RCC_GetSysClockFreq+0x458>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	2200      	movs	r2, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	4611      	mov	r1, r2
 80030b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030b4:	653b      	str	r3, [r7, #80]	; 0x50
 80030b6:	2300      	movs	r3, #0
 80030b8:	657b      	str	r3, [r7, #84]	; 0x54
 80030ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030be:	4642      	mov	r2, r8
 80030c0:	464b      	mov	r3, r9
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	0159      	lsls	r1, r3, #5
 80030cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d0:	0150      	lsls	r0, r2, #5
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4641      	mov	r1, r8
 80030d8:	1a51      	subs	r1, r2, r1
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	4649      	mov	r1, r9
 80030de:	eb63 0301 	sbc.w	r3, r3, r1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030f0:	4659      	mov	r1, fp
 80030f2:	018b      	lsls	r3, r1, #6
 80030f4:	4651      	mov	r1, sl
 80030f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030fa:	4651      	mov	r1, sl
 80030fc:	018a      	lsls	r2, r1, #6
 80030fe:	4651      	mov	r1, sl
 8003100:	1a54      	subs	r4, r2, r1
 8003102:	4659      	mov	r1, fp
 8003104:	eb63 0501 	sbc.w	r5, r3, r1
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	00eb      	lsls	r3, r5, #3
 8003112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003116:	00e2      	lsls	r2, r4, #3
 8003118:	4614      	mov	r4, r2
 800311a:	461d      	mov	r5, r3
 800311c:	4643      	mov	r3, r8
 800311e:	18e3      	adds	r3, r4, r3
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	464b      	mov	r3, r9
 8003124:	eb45 0303 	adc.w	r3, r5, r3
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003136:	4629      	mov	r1, r5
 8003138:	028b      	lsls	r3, r1, #10
 800313a:	4621      	mov	r1, r4
 800313c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003140:	4621      	mov	r1, r4
 8003142:	028a      	lsls	r2, r1, #10
 8003144:	4610      	mov	r0, r2
 8003146:	4619      	mov	r1, r3
 8003148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800314c:	2200      	movs	r2, #0
 800314e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003150:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003152:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003156:	f7fd fc79 	bl	8000a4c <__aeabi_uldivmod>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4613      	mov	r3, r2
 8003160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003164:	4b0d      	ldr	r3, [pc, #52]	; (800319c <HAL_RCC_GetSysClockFreq+0x458>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	0f1b      	lsrs	r3, r3, #28
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003182:	e003      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800318a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003190:	4618      	mov	r0, r3
 8003192:	37b8      	adds	r7, #184	; 0xb8
 8003194:	46bd      	mov	sp, r7
 8003196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	00f42400 	.word	0x00f42400

080031a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e28d      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8083 	beq.w	80032ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031c4:	4b94      	ldr	r3, [pc, #592]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d019      	beq.n	8003204 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031d0:	4b91      	ldr	r3, [pc, #580]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d106      	bne.n	80031ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031dc:	4b8e      	ldr	r3, [pc, #568]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e8:	d00c      	beq.n	8003204 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ea:	4b8b      	ldr	r3, [pc, #556]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d112      	bne.n	800321c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f6:	4b88      	ldr	r3, [pc, #544]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003202:	d10b      	bne.n	800321c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	4b84      	ldr	r3, [pc, #528]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d05b      	beq.n	80032c8 <HAL_RCC_OscConfig+0x124>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d157      	bne.n	80032c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e25a      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d106      	bne.n	8003234 <HAL_RCC_OscConfig+0x90>
 8003226:	4b7c      	ldr	r3, [pc, #496]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a7b      	ldr	r2, [pc, #492]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e01d      	b.n	8003270 <HAL_RCC_OscConfig+0xcc>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0xb4>
 800323e:	4b76      	ldr	r3, [pc, #472]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a75      	ldr	r2, [pc, #468]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b73      	ldr	r3, [pc, #460]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a72      	ldr	r2, [pc, #456]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0xcc>
 8003258:	4b6f      	ldr	r3, [pc, #444]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6e      	ldr	r2, [pc, #440]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800325e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b6c      	ldr	r3, [pc, #432]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a6b      	ldr	r2, [pc, #428]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800326a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d013      	beq.n	80032a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7ff f8b8 	bl	80023ec <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003280:	f7ff f8b4 	bl	80023ec <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e21f      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b61      	ldr	r3, [pc, #388]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0xdc>
 800329e:	e014      	b.n	80032ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7ff f8a4 	bl	80023ec <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a8:	f7ff f8a0 	bl	80023ec <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e20b      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ba:	4b57      	ldr	r3, [pc, #348]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x104>
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d06f      	beq.n	80033b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032d6:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d017      	beq.n	8003312 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032e2:	4b4d      	ldr	r3, [pc, #308]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d105      	bne.n	80032fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ee:	4b4a      	ldr	r3, [pc, #296]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d11c      	bne.n	8003340 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003306:	4b44      	ldr	r3, [pc, #272]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_RCC_OscConfig+0x186>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e1d3      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4937      	ldr	r1, [pc, #220]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	e03a      	b.n	80033b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d020      	beq.n	800338a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003348:	4b34      	ldr	r3, [pc, #208]	; (800341c <HAL_RCC_OscConfig+0x278>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7ff f84d 	bl	80023ec <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003356:	f7ff f849 	bl	80023ec <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e1b4      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003368:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003374:	4b28      	ldr	r3, [pc, #160]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4925      	ldr	r1, [pc, #148]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]
 8003388:	e015      	b.n	80033b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800338a:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCC_OscConfig+0x278>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7ff f82c 	bl	80023ec <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003398:	f7ff f828 	bl	80023ec <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e193      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033aa:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d036      	beq.n	8003430 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d016      	beq.n	80033f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7ff f80c 	bl	80023ec <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d8:	f7ff f808 	bl	80023ec <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e173      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 80033ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x234>
 80033f6:	e01b      	b.n	8003430 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fe fff5 	bl	80023ec <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	e00e      	b.n	8003424 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003406:	f7fe fff1 	bl	80023ec <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d907      	bls.n	8003424 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e15c      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
 8003418:	40023800 	.word	0x40023800
 800341c:	42470000 	.word	0x42470000
 8003420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	4b8a      	ldr	r3, [pc, #552]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1ea      	bne.n	8003406 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8097 	beq.w	800356c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003442:	4b83      	ldr	r3, [pc, #524]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	4b7f      	ldr	r3, [pc, #508]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	4a7e      	ldr	r2, [pc, #504]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345c:	6413      	str	r3, [r2, #64]	; 0x40
 800345e:	4b7c      	ldr	r3, [pc, #496]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346e:	4b79      	ldr	r3, [pc, #484]	; (8003654 <HAL_RCC_OscConfig+0x4b0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d118      	bne.n	80034ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800347a:	4b76      	ldr	r3, [pc, #472]	; (8003654 <HAL_RCC_OscConfig+0x4b0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a75      	ldr	r2, [pc, #468]	; (8003654 <HAL_RCC_OscConfig+0x4b0>)
 8003480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003486:	f7fe ffb1 	bl	80023ec <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348e:	f7fe ffad 	bl	80023ec <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e118      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	4b6c      	ldr	r3, [pc, #432]	; (8003654 <HAL_RCC_OscConfig+0x4b0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x31e>
 80034b4:	4b66      	ldr	r3, [pc, #408]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	4a65      	ldr	r2, [pc, #404]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6713      	str	r3, [r2, #112]	; 0x70
 80034c0:	e01c      	b.n	80034fc <HAL_RCC_OscConfig+0x358>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x340>
 80034ca:	4b61      	ldr	r3, [pc, #388]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	4a60      	ldr	r2, [pc, #384]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	6713      	str	r3, [r2, #112]	; 0x70
 80034d6:	4b5e      	ldr	r3, [pc, #376]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	4a5d      	ldr	r2, [pc, #372]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6713      	str	r3, [r2, #112]	; 0x70
 80034e2:	e00b      	b.n	80034fc <HAL_RCC_OscConfig+0x358>
 80034e4:	4b5a      	ldr	r3, [pc, #360]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a59      	ldr	r2, [pc, #356]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	4b57      	ldr	r3, [pc, #348]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	4a56      	ldr	r2, [pc, #344]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80034f6:	f023 0304 	bic.w	r3, r3, #4
 80034fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d015      	beq.n	8003530 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fe ff72 	bl	80023ec <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350a:	e00a      	b.n	8003522 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fe ff6e 	bl	80023ec <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e0d7      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003522:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0ee      	beq.n	800350c <HAL_RCC_OscConfig+0x368>
 800352e:	e014      	b.n	800355a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fe ff5c 	bl	80023ec <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fe ff58 	bl	80023ec <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0c1      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354e:	4b40      	ldr	r3, [pc, #256]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1ee      	bne.n	8003538 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d105      	bne.n	800356c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003560:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	4a3a      	ldr	r2, [pc, #232]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80ad 	beq.w	80036d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003576:	4b36      	ldr	r3, [pc, #216]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b08      	cmp	r3, #8
 8003580:	d060      	beq.n	8003644 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d145      	bne.n	8003616 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358a:	4b33      	ldr	r3, [pc, #204]	; (8003658 <HAL_RCC_OscConfig+0x4b4>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe ff2c 	bl	80023ec <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003598:	f7fe ff28 	bl	80023ec <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e093      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	4b29      	ldr	r3, [pc, #164]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69da      	ldr	r2, [r3, #28]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	3b01      	subs	r3, #1
 80035d0:	041b      	lsls	r3, r3, #16
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	061b      	lsls	r3, r3, #24
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	071b      	lsls	r3, r3, #28
 80035e2:	491b      	ldr	r1, [pc, #108]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e8:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <HAL_RCC_OscConfig+0x4b4>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fe fefd 	bl	80023ec <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fe fef9 	bl	80023ec <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e064      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003608:	4b11      	ldr	r3, [pc, #68]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x452>
 8003614:	e05c      	b.n	80036d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b10      	ldr	r3, [pc, #64]	; (8003658 <HAL_RCC_OscConfig+0x4b4>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fe fee6 	bl	80023ec <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe fee2 	bl	80023ec <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e04d      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x480>
 8003642:	e045      	b.n	80036d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e040      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
 8003650:	40023800 	.word	0x40023800
 8003654:	40007000 	.word	0x40007000
 8003658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800365c:	4b1f      	ldr	r3, [pc, #124]	; (80036dc <HAL_RCC_OscConfig+0x538>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d030      	beq.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d129      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d122      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003694:	4293      	cmp	r3, r2
 8003696:	d119      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	3b01      	subs	r3, #1
 80036a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d10f      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d107      	bne.n	80036cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800

080036e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e041      	b.n	8003776 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fe fc7a 	bl	8002000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f000 fe8e 	bl	8004440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d001      	beq.n	8003798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e04e      	b.n	8003836 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <HAL_TIM_Base_Start_IT+0xc4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d022      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c2:	d01d      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <HAL_TIM_Base_Start_IT+0xc8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d018      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1e      	ldr	r2, [pc, #120]	; (800384c <HAL_TIM_Base_Start_IT+0xcc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d013      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1c      	ldr	r2, [pc, #112]	; (8003850 <HAL_TIM_Base_Start_IT+0xd0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00e      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <HAL_TIM_Base_Start_IT+0xd4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d009      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a19      	ldr	r2, [pc, #100]	; (8003858 <HAL_TIM_Base_Start_IT+0xd8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a18      	ldr	r2, [pc, #96]	; (800385c <HAL_TIM_Base_Start_IT+0xdc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d111      	bne.n	8003824 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b06      	cmp	r3, #6
 8003810:	d010      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	e007      	b.n	8003834 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40010400 	.word	0x40010400
 8003858:	40014000 	.word	0x40014000
 800385c:	40001800 	.word	0x40001800

08003860 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e041      	b.n	80038f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f839 	bl	80038fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3304      	adds	r3, #4
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f000 fdce 	bl	8004440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_TIM_PWM_Start+0x24>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e022      	b.n	800397e <HAL_TIM_PWM_Start+0x6a>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b04      	cmp	r3, #4
 800393c:	d109      	bne.n	8003952 <HAL_TIM_PWM_Start+0x3e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b01      	cmp	r3, #1
 8003948:	bf14      	ite	ne
 800394a:	2301      	movne	r3, #1
 800394c:	2300      	moveq	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	e015      	b.n	800397e <HAL_TIM_PWM_Start+0x6a>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d109      	bne.n	800396c <HAL_TIM_PWM_Start+0x58>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e008      	b.n	800397e <HAL_TIM_PWM_Start+0x6a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	bf14      	ite	ne
 8003978:	2301      	movne	r3, #1
 800397a:	2300      	moveq	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e07c      	b.n	8003a80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <HAL_TIM_PWM_Start+0x82>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003994:	e013      	b.n	80039be <HAL_TIM_PWM_Start+0xaa>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b04      	cmp	r3, #4
 800399a:	d104      	bne.n	80039a6 <HAL_TIM_PWM_Start+0x92>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039a4:	e00b      	b.n	80039be <HAL_TIM_PWM_Start+0xaa>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d104      	bne.n	80039b6 <HAL_TIM_PWM_Start+0xa2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b4:	e003      	b.n	80039be <HAL_TIM_PWM_Start+0xaa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2201      	movs	r2, #1
 80039c4:	6839      	ldr	r1, [r7, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 f94e 	bl	8004c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2d      	ldr	r2, [pc, #180]	; (8003a88 <HAL_TIM_PWM_Start+0x174>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_TIM_PWM_Start+0xcc>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2c      	ldr	r2, [pc, #176]	; (8003a8c <HAL_TIM_PWM_Start+0x178>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_PWM_Start+0xd0>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_TIM_PWM_Start+0xd2>
 80039e4:	2300      	movs	r3, #0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <HAL_TIM_PWM_Start+0x174>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d022      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0c:	d01d      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <HAL_TIM_PWM_Start+0x17c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d018      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <HAL_TIM_PWM_Start+0x180>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <HAL_TIM_PWM_Start+0x184>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00e      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a16      	ldr	r2, [pc, #88]	; (8003a8c <HAL_TIM_PWM_Start+0x178>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d009      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_TIM_PWM_Start+0x188>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <HAL_TIM_PWM_Start+0x18c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d111      	bne.n	8003a6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b06      	cmp	r3, #6
 8003a5a:	d010      	beq.n	8003a7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6c:	e007      	b.n	8003a7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40010400 	.word	0x40010400
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40001800 	.word	0x40001800

08003aa4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e041      	b.n	8003b3a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f839 	bl	8003b42 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f000 fcac 	bl	8004440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_IC_Start_IT+0x1e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	e013      	b.n	8003b9e <HAL_TIM_IC_Start_IT+0x46>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d104      	bne.n	8003b86 <HAL_TIM_IC_Start_IT+0x2e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	e00b      	b.n	8003b9e <HAL_TIM_IC_Start_IT+0x46>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d104      	bne.n	8003b96 <HAL_TIM_IC_Start_IT+0x3e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	e003      	b.n	8003b9e <HAL_TIM_IC_Start_IT+0x46>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d104      	bne.n	8003bb0 <HAL_TIM_IC_Start_IT+0x58>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e013      	b.n	8003bd8 <HAL_TIM_IC_Start_IT+0x80>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d104      	bne.n	8003bc0 <HAL_TIM_IC_Start_IT+0x68>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	e00b      	b.n	8003bd8 <HAL_TIM_IC_Start_IT+0x80>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d104      	bne.n	8003bd0 <HAL_TIM_IC_Start_IT+0x78>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e003      	b.n	8003bd8 <HAL_TIM_IC_Start_IT+0x80>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bda:	7bbb      	ldrb	r3, [r7, #14]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d102      	bne.n	8003be6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003be0:	7b7b      	ldrb	r3, [r7, #13]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d001      	beq.n	8003bea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0cc      	b.n	8003d84 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d104      	bne.n	8003bfa <HAL_TIM_IC_Start_IT+0xa2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf8:	e013      	b.n	8003c22 <HAL_TIM_IC_Start_IT+0xca>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_IC_Start_IT+0xb2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c08:	e00b      	b.n	8003c22 <HAL_TIM_IC_Start_IT+0xca>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_IC_Start_IT+0xc2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c18:	e003      	b.n	8003c22 <HAL_TIM_IC_Start_IT+0xca>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d104      	bne.n	8003c32 <HAL_TIM_IC_Start_IT+0xda>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c30:	e013      	b.n	8003c5a <HAL_TIM_IC_Start_IT+0x102>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_IC_Start_IT+0xea>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c40:	e00b      	b.n	8003c5a <HAL_TIM_IC_Start_IT+0x102>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_IC_Start_IT+0xfa>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c50:	e003      	b.n	8003c5a <HAL_TIM_IC_Start_IT+0x102>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b0c      	cmp	r3, #12
 8003c5e:	d841      	bhi.n	8003ce4 <HAL_TIM_IC_Start_IT+0x18c>
 8003c60:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <HAL_TIM_IC_Start_IT+0x110>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003ce5 	.word	0x08003ce5
 8003c70:	08003ce5 	.word	0x08003ce5
 8003c74:	08003ce5 	.word	0x08003ce5
 8003c78:	08003caf 	.word	0x08003caf
 8003c7c:	08003ce5 	.word	0x08003ce5
 8003c80:	08003ce5 	.word	0x08003ce5
 8003c84:	08003ce5 	.word	0x08003ce5
 8003c88:	08003cc1 	.word	0x08003cc1
 8003c8c:	08003ce5 	.word	0x08003ce5
 8003c90:	08003ce5 	.word	0x08003ce5
 8003c94:	08003ce5 	.word	0x08003ce5
 8003c98:	08003cd3 	.word	0x08003cd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0202 	orr.w	r2, r2, #2
 8003caa:	60da      	str	r2, [r3, #12]
      break;
 8003cac:	e01d      	b.n	8003cea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0204 	orr.w	r2, r2, #4
 8003cbc:	60da      	str	r2, [r3, #12]
      break;
 8003cbe:	e014      	b.n	8003cea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0208 	orr.w	r2, r2, #8
 8003cce:	60da      	str	r2, [r3, #12]
      break;
 8003cd0:	e00b      	b.n	8003cea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0210 	orr.w	r2, r2, #16
 8003ce0:	60da      	str	r2, [r3, #12]
      break;
 8003ce2:	e002      	b.n	8003cea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d148      	bne.n	8003d82 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	6839      	ldr	r1, [r7, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 ffb5 	bl	8004c68 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a22      	ldr	r2, [pc, #136]	; (8003d8c <HAL_TIM_IC_Start_IT+0x234>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d022      	beq.n	8003d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d10:	d01d      	beq.n	8003d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <HAL_TIM_IC_Start_IT+0x238>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d018      	beq.n	8003d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <HAL_TIM_IC_Start_IT+0x23c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <HAL_TIM_IC_Start_IT+0x240>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00e      	beq.n	8003d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <HAL_TIM_IC_Start_IT+0x244>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d009      	beq.n	8003d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <HAL_TIM_IC_Start_IT+0x248>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_TIM_IC_Start_IT+0x1f6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a16      	ldr	r2, [pc, #88]	; (8003da4 <HAL_TIM_IC_Start_IT+0x24c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d111      	bne.n	8003d72 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d010      	beq.n	8003d82 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d70:	e007      	b.n	8003d82 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0201 	orr.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40010000 	.word	0x40010000
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40000800 	.word	0x40000800
 8003d98:	40000c00 	.word	0x40000c00
 8003d9c:	40010400 	.word	0x40010400
 8003da0:	40014000 	.word	0x40014000
 8003da4:	40001800 	.word	0x40001800

08003da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d122      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d11b      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0202 	mvn.w	r2, #2
 8003dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fd f940 	bl	8001070 <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fb05 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fb0c 	bl	8004416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d122      	bne.n	8003e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d11b      	bne.n	8003e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0204 	mvn.w	r2, #4
 8003e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fd f916 	bl	8001070 <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fadb 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fae2 	bl	8004416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d122      	bne.n	8003eac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d11b      	bne.n	8003eac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0208 	mvn.w	r2, #8
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2204      	movs	r2, #4
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd f8ec 	bl	8001070 <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fab1 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fab8 	bl	8004416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b10      	cmp	r3, #16
 8003eb8:	d122      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d11b      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0210 	mvn.w	r2, #16
 8003ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fd f8c2 	bl	8001070 <HAL_TIM_IC_CaptureCallback>
 8003eec:	e005      	b.n	8003efa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa87 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fa8e 	bl	8004416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d10e      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d107      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0201 	mvn.w	r2, #1
 8003f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fd fe6c 	bl	8001c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d10e      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f44:	2b80      	cmp	r3, #128	; 0x80
 8003f46:	d107      	bne.n	8003f58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 ff34 	bl	8004dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d10e      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	d107      	bne.n	8003f84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa53 	bl	800442a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d10e      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d107      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0220 	mvn.w	r2, #32
 8003fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fefe 	bl	8004dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e088      	b.n	80040e8 <HAL_TIM_IC_ConfigChannel+0x130>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d11b      	bne.n	800401c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	6819      	ldr	r1, [r3, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f000 fc74 	bl	80048e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 020c 	bic.w	r2, r2, #12
 8004006:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6999      	ldr	r1, [r3, #24]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	619a      	str	r2, [r3, #24]
 800401a:	e060      	b.n	80040de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b04      	cmp	r3, #4
 8004020:	d11c      	bne.n	800405c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	6819      	ldr	r1, [r3, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f000 fcf8 	bl	8004a26 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699a      	ldr	r2, [r3, #24]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004044:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6999      	ldr	r1, [r3, #24]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	021a      	lsls	r2, r3, #8
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	619a      	str	r2, [r3, #24]
 800405a:	e040      	b.n	80040de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b08      	cmp	r3, #8
 8004060:	d11b      	bne.n	800409a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6819      	ldr	r1, [r3, #0]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f000 fd45 	bl	8004b00 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 020c 	bic.w	r2, r2, #12
 8004084:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69d9      	ldr	r1, [r3, #28]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	61da      	str	r2, [r3, #28]
 8004098:	e021      	b.n	80040de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b0c      	cmp	r3, #12
 800409e:	d11c      	bne.n	80040da <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6819      	ldr	r1, [r3, #0]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f000 fd62 	bl	8004b78 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040c2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69d9      	ldr	r1, [r3, #28]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	021a      	lsls	r2, r3, #8
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	61da      	str	r2, [r3, #28]
 80040d8:	e001      	b.n	80040de <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800410a:	2302      	movs	r3, #2
 800410c:	e0ae      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b0c      	cmp	r3, #12
 800411a:	f200 809f 	bhi.w	800425c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800411e:	a201      	add	r2, pc, #4	; (adr r2, 8004124 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004124:	08004159 	.word	0x08004159
 8004128:	0800425d 	.word	0x0800425d
 800412c:	0800425d 	.word	0x0800425d
 8004130:	0800425d 	.word	0x0800425d
 8004134:	08004199 	.word	0x08004199
 8004138:	0800425d 	.word	0x0800425d
 800413c:	0800425d 	.word	0x0800425d
 8004140:	0800425d 	.word	0x0800425d
 8004144:	080041db 	.word	0x080041db
 8004148:	0800425d 	.word	0x0800425d
 800414c:	0800425d 	.word	0x0800425d
 8004150:	0800425d 	.word	0x0800425d
 8004154:	0800421b 	.word	0x0800421b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fa0e 	bl	8004580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0208 	orr.w	r2, r2, #8
 8004172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0204 	bic.w	r2, r2, #4
 8004182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6999      	ldr	r1, [r3, #24]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	619a      	str	r2, [r3, #24]
      break;
 8004196:	e064      	b.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fa5e 	bl	8004660 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	021a      	lsls	r2, r3, #8
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	619a      	str	r2, [r3, #24]
      break;
 80041d8:	e043      	b.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fab3 	bl	800474c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0208 	orr.w	r2, r2, #8
 80041f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0204 	bic.w	r2, r2, #4
 8004204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69d9      	ldr	r1, [r3, #28]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	61da      	str	r2, [r3, #28]
      break;
 8004218:	e023      	b.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fb07 	bl	8004834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69d9      	ldr	r1, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	021a      	lsls	r2, r3, #8
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	61da      	str	r2, [r3, #28]
      break;
 800425a:	e002      	b.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	75fb      	strb	r3, [r7, #23]
      break;
 8004260:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800426a:	7dfb      	ldrb	r3, [r7, #23]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_TIM_ConfigClockSource+0x1c>
 800428c:	2302      	movs	r3, #2
 800428e:	e0b4      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x186>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c8:	d03e      	beq.n	8004348 <HAL_TIM_ConfigClockSource+0xd4>
 80042ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ce:	f200 8087 	bhi.w	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d6:	f000 8086 	beq.w	80043e6 <HAL_TIM_ConfigClockSource+0x172>
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042de:	d87f      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 80042e0:	2b70      	cmp	r3, #112	; 0x70
 80042e2:	d01a      	beq.n	800431a <HAL_TIM_ConfigClockSource+0xa6>
 80042e4:	2b70      	cmp	r3, #112	; 0x70
 80042e6:	d87b      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 80042e8:	2b60      	cmp	r3, #96	; 0x60
 80042ea:	d050      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x11a>
 80042ec:	2b60      	cmp	r3, #96	; 0x60
 80042ee:	d877      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 80042f0:	2b50      	cmp	r3, #80	; 0x50
 80042f2:	d03c      	beq.n	800436e <HAL_TIM_ConfigClockSource+0xfa>
 80042f4:	2b50      	cmp	r3, #80	; 0x50
 80042f6:	d873      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 80042f8:	2b40      	cmp	r3, #64	; 0x40
 80042fa:	d058      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x13a>
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	d86f      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004300:	2b30      	cmp	r3, #48	; 0x30
 8004302:	d064      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x15a>
 8004304:	2b30      	cmp	r3, #48	; 0x30
 8004306:	d86b      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004308:	2b20      	cmp	r3, #32
 800430a:	d060      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x15a>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d867      	bhi.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05c      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x15a>
 8004314:	2b10      	cmp	r3, #16
 8004316:	d05a      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x15a>
 8004318:	e062      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6899      	ldr	r1, [r3, #8]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f000 fc7d 	bl	8004c28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800433c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	609a      	str	r2, [r3, #8]
      break;
 8004346:	e04f      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6899      	ldr	r1, [r3, #8]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f000 fc66 	bl	8004c28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436a:	609a      	str	r2, [r3, #8]
      break;
 800436c:	e03c      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6859      	ldr	r1, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	461a      	mov	r2, r3
 800437c:	f000 fb24 	bl	80049c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2150      	movs	r1, #80	; 0x50
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fc33 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 800438c:	e02c      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	461a      	mov	r2, r3
 800439c:	f000 fb80 	bl	8004aa0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2160      	movs	r1, #96	; 0x60
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fc23 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 80043ac:	e01c      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 fb04 	bl	80049c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2140      	movs	r1, #64	; 0x40
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fc13 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 80043cc:	e00c      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f000 fc0a 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 80043de:	e003      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
      break;
 80043e4:	e000      	b.n	80043e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a40      	ldr	r2, [pc, #256]	; (8004554 <TIM_Base_SetConfig+0x114>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d00f      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a3d      	ldr	r2, [pc, #244]	; (8004558 <TIM_Base_SetConfig+0x118>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00b      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a3c      	ldr	r2, [pc, #240]	; (800455c <TIM_Base_SetConfig+0x11c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d007      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a3b      	ldr	r2, [pc, #236]	; (8004560 <TIM_Base_SetConfig+0x120>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_Base_SetConfig+0x40>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a3a      	ldr	r2, [pc, #232]	; (8004564 <TIM_Base_SetConfig+0x124>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d108      	bne.n	8004492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a2f      	ldr	r2, [pc, #188]	; (8004554 <TIM_Base_SetConfig+0x114>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d02b      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a0:	d027      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a2c      	ldr	r2, [pc, #176]	; (8004558 <TIM_Base_SetConfig+0x118>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d023      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a2b      	ldr	r2, [pc, #172]	; (800455c <TIM_Base_SetConfig+0x11c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01f      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a2a      	ldr	r2, [pc, #168]	; (8004560 <TIM_Base_SetConfig+0x120>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01b      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a29      	ldr	r2, [pc, #164]	; (8004564 <TIM_Base_SetConfig+0x124>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d017      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a28      	ldr	r2, [pc, #160]	; (8004568 <TIM_Base_SetConfig+0x128>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a27      	ldr	r2, [pc, #156]	; (800456c <TIM_Base_SetConfig+0x12c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00f      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a26      	ldr	r2, [pc, #152]	; (8004570 <TIM_Base_SetConfig+0x130>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00b      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a25      	ldr	r2, [pc, #148]	; (8004574 <TIM_Base_SetConfig+0x134>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d007      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a24      	ldr	r2, [pc, #144]	; (8004578 <TIM_Base_SetConfig+0x138>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d003      	beq.n	80044f2 <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a23      	ldr	r2, [pc, #140]	; (800457c <TIM_Base_SetConfig+0x13c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d108      	bne.n	8004504 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a0a      	ldr	r2, [pc, #40]	; (8004554 <TIM_Base_SetConfig+0x114>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_Base_SetConfig+0xf8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a0c      	ldr	r2, [pc, #48]	; (8004564 <TIM_Base_SetConfig+0x124>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d103      	bne.n	8004540 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	615a      	str	r2, [r3, #20]
}
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40010000 	.word	0x40010000
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40010400 	.word	0x40010400
 8004568:	40014000 	.word	0x40014000
 800456c:	40014400 	.word	0x40014400
 8004570:	40014800 	.word	0x40014800
 8004574:	40001800 	.word	0x40001800
 8004578:	40001c00 	.word	0x40001c00
 800457c:	40002000 	.word	0x40002000

08004580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0201 	bic.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 0302 	bic.w	r3, r3, #2
 80045c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a20      	ldr	r2, [pc, #128]	; (8004658 <TIM_OC1_SetConfig+0xd8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d003      	beq.n	80045e4 <TIM_OC1_SetConfig+0x64>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a1f      	ldr	r2, [pc, #124]	; (800465c <TIM_OC1_SetConfig+0xdc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d10c      	bne.n	80045fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f023 0308 	bic.w	r3, r3, #8
 80045ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f023 0304 	bic.w	r3, r3, #4
 80045fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a15      	ldr	r2, [pc, #84]	; (8004658 <TIM_OC1_SetConfig+0xd8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d003      	beq.n	800460e <TIM_OC1_SetConfig+0x8e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a14      	ldr	r2, [pc, #80]	; (800465c <TIM_OC1_SetConfig+0xdc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d111      	bne.n	8004632 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800461c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	621a      	str	r2, [r3, #32]
}
 800464c:	bf00      	nop
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	40010000 	.word	0x40010000
 800465c:	40010400 	.word	0x40010400

08004660 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	f023 0210 	bic.w	r2, r3, #16
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0320 	bic.w	r3, r3, #32
 80046aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a22      	ldr	r2, [pc, #136]	; (8004744 <TIM_OC2_SetConfig+0xe4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_OC2_SetConfig+0x68>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a21      	ldr	r2, [pc, #132]	; (8004748 <TIM_OC2_SetConfig+0xe8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d10d      	bne.n	80046e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a17      	ldr	r2, [pc, #92]	; (8004744 <TIM_OC2_SetConfig+0xe4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_OC2_SetConfig+0x94>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a16      	ldr	r2, [pc, #88]	; (8004748 <TIM_OC2_SetConfig+0xe8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d113      	bne.n	800471c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004702:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40010000 	.word	0x40010000
 8004748:	40010400 	.word	0x40010400

0800474c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a21      	ldr	r2, [pc, #132]	; (800482c <TIM_OC3_SetConfig+0xe0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_OC3_SetConfig+0x66>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a20      	ldr	r2, [pc, #128]	; (8004830 <TIM_OC3_SetConfig+0xe4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10d      	bne.n	80047ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a16      	ldr	r2, [pc, #88]	; (800482c <TIM_OC3_SetConfig+0xe0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d003      	beq.n	80047de <TIM_OC3_SetConfig+0x92>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a15      	ldr	r2, [pc, #84]	; (8004830 <TIM_OC3_SetConfig+0xe4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d113      	bne.n	8004806 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	621a      	str	r2, [r3, #32]
}
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	40010000 	.word	0x40010000
 8004830:	40010400 	.word	0x40010400

08004834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800487e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <TIM_OC4_SetConfig+0xa4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_OC4_SetConfig+0x68>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a11      	ldr	r2, [pc, #68]	; (80048dc <TIM_OC4_SetConfig+0xa8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d109      	bne.n	80048b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	019b      	lsls	r3, r3, #6
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	621a      	str	r2, [r3, #32]
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40010400 	.word	0x40010400

080048e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	f023 0201 	bic.w	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a28      	ldr	r2, [pc, #160]	; (80049ac <TIM_TI1_SetConfig+0xcc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01b      	beq.n	8004946 <TIM_TI1_SetConfig+0x66>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004914:	d017      	beq.n	8004946 <TIM_TI1_SetConfig+0x66>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a25      	ldr	r2, [pc, #148]	; (80049b0 <TIM_TI1_SetConfig+0xd0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <TIM_TI1_SetConfig+0x66>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4a24      	ldr	r2, [pc, #144]	; (80049b4 <TIM_TI1_SetConfig+0xd4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00f      	beq.n	8004946 <TIM_TI1_SetConfig+0x66>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a23      	ldr	r2, [pc, #140]	; (80049b8 <TIM_TI1_SetConfig+0xd8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00b      	beq.n	8004946 <TIM_TI1_SetConfig+0x66>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a22      	ldr	r2, [pc, #136]	; (80049bc <TIM_TI1_SetConfig+0xdc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <TIM_TI1_SetConfig+0x66>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a21      	ldr	r2, [pc, #132]	; (80049c0 <TIM_TI1_SetConfig+0xe0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_TI1_SetConfig+0x66>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a20      	ldr	r2, [pc, #128]	; (80049c4 <TIM_TI1_SetConfig+0xe4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d101      	bne.n	800494a <TIM_TI1_SetConfig+0x6a>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <TIM_TI1_SetConfig+0x6c>
 800494a:	2300      	movs	r3, #0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	e003      	b.n	800496a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	b2db      	uxtb	r3, r3
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f023 030a 	bic.w	r3, r3, #10
 8004984:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f003 030a 	and.w	r3, r3, #10
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	40010400 	.word	0x40010400
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40001800 	.word	0x40001800

080049c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 0201 	bic.w	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 030a 	bic.w	r3, r3, #10
 8004a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	621a      	str	r2, [r3, #32]
}
 8004a1a:	bf00      	nop
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b087      	sub	sp, #28
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
 8004a32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f023 0210 	bic.w	r2, r3, #16
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	031b      	lsls	r3, r3, #12
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	621a      	str	r2, [r3, #32]
}
 8004a94:	bf00      	nop
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	f023 0210 	bic.w	r2, r3, #16
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	031b      	lsls	r3, r3, #12
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004adc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	621a      	str	r2, [r3, #32]
}
 8004af4:	bf00      	nop
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f023 0303 	bic.w	r3, r3, #3
 8004b2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004b50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	621a      	str	r2, [r3, #32]
}
 8004b6c:	bf00      	nop
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	031b      	lsls	r3, r3, #12
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004bca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	031b      	lsls	r3, r3, #12
 8004bd0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f043 0307 	orr.w	r3, r3, #7
 8004c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	021a      	lsls	r2, r3, #8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	609a      	str	r2, [r3, #8]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1a      	ldr	r2, [r3, #32]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a1a      	ldr	r2, [r3, #32]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e05a      	b.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a21      	ldr	r2, [pc, #132]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d022      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d18:	d01d      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d018      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1b      	ldr	r2, [pc, #108]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1a      	ldr	r2, [pc, #104]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00e      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a18      	ldr	r2, [pc, #96]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a17      	ldr	r2, [pc, #92]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a15      	ldr	r2, [pc, #84]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d10c      	bne.n	8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40010000 	.word	0x40010000
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	40000c00 	.word	0x40000c00
 8004da0:	40010400 	.word	0x40010400
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40001800 	.word	0x40001800

08004dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e03f      	b.n	8004e66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fd fa12 	bl	8002224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2224      	movs	r2, #36	; 0x24
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fcdf 	bl	80057dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695a      	ldr	r2, [r3, #20]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d11d      	bne.n	8004ec4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_UART_Receive_IT+0x26>
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e016      	b.n	8004ec6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Receive_IT+0x38>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e00f      	b.n	8004ec6 <HAL_UART_Receive_IT+0x58>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004eb4:	88fb      	ldrh	r3, [r7, #6]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fab6 	bl	800542c <UART_Start_Receive_IT>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	e000      	b.n	8004ec6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ec4:	2302      	movs	r3, #2
  }
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b0ba      	sub	sp, #232	; 0xe8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d009      	beq.n	8004f36 <HAL_UART_IRQHandler+0x66>
 8004f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fb99 	bl	8005666 <UART_Receive_IT>
      return;
 8004f34:	e256      	b.n	80053e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80de 	beq.w	80050fc <HAL_UART_IRQHandler+0x22c>
 8004f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80d1 	beq.w	80050fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00b      	beq.n	8004f7e <HAL_UART_IRQHandler+0xae>
 8004f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f043 0201 	orr.w	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00b      	beq.n	8004fa2 <HAL_UART_IRQHandler+0xd2>
 8004f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f043 0202 	orr.w	r2, r3, #2
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <HAL_UART_IRQHandler+0xf6>
 8004fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d005      	beq.n	8004fc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f043 0204 	orr.w	r2, r3, #4
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d011      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x126>
 8004fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d105      	bne.n	8004fea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f043 0208 	orr.w	r2, r3, #8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 81ed 	beq.w	80053da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_UART_IRQHandler+0x14e>
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fb24 	bl	8005666 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	bf0c      	ite	eq
 800502c:	2301      	moveq	r3, #1
 800502e:	2300      	movne	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <HAL_UART_IRQHandler+0x17a>
 8005042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005046:	2b00      	cmp	r3, #0
 8005048:	d04f      	beq.n	80050ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa2c 	bl	80054a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d141      	bne.n	80050e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3314      	adds	r3, #20
 8005064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3314      	adds	r3, #20
 8005086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800508a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800508e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1d9      	bne.n	800505e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d013      	beq.n	80050da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	4a7d      	ldr	r2, [pc, #500]	; (80052ac <HAL_UART_IRQHandler+0x3dc>)
 80050b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fd faf2 	bl	80026a8 <HAL_DMA_Abort_IT>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d016      	beq.n	80050f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050d4:	4610      	mov	r0, r2
 80050d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	e00e      	b.n	80050f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f990 	bl	8005400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	e00a      	b.n	80050f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f98c 	bl	8005400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	e006      	b.n	80050f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f988 	bl	8005400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80050f6:	e170      	b.n	80053da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	bf00      	nop
    return;
 80050fa:	e16e      	b.n	80053da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	2b01      	cmp	r3, #1
 8005102:	f040 814a 	bne.w	800539a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 8143 	beq.w	800539a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 813c 	beq.w	800539a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005122:	2300      	movs	r3, #0
 8005124:	60bb      	str	r3, [r7, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60bb      	str	r3, [r7, #8]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	f040 80b4 	bne.w	80052b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005154:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 8140 	beq.w	80053de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005166:	429a      	cmp	r2, r3
 8005168:	f080 8139 	bcs.w	80053de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005172:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800517e:	f000 8088 	beq.w	8005292 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800519c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1d9      	bne.n	8005182 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3314      	adds	r3, #20
 80051d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051e0:	f023 0301 	bic.w	r3, r3, #1
 80051e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3314      	adds	r3, #20
 80051ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e1      	bne.n	80051ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3314      	adds	r3, #20
 8005210:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800521a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800521c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3314      	adds	r3, #20
 800522a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800522e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005230:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005234:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800523c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e3      	bne.n	800520a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005262:	f023 0310 	bic.w	r3, r3, #16
 8005266:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005274:	65ba      	str	r2, [r7, #88]	; 0x58
 8005276:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800527a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e3      	bne.n	8005250 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	4618      	mov	r0, r3
 800528e:	f7fd f99b 	bl	80025c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800529a:	b29b      	uxth	r3, r3
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	b29b      	uxth	r3, r3
 80052a0:	4619      	mov	r1, r3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f8b6 	bl	8005414 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052a8:	e099      	b.n	80053de <HAL_UART_IRQHandler+0x50e>
 80052aa:	bf00      	nop
 80052ac:	0800556f 	.word	0x0800556f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 808b 	beq.w	80053e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80052cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8086 	beq.w	80053e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	330c      	adds	r3, #12
 80052dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80052fa:	647a      	str	r2, [r7, #68]	; 0x44
 80052fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005300:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e3      	bne.n	80052d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3314      	adds	r3, #20
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	623b      	str	r3, [r7, #32]
   return(result);
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	f023 0301 	bic.w	r3, r3, #1
 8005324:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3314      	adds	r3, #20
 800532e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005332:	633a      	str	r2, [r7, #48]	; 0x30
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e3      	bne.n	800530e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	330c      	adds	r3, #12
 800535a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	60fb      	str	r3, [r7, #12]
   return(result);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0310 	bic.w	r3, r3, #16
 800536a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	330c      	adds	r3, #12
 8005374:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005378:	61fa      	str	r2, [r7, #28]
 800537a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	69b9      	ldr	r1, [r7, #24]
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	617b      	str	r3, [r7, #20]
   return(result);
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e3      	bne.n	8005354 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800538c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f83e 	bl	8005414 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005398:	e023      	b.n	80053e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800539a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <HAL_UART_IRQHandler+0x4ea>
 80053a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f8ef 	bl	8005596 <UART_Transmit_IT>
    return;
 80053b8:	e014      	b.n	80053e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00e      	beq.n	80053e4 <HAL_UART_IRQHandler+0x514>
 80053c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f92f 	bl	8005636 <UART_EndTransmit_IT>
    return;
 80053d8:	e004      	b.n	80053e4 <HAL_UART_IRQHandler+0x514>
    return;
 80053da:	bf00      	nop
 80053dc:	e002      	b.n	80053e4 <HAL_UART_IRQHandler+0x514>
      return;
 80053de:	bf00      	nop
 80053e0:	e000      	b.n	80053e4 <HAL_UART_IRQHandler+0x514>
      return;
 80053e2:	bf00      	nop
  }
}
 80053e4:	37e8      	adds	r7, #232	; 0xe8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop

080053ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	88fa      	ldrh	r2, [r7, #6]
 8005444:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	88fa      	ldrh	r2, [r7, #6]
 800544a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2222      	movs	r2, #34	; 0x22
 8005456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005478:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0201 	orr.w	r2, r2, #1
 8005488:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0220 	orr.w	r2, r2, #32
 8005498:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b095      	sub	sp, #84	; 0x54
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	330c      	adds	r3, #12
 80054ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054d0:	643a      	str	r2, [r7, #64]	; 0x40
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e5      	bne.n	80054b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3314      	adds	r3, #20
 80054ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f023 0301 	bic.w	r3, r3, #1
 80054fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3314      	adds	r3, #20
 8005502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005504:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800550a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e5      	bne.n	80054e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	2b01      	cmp	r3, #1
 800551e:	d119      	bne.n	8005554 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	330c      	adds	r3, #12
 8005526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f023 0310 	bic.w	r3, r3, #16
 8005536:	647b      	str	r3, [r7, #68]	; 0x44
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005540:	61ba      	str	r2, [r7, #24]
 8005542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	6979      	ldr	r1, [r7, #20]
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	613b      	str	r3, [r7, #16]
   return(result);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e5      	bne.n	8005520 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005562:	bf00      	nop
 8005564:	3754      	adds	r7, #84	; 0x54
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff ff39 	bl	8005400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800558e:	bf00      	nop
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b21      	cmp	r3, #33	; 0x21
 80055a8:	d13e      	bne.n	8005628 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b2:	d114      	bne.n	80055de <UART_Transmit_IT+0x48>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d110      	bne.n	80055de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	1c9a      	adds	r2, r3, #2
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	621a      	str	r2, [r3, #32]
 80055dc:	e008      	b.n	80055f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	1c59      	adds	r1, r3, #1
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6211      	str	r1, [r2, #32]
 80055e8:	781a      	ldrb	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	4619      	mov	r1, r3
 80055fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10f      	bne.n	8005624 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005612:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005622:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	e000      	b.n	800562a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005628:	2302      	movs	r3, #2
  }
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800564c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff fec8 	bl	80053ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b08c      	sub	sp, #48	; 0x30
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b22      	cmp	r3, #34	; 0x22
 8005678:	f040 80ab 	bne.w	80057d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005684:	d117      	bne.n	80056b6 <UART_Receive_IT+0x50>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d113      	bne.n	80056b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800568e:	2300      	movs	r3, #0
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	1c9a      	adds	r2, r3, #2
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28
 80056b4:	e026      	b.n	8005704 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c8:	d007      	beq.n	80056da <UART_Receive_IT+0x74>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <UART_Receive_IT+0x82>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e008      	b.n	80056fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29b      	uxth	r3, r3
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4619      	mov	r1, r3
 8005712:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005714:	2b00      	cmp	r3, #0
 8005716:	d15a      	bne.n	80057ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0220 	bic.w	r2, r2, #32
 8005726:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695a      	ldr	r2, [r3, #20]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0201 	bic.w	r2, r2, #1
 8005746:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	2b01      	cmp	r3, #1
 8005756:	d135      	bne.n	80057c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	330c      	adds	r3, #12
 8005764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	613b      	str	r3, [r7, #16]
   return(result);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f023 0310 	bic.w	r3, r3, #16
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577e:	623a      	str	r2, [r7, #32]
 8005780:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	69f9      	ldr	r1, [r7, #28]
 8005784:	6a3a      	ldr	r2, [r7, #32]
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	61bb      	str	r3, [r7, #24]
   return(result);
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e5      	bne.n	800575e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b10      	cmp	r3, #16
 800579e:	d10a      	bne.n	80057b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff fe29 	bl	8005414 <HAL_UARTEx_RxEventCallback>
 80057c2:	e002      	b.n	80057ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7fc f9eb 	bl	8001ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e002      	b.n	80057d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	e000      	b.n	80057d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80057d2:	2302      	movs	r3, #2
  }
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3730      	adds	r7, #48	; 0x30
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e0:	b0c0      	sub	sp, #256	; 0x100
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	68d9      	ldr	r1, [r3, #12]
 80057fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	ea40 0301 	orr.w	r3, r0, r1
 8005804:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	431a      	orrs	r2, r3
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	431a      	orrs	r2, r3
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005834:	f021 010c 	bic.w	r1, r1, #12
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005842:	430b      	orrs	r3, r1
 8005844:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005856:	6999      	ldr	r1, [r3, #24]
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	ea40 0301 	orr.w	r3, r0, r1
 8005862:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4b8f      	ldr	r3, [pc, #572]	; (8005aa8 <UART_SetConfig+0x2cc>)
 800586c:	429a      	cmp	r2, r3
 800586e:	d005      	beq.n	800587c <UART_SetConfig+0xa0>
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b8d      	ldr	r3, [pc, #564]	; (8005aac <UART_SetConfig+0x2d0>)
 8005878:	429a      	cmp	r2, r3
 800587a:	d104      	bne.n	8005886 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800587c:	f7fd fa1c 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 8005880:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005884:	e003      	b.n	800588e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005886:	f7fd fa03 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 800588a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800588e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005898:	f040 810c 	bne.w	8005ab4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800589c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058ae:	4622      	mov	r2, r4
 80058b0:	462b      	mov	r3, r5
 80058b2:	1891      	adds	r1, r2, r2
 80058b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80058b6:	415b      	adcs	r3, r3
 80058b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058be:	4621      	mov	r1, r4
 80058c0:	eb12 0801 	adds.w	r8, r2, r1
 80058c4:	4629      	mov	r1, r5
 80058c6:	eb43 0901 	adc.w	r9, r3, r1
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058de:	4690      	mov	r8, r2
 80058e0:	4699      	mov	r9, r3
 80058e2:	4623      	mov	r3, r4
 80058e4:	eb18 0303 	adds.w	r3, r8, r3
 80058e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058ec:	462b      	mov	r3, r5
 80058ee:	eb49 0303 	adc.w	r3, r9, r3
 80058f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005902:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005906:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800590a:	460b      	mov	r3, r1
 800590c:	18db      	adds	r3, r3, r3
 800590e:	653b      	str	r3, [r7, #80]	; 0x50
 8005910:	4613      	mov	r3, r2
 8005912:	eb42 0303 	adc.w	r3, r2, r3
 8005916:	657b      	str	r3, [r7, #84]	; 0x54
 8005918:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800591c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005920:	f7fb f894 	bl	8000a4c <__aeabi_uldivmod>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4b61      	ldr	r3, [pc, #388]	; (8005ab0 <UART_SetConfig+0x2d4>)
 800592a:	fba3 2302 	umull	r2, r3, r3, r2
 800592e:	095b      	lsrs	r3, r3, #5
 8005930:	011c      	lsls	r4, r3, #4
 8005932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005936:	2200      	movs	r2, #0
 8005938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800593c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005940:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005944:	4642      	mov	r2, r8
 8005946:	464b      	mov	r3, r9
 8005948:	1891      	adds	r1, r2, r2
 800594a:	64b9      	str	r1, [r7, #72]	; 0x48
 800594c:	415b      	adcs	r3, r3
 800594e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005950:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005954:	4641      	mov	r1, r8
 8005956:	eb12 0a01 	adds.w	sl, r2, r1
 800595a:	4649      	mov	r1, r9
 800595c:	eb43 0b01 	adc.w	fp, r3, r1
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800596c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005974:	4692      	mov	sl, r2
 8005976:	469b      	mov	fp, r3
 8005978:	4643      	mov	r3, r8
 800597a:	eb1a 0303 	adds.w	r3, sl, r3
 800597e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005982:	464b      	mov	r3, r9
 8005984:	eb4b 0303 	adc.w	r3, fp, r3
 8005988:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005998:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800599c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059a0:	460b      	mov	r3, r1
 80059a2:	18db      	adds	r3, r3, r3
 80059a4:	643b      	str	r3, [r7, #64]	; 0x40
 80059a6:	4613      	mov	r3, r2
 80059a8:	eb42 0303 	adc.w	r3, r2, r3
 80059ac:	647b      	str	r3, [r7, #68]	; 0x44
 80059ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059b6:	f7fb f849 	bl	8000a4c <__aeabi_uldivmod>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	4b3b      	ldr	r3, [pc, #236]	; (8005ab0 <UART_SetConfig+0x2d4>)
 80059c2:	fba3 2301 	umull	r2, r3, r3, r1
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	2264      	movs	r2, #100	; 0x64
 80059ca:	fb02 f303 	mul.w	r3, r2, r3
 80059ce:	1acb      	subs	r3, r1, r3
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059d6:	4b36      	ldr	r3, [pc, #216]	; (8005ab0 <UART_SetConfig+0x2d4>)
 80059d8:	fba3 2302 	umull	r2, r3, r3, r2
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059e4:	441c      	add	r4, r3
 80059e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059f8:	4642      	mov	r2, r8
 80059fa:	464b      	mov	r3, r9
 80059fc:	1891      	adds	r1, r2, r2
 80059fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a00:	415b      	adcs	r3, r3
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a08:	4641      	mov	r1, r8
 8005a0a:	1851      	adds	r1, r2, r1
 8005a0c:	6339      	str	r1, [r7, #48]	; 0x30
 8005a0e:	4649      	mov	r1, r9
 8005a10:	414b      	adcs	r3, r1
 8005a12:	637b      	str	r3, [r7, #52]	; 0x34
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a20:	4659      	mov	r1, fp
 8005a22:	00cb      	lsls	r3, r1, #3
 8005a24:	4651      	mov	r1, sl
 8005a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a2a:	4651      	mov	r1, sl
 8005a2c:	00ca      	lsls	r2, r1, #3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	4603      	mov	r3, r0
 8005a34:	4642      	mov	r2, r8
 8005a36:	189b      	adds	r3, r3, r2
 8005a38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a3c:	464b      	mov	r3, r9
 8005a3e:	460a      	mov	r2, r1
 8005a40:	eb42 0303 	adc.w	r3, r2, r3
 8005a44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	18db      	adds	r3, r3, r3
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a62:	4613      	mov	r3, r2
 8005a64:	eb42 0303 	adc.w	r3, r2, r3
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a72:	f7fa ffeb 	bl	8000a4c <__aeabi_uldivmod>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <UART_SetConfig+0x2d4>)
 8005a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a80:	095b      	lsrs	r3, r3, #5
 8005a82:	2164      	movs	r1, #100	; 0x64
 8005a84:	fb01 f303 	mul.w	r3, r1, r3
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	3332      	adds	r3, #50	; 0x32
 8005a8e:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <UART_SetConfig+0x2d4>)
 8005a90:	fba2 2303 	umull	r2, r3, r2, r3
 8005a94:	095b      	lsrs	r3, r3, #5
 8005a96:	f003 0207 	and.w	r2, r3, #7
 8005a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4422      	add	r2, r4
 8005aa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005aa4:	e106      	b.n	8005cb4 <UART_SetConfig+0x4d8>
 8005aa6:	bf00      	nop
 8005aa8:	40011000 	.word	0x40011000
 8005aac:	40011400 	.word	0x40011400
 8005ab0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005abe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ac2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ac6:	4642      	mov	r2, r8
 8005ac8:	464b      	mov	r3, r9
 8005aca:	1891      	adds	r1, r2, r2
 8005acc:	6239      	str	r1, [r7, #32]
 8005ace:	415b      	adcs	r3, r3
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ad6:	4641      	mov	r1, r8
 8005ad8:	1854      	adds	r4, r2, r1
 8005ada:	4649      	mov	r1, r9
 8005adc:	eb43 0501 	adc.w	r5, r3, r1
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	00eb      	lsls	r3, r5, #3
 8005aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aee:	00e2      	lsls	r2, r4, #3
 8005af0:	4614      	mov	r4, r2
 8005af2:	461d      	mov	r5, r3
 8005af4:	4643      	mov	r3, r8
 8005af6:	18e3      	adds	r3, r4, r3
 8005af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005afc:	464b      	mov	r3, r9
 8005afe:	eb45 0303 	adc.w	r3, r5, r3
 8005b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b22:	4629      	mov	r1, r5
 8005b24:	008b      	lsls	r3, r1, #2
 8005b26:	4621      	mov	r1, r4
 8005b28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	008a      	lsls	r2, r1, #2
 8005b30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b34:	f7fa ff8a 	bl	8000a4c <__aeabi_uldivmod>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4b60      	ldr	r3, [pc, #384]	; (8005cc0 <UART_SetConfig+0x4e4>)
 8005b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	011c      	lsls	r4, r3, #4
 8005b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b58:	4642      	mov	r2, r8
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	1891      	adds	r1, r2, r2
 8005b5e:	61b9      	str	r1, [r7, #24]
 8005b60:	415b      	adcs	r3, r3
 8005b62:	61fb      	str	r3, [r7, #28]
 8005b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b68:	4641      	mov	r1, r8
 8005b6a:	1851      	adds	r1, r2, r1
 8005b6c:	6139      	str	r1, [r7, #16]
 8005b6e:	4649      	mov	r1, r9
 8005b70:	414b      	adcs	r3, r1
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b80:	4659      	mov	r1, fp
 8005b82:	00cb      	lsls	r3, r1, #3
 8005b84:	4651      	mov	r1, sl
 8005b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b8a:	4651      	mov	r1, sl
 8005b8c:	00ca      	lsls	r2, r1, #3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4619      	mov	r1, r3
 8005b92:	4603      	mov	r3, r0
 8005b94:	4642      	mov	r2, r8
 8005b96:	189b      	adds	r3, r3, r2
 8005b98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	460a      	mov	r2, r1
 8005ba0:	eb42 0303 	adc.w	r3, r2, r3
 8005ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	008b      	lsls	r3, r1, #2
 8005bc4:	4641      	mov	r1, r8
 8005bc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bca:	4641      	mov	r1, r8
 8005bcc:	008a      	lsls	r2, r1, #2
 8005bce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bd2:	f7fa ff3b 	bl	8000a4c <__aeabi_uldivmod>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4611      	mov	r1, r2
 8005bdc:	4b38      	ldr	r3, [pc, #224]	; (8005cc0 <UART_SetConfig+0x4e4>)
 8005bde:	fba3 2301 	umull	r2, r3, r3, r1
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	2264      	movs	r2, #100	; 0x64
 8005be6:	fb02 f303 	mul.w	r3, r2, r3
 8005bea:	1acb      	subs	r3, r1, r3
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	3332      	adds	r3, #50	; 0x32
 8005bf0:	4a33      	ldr	r2, [pc, #204]	; (8005cc0 <UART_SetConfig+0x4e4>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bfc:	441c      	add	r4, r3
 8005bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c02:	2200      	movs	r2, #0
 8005c04:	673b      	str	r3, [r7, #112]	; 0x70
 8005c06:	677a      	str	r2, [r7, #116]	; 0x74
 8005c08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	464b      	mov	r3, r9
 8005c10:	1891      	adds	r1, r2, r2
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	415b      	adcs	r3, r3
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c1c:	4641      	mov	r1, r8
 8005c1e:	1851      	adds	r1, r2, r1
 8005c20:	6039      	str	r1, [r7, #0]
 8005c22:	4649      	mov	r1, r9
 8005c24:	414b      	adcs	r3, r1
 8005c26:	607b      	str	r3, [r7, #4]
 8005c28:	f04f 0200 	mov.w	r2, #0
 8005c2c:	f04f 0300 	mov.w	r3, #0
 8005c30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c34:	4659      	mov	r1, fp
 8005c36:	00cb      	lsls	r3, r1, #3
 8005c38:	4651      	mov	r1, sl
 8005c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c3e:	4651      	mov	r1, sl
 8005c40:	00ca      	lsls	r2, r1, #3
 8005c42:	4610      	mov	r0, r2
 8005c44:	4619      	mov	r1, r3
 8005c46:	4603      	mov	r3, r0
 8005c48:	4642      	mov	r2, r8
 8005c4a:	189b      	adds	r3, r3, r2
 8005c4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c4e:	464b      	mov	r3, r9
 8005c50:	460a      	mov	r2, r1
 8005c52:	eb42 0303 	adc.w	r3, r2, r3
 8005c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	663b      	str	r3, [r7, #96]	; 0x60
 8005c62:	667a      	str	r2, [r7, #100]	; 0x64
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c70:	4649      	mov	r1, r9
 8005c72:	008b      	lsls	r3, r1, #2
 8005c74:	4641      	mov	r1, r8
 8005c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c7a:	4641      	mov	r1, r8
 8005c7c:	008a      	lsls	r2, r1, #2
 8005c7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c82:	f7fa fee3 	bl	8000a4c <__aeabi_uldivmod>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <UART_SetConfig+0x4e4>)
 8005c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	2164      	movs	r1, #100	; 0x64
 8005c94:	fb01 f303 	mul.w	r3, r1, r3
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	3332      	adds	r3, #50	; 0x32
 8005c9e:	4a08      	ldr	r2, [pc, #32]	; (8005cc0 <UART_SetConfig+0x4e4>)
 8005ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	f003 020f 	and.w	r2, r3, #15
 8005caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4422      	add	r2, r4
 8005cb2:	609a      	str	r2, [r3, #8]
}
 8005cb4:	bf00      	nop
 8005cb6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cc0:	51eb851f 	.word	0x51eb851f

08005cc4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f103 0208 	add.w	r2, r3, #8
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cdc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f103 0208 	add.w	r2, r3, #8
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f103 0208 	add.w	r2, r3, #8
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	601a      	str	r2, [r3, #0]
}
 8005d5a:	bf00      	nop
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d103      	bne.n	8005d86 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e00c      	b.n	8005da0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e002      	b.n	8005d94 <vListInsert+0x2e>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d2f6      	bcs.n	8005d8e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6892      	ldr	r2, [r2, #8]
 8005dee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6852      	ldr	r2, [r2, #4]
 8005df8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d103      	bne.n	8005e0c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	1e5a      	subs	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005e36:	2301      	movs	r3, #1
 8005e38:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d05d      	beq.n	8005f1c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d059      	beq.n	8005f1c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e70:	2100      	movs	r1, #0
 8005e72:	fba3 2302 	umull	r2, r3, r3, r2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d000      	beq.n	8005e7c <xQueueGenericReset+0x50>
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d14c      	bne.n	8005f1c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8005e82:	f002 fe01 	bl	8008a88 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8e:	6939      	ldr	r1, [r7, #16]
 8005e90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	441a      	add	r2, r3
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	6939      	ldr	r1, [r7, #16]
 8005eb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	441a      	add	r2, r3
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	22ff      	movs	r2, #255	; 0xff
 8005ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	22ff      	movs	r2, #255	; 0xff
 8005ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d114      	bne.n	8005f02 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01a      	beq.n	8005f16 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	3310      	adds	r3, #16
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f001 fd61 	bl	80079ac <xTaskRemoveFromEventList>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d012      	beq.n	8005f16 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005ef0:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <xQueueGenericReset+0x11c>)
 8005ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	e009      	b.n	8005f16 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	3310      	adds	r3, #16
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fedc 	bl	8005cc4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	3324      	adds	r3, #36	; 0x24
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff fed7 	bl	8005cc4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005f16:	f002 fde7 	bl	8008ae8 <vPortExitCritical>
 8005f1a:	e001      	b.n	8005f20 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10a      	bne.n	8005f3c <xQueueGenericReset+0x110>
        __asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	60bb      	str	r3, [r7, #8]
    }
 8005f38:	bf00      	nop
 8005f3a:	e7fe      	b.n	8005f3a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005f3c:	697b      	ldr	r3, [r7, #20]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	; 0x28
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	4613      	mov	r3, r2
 8005f58:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d02e      	beq.n	8005fc2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005f64:	2100      	movs	r1, #0
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d000      	beq.n	8005f74 <xQueueGenericCreate+0x28>
 8005f72:	2101      	movs	r1, #1
 8005f74:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d123      	bne.n	8005fc2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005f82:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005f86:	d81c      	bhi.n	8005fc2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	fb02 f303 	mul.w	r3, r2, r3
 8005f90:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	3350      	adds	r3, #80	; 0x50
 8005f96:	4618      	mov	r0, r3
 8005f98:	f002 fe98 	bl	8008ccc <pvPortMalloc>
 8005f9c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01c      	beq.n	8005fde <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	3350      	adds	r3, #80	; 0x50
 8005fac:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fae:	79fa      	ldrb	r2, [r7, #7]
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 f814 	bl	8005fe8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005fc0:	e00d      	b.n	8005fde <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <xQueueGenericCreate+0x92>
        __asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	613b      	str	r3, [r7, #16]
    }
 8005fda:	bf00      	nop
 8005fdc:	e7fe      	b.n	8005fdc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005fde:	69fb      	ldr	r3, [r7, #28]
    }
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3720      	adds	r7, #32
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d103      	bne.n	8006004 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	e002      	b.n	800600a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006016:	2101      	movs	r1, #1
 8006018:	69b8      	ldr	r0, [r7, #24]
 800601a:	f7ff ff07 	bl	8005e2c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	78fa      	ldrb	r2, [r7, #3]
 8006022:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8006026:	bf00      	nop
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08e      	sub	sp, #56	; 0x38
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800603e:	2300      	movs	r3, #0
 8006040:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <xQueueGenericSend+0x32>
        __asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d103      	bne.n	8006070 <xQueueGenericSend+0x40>
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <xQueueGenericSend+0x44>
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <xQueueGenericSend+0x46>
 8006074:	2300      	movs	r3, #0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <xQueueGenericSend+0x60>
        __asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d103      	bne.n	800609e <xQueueGenericSend+0x6e>
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <xQueueGenericSend+0x72>
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <xQueueGenericSend+0x74>
 80060a2:	2300      	movs	r3, #0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <xQueueGenericSend+0x8e>
        __asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	623b      	str	r3, [r7, #32]
    }
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060be:	f001 fe85 	bl	8007dcc <xTaskGetSchedulerState>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d102      	bne.n	80060ce <xQueueGenericSend+0x9e>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <xQueueGenericSend+0xa2>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e000      	b.n	80060d4 <xQueueGenericSend+0xa4>
 80060d2:	2300      	movs	r3, #0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <xQueueGenericSend+0xbe>
        __asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	61fb      	str	r3, [r7, #28]
    }
 80060ea:	bf00      	nop
 80060ec:	e7fe      	b.n	80060ec <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80060ee:	f002 fccb 	bl	8008a88 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d302      	bcc.n	8006104 <xQueueGenericSend+0xd4>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d129      	bne.n	8006158 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800610a:	f000 fc72 	bl	80069f2 <prvCopyDataToQueue>
 800610e:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d010      	beq.n	800613a <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	3324      	adds	r3, #36	; 0x24
 800611c:	4618      	mov	r0, r3
 800611e:	f001 fc45 	bl	80079ac <xTaskRemoveFromEventList>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d013      	beq.n	8006150 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006128:	4b3f      	ldr	r3, [pc, #252]	; (8006228 <xQueueGenericSend+0x1f8>)
 800612a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	e00a      	b.n	8006150 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8006140:	4b39      	ldr	r3, [pc, #228]	; (8006228 <xQueueGenericSend+0x1f8>)
 8006142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006150:	f002 fcca 	bl	8008ae8 <vPortExitCritical>
                return pdPASS;
 8006154:	2301      	movs	r3, #1
 8006156:	e063      	b.n	8006220 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d103      	bne.n	8006166 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800615e:	f002 fcc3 	bl	8008ae8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8006162:	2300      	movs	r3, #0
 8006164:	e05c      	b.n	8006220 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	2b00      	cmp	r3, #0
 800616a:	d106      	bne.n	800617a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800616c:	f107 0314 	add.w	r3, r7, #20
 8006170:	4618      	mov	r0, r3
 8006172:	f001 fcf1 	bl	8007b58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006176:	2301      	movs	r3, #1
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800617a:	f002 fcb5 	bl	8008ae8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800617e:	f001 f913 	bl	80073a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006182:	f002 fc81 	bl	8008a88 <vPortEnterCritical>
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800618c:	b25b      	sxtb	r3, r3
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006192:	d103      	bne.n	800619c <xQueueGenericSend+0x16c>
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061a2:	b25b      	sxtb	r3, r3
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d103      	bne.n	80061b2 <xQueueGenericSend+0x182>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061b2:	f002 fc99 	bl	8008ae8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061b6:	1d3a      	adds	r2, r7, #4
 80061b8:	f107 0314 	add.w	r3, r7, #20
 80061bc:	4611      	mov	r1, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 fce0 	bl	8007b84 <xTaskCheckForTimeOut>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d124      	bne.n	8006214 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061cc:	f000 fd09 	bl	8006be2 <prvIsQueueFull>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d018      	beq.n	8006208 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	3310      	adds	r3, #16
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	4611      	mov	r1, r2
 80061de:	4618      	mov	r0, r3
 80061e0:	f001 fb7a 	bl	80078d8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80061e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061e6:	f000 fc94 	bl	8006b12 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80061ea:	f001 f8eb 	bl	80073c4 <xTaskResumeAll>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f af7c 	bne.w	80060ee <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80061f6:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <xQueueGenericSend+0x1f8>)
 80061f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	e772      	b.n	80060ee <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800620a:	f000 fc82 	bl	8006b12 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800620e:	f001 f8d9 	bl	80073c4 <xTaskResumeAll>
 8006212:	e76c      	b.n	80060ee <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006216:	f000 fc7c 	bl	8006b12 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800621a:	f001 f8d3 	bl	80073c4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800621e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006220:	4618      	mov	r0, r3
 8006222:	3738      	adds	r7, #56	; 0x38
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b092      	sub	sp, #72	; 0x48
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 800623e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d103      	bne.n	8006268 <xQueueGenericSendFromISR+0x3c>
 8006260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <xQueueGenericSendFromISR+0x40>
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <xQueueGenericSendFromISR+0x42>
 800626c:	2300      	movs	r3, #0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b02      	cmp	r3, #2
 800628c:	d103      	bne.n	8006296 <xQueueGenericSendFromISR+0x6a>
 800628e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <xQueueGenericSendFromISR+0x6e>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <xQueueGenericSendFromISR+0x70>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062b6:	f002 fcc9 	bl	8008c4c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80062ba:	f3ef 8211 	mrs	r2, BASEPRI
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	623a      	str	r2, [r7, #32]
 80062d0:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80062d2:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062de:	429a      	cmp	r2, r3
 80062e0:	d302      	bcc.n	80062e8 <xQueueGenericSendFromISR+0xbc>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d146      	bne.n	8006376 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80062e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80062fe:	f000 fb78 	bl	80069f2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006302:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d112      	bne.n	8006332 <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800630c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	2b00      	cmp	r3, #0
 8006312:	d02d      	beq.n	8006370 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006316:	3324      	adds	r3, #36	; 0x24
 8006318:	4618      	mov	r0, r3
 800631a:	f001 fb47 	bl	80079ac <xTaskRemoveFromEventList>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d025      	beq.n	8006370 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d022      	beq.n	8006370 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	e01e      	b.n	8006370 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8006332:	f001 f953 	bl	80075dc <uxTaskGetNumberOfTasks>
 8006336:	6338      	str	r0, [r7, #48]	; 0x30
 8006338:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800633c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800633e:	429a      	cmp	r2, r3
 8006340:	d916      	bls.n	8006370 <xQueueGenericSendFromISR+0x144>
 8006342:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8006346:	2b7f      	cmp	r3, #127	; 0x7f
 8006348:	d10a      	bne.n	8006360 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	61bb      	str	r3, [r7, #24]
    }
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <xQueueGenericSendFromISR+0x132>
 8006360:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006364:	3301      	adds	r3, #1
 8006366:	b2db      	uxtb	r3, r3
 8006368:	b25a      	sxtb	r2, r3
 800636a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8006370:	2301      	movs	r3, #1
 8006372:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8006374:	e001      	b.n	800637a <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006376:	2300      	movs	r3, #0
 8006378:	647b      	str	r3, [r7, #68]	; 0x44
 800637a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637c:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006384:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006388:	4618      	mov	r0, r3
 800638a:	3748      	adds	r7, #72	; 0x48
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b090      	sub	sp, #64	; 0x40
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	63bb      	str	r3, [r7, #56]	; 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10a      	bne.n	80063ba <xQueueGiveFromISR+0x2a>
        __asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <xQueueGiveFromISR+0x48>
        __asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	623b      	str	r3, [r7, #32]
    }
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80063d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d103      	bne.n	80063e8 <xQueueGiveFromISR+0x58>
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <xQueueGiveFromISR+0x5c>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <xQueueGiveFromISR+0x5e>
 80063ec:	2300      	movs	r3, #0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10a      	bne.n	8006408 <xQueueGiveFromISR+0x78>
        __asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	61fb      	str	r3, [r7, #28]
    }
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006408:	f002 fc20 	bl	8008c4c <vPortValidateInterruptPriority>
        __asm volatile
 800640c:	f3ef 8211 	mrs	r2, BASEPRI
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	61ba      	str	r2, [r7, #24]
 8006422:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8006424:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642c:	633b      	str	r3, [r7, #48]	; 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006434:	429a      	cmp	r2, r3
 8006436:	d242      	bcs.n	80064be <xQueueGiveFromISR+0x12e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800643e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800644a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d112      	bne.n	800647a <xQueueGiveFromISR+0xea>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	2b00      	cmp	r3, #0
 800645a:	d02d      	beq.n	80064b8 <xQueueGiveFromISR+0x128>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645e:	3324      	adds	r3, #36	; 0x24
 8006460:	4618      	mov	r0, r3
 8006462:	f001 faa3 	bl	80079ac <xTaskRemoveFromEventList>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d025      	beq.n	80064b8 <xQueueGiveFromISR+0x128>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d022      	beq.n	80064b8 <xQueueGiveFromISR+0x128>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2201      	movs	r2, #1
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	e01e      	b.n	80064b8 <xQueueGiveFromISR+0x128>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800647a:	f001 f8af 	bl	80075dc <uxTaskGetNumberOfTasks>
 800647e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006480:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006486:	429a      	cmp	r2, r3
 8006488:	d916      	bls.n	80064b8 <xQueueGiveFromISR+0x128>
 800648a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800648e:	2b7f      	cmp	r3, #127	; 0x7f
 8006490:	d10a      	bne.n	80064a8 <xQueueGiveFromISR+0x118>
        __asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	613b      	str	r3, [r7, #16]
    }
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <xQueueGiveFromISR+0x116>
 80064a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064ac:	3301      	adds	r3, #1
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	b25a      	sxtb	r2, r3
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80064b8:	2301      	movs	r3, #1
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064bc:	e001      	b.n	80064c2 <xQueueGiveFromISR+0x132>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c4:	60fb      	str	r3, [r7, #12]
        __asm volatile
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f383 8811 	msr	BASEPRI, r3
    }
 80064cc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80064ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3740      	adds	r7, #64	; 0x40
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b08c      	sub	sp, #48	; 0x30
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80064e4:	2300      	movs	r3, #0
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <xQueueReceive+0x30>
        __asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	623b      	str	r3, [r7, #32]
    }
 8006504:	bf00      	nop
 8006506:	e7fe      	b.n	8006506 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d103      	bne.n	8006516 <xQueueReceive+0x3e>
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <xQueueReceive+0x42>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <xQueueReceive+0x44>
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <xQueueReceive+0x5e>
        __asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	61fb      	str	r3, [r7, #28]
    }
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006536:	f001 fc49 	bl	8007dcc <xTaskGetSchedulerState>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d102      	bne.n	8006546 <xQueueReceive+0x6e>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <xQueueReceive+0x72>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <xQueueReceive+0x74>
 800654a:	2300      	movs	r3, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <xQueueReceive+0x8e>
        __asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	61bb      	str	r3, [r7, #24]
    }
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006566:	f002 fa8f 	bl	8008a88 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	2b00      	cmp	r3, #0
 8006574:	d01f      	beq.n	80065b6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006576:	68b9      	ldr	r1, [r7, #8]
 8006578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800657a:	f000 faa4 	bl	8006ac6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	1e5a      	subs	r2, r3, #1
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00f      	beq.n	80065ae <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	3310      	adds	r3, #16
 8006592:	4618      	mov	r0, r3
 8006594:	f001 fa0a 	bl	80079ac <xTaskRemoveFromEventList>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d007      	beq.n	80065ae <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800659e:	4b3d      	ldr	r3, [pc, #244]	; (8006694 <xQueueReceive+0x1bc>)
 80065a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80065ae:	f002 fa9b 	bl	8008ae8 <vPortExitCritical>
                return pdPASS;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e069      	b.n	800668a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d103      	bne.n	80065c4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80065bc:	f002 fa94 	bl	8008ae8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80065c0:	2300      	movs	r3, #0
 80065c2:	e062      	b.n	800668a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80065ca:	f107 0310 	add.w	r3, r7, #16
 80065ce:	4618      	mov	r0, r3
 80065d0:	f001 fac2 	bl	8007b58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80065d8:	f002 fa86 	bl	8008ae8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80065dc:	f000 fee4 	bl	80073a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80065e0:	f002 fa52 	bl	8008a88 <vPortEnterCritical>
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065ea:	b25b      	sxtb	r3, r3
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d103      	bne.n	80065fa <xQueueReceive+0x122>
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006600:	b25b      	sxtb	r3, r3
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006606:	d103      	bne.n	8006610 <xQueueReceive+0x138>
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006610:	f002 fa6a 	bl	8008ae8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006614:	1d3a      	adds	r2, r7, #4
 8006616:	f107 0310 	add.w	r3, r7, #16
 800661a:	4611      	mov	r1, r2
 800661c:	4618      	mov	r0, r3
 800661e:	f001 fab1 	bl	8007b84 <xTaskCheckForTimeOut>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d123      	bne.n	8006670 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800662a:	f000 fac4 	bl	8006bb6 <prvIsQueueEmpty>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d017      	beq.n	8006664 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	3324      	adds	r3, #36	; 0x24
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	4611      	mov	r1, r2
 800663c:	4618      	mov	r0, r3
 800663e:	f001 f94b 	bl	80078d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006644:	f000 fa65 	bl	8006b12 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006648:	f000 febc 	bl	80073c4 <xTaskResumeAll>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d189      	bne.n	8006566 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006652:	4b10      	ldr	r3, [pc, #64]	; (8006694 <xQueueReceive+0x1bc>)
 8006654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	e780      	b.n	8006566 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006666:	f000 fa54 	bl	8006b12 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800666a:	f000 feab 	bl	80073c4 <xTaskResumeAll>
 800666e:	e77a      	b.n	8006566 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006672:	f000 fa4e 	bl	8006b12 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006676:	f000 fea5 	bl	80073c4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800667a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800667c:	f000 fa9b 	bl	8006bb6 <prvIsQueueEmpty>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	f43f af6f 	beq.w	8006566 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006688:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800668a:	4618      	mov	r0, r3
 800668c:	3730      	adds	r7, #48	; 0x30
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	e000ed04 	.word	0xe000ed04

08006698 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08c      	sub	sp, #48	; 0x30
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80066aa:	2300      	movs	r3, #0
 80066ac:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <xQueueSemaphoreTake+0x32>
        __asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	61bb      	str	r3, [r7, #24]
    }
 80066c6:	bf00      	nop
 80066c8:	e7fe      	b.n	80066c8 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <xQueueSemaphoreTake+0x50>
        __asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	617b      	str	r3, [r7, #20]
    }
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066e8:	f001 fb70 	bl	8007dcc <xTaskGetSchedulerState>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d102      	bne.n	80066f8 <xQueueSemaphoreTake+0x60>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <xQueueSemaphoreTake+0x64>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <xQueueSemaphoreTake+0x66>
 80066fc:	2300      	movs	r3, #0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10a      	bne.n	8006718 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	613b      	str	r3, [r7, #16]
    }
 8006714:	bf00      	nop
 8006716:	e7fe      	b.n	8006716 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006718:	f002 f9b6 	bl	8008a88 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d024      	beq.n	8006772 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	1e5a      	subs	r2, r3, #1
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d104      	bne.n	8006742 <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006738:	f001 fd60 	bl	80081fc <pvTaskIncrementMutexHeldCount>
 800673c:	4602      	mov	r2, r0
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00f      	beq.n	800676a <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	3310      	adds	r3, #16
 800674e:	4618      	mov	r0, r3
 8006750:	f001 f92c 	bl	80079ac <xTaskRemoveFromEventList>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800675a:	4b4d      	ldr	r3, [pc, #308]	; (8006890 <xQueueSemaphoreTake+0x1f8>)
 800675c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800676a:	f002 f9bd 	bl	8008ae8 <vPortExitCritical>
                return pdPASS;
 800676e:	2301      	movs	r3, #1
 8006770:	e089      	b.n	8006886 <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d103      	bne.n	8006780 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8006778:	f002 f9b6 	bl	8008ae8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800677c:	2300      	movs	r3, #0
 800677e:	e082      	b.n	8006886 <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006786:	f107 0308 	add.w	r3, r7, #8
 800678a:	4618      	mov	r0, r3
 800678c:	f001 f9e4 	bl	8007b58 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006790:	2301      	movs	r3, #1
 8006792:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006794:	f002 f9a8 	bl	8008ae8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006798:	f000 fe06 	bl	80073a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800679c:	f002 f974 	bl	8008a88 <vPortEnterCritical>
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067a6:	b25b      	sxtb	r3, r3
 80067a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ac:	d103      	bne.n	80067b6 <xQueueSemaphoreTake+0x11e>
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067bc:	b25b      	sxtb	r3, r3
 80067be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c2:	d103      	bne.n	80067cc <xQueueSemaphoreTake+0x134>
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067cc:	f002 f98c 	bl	8008ae8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067d0:	463a      	mov	r2, r7
 80067d2:	f107 0308 	add.w	r3, r7, #8
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f001 f9d3 	bl	8007b84 <xTaskCheckForTimeOut>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d132      	bne.n	800684a <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067e6:	f000 f9e6 	bl	8006bb6 <prvIsQueueEmpty>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d026      	beq.n	800683e <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 80067f8:	f002 f946 	bl	8008a88 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	4618      	mov	r0, r3
 8006802:	f001 fb01 	bl	8007e08 <xTaskPriorityInherit>
 8006806:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8006808:	f002 f96e 	bl	8008ae8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	3324      	adds	r3, #36	; 0x24
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	4611      	mov	r1, r2
 8006814:	4618      	mov	r0, r3
 8006816:	f001 f85f 	bl	80078d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800681a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800681c:	f000 f979 	bl	8006b12 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006820:	f000 fdd0 	bl	80073c4 <xTaskResumeAll>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	f47f af76 	bne.w	8006718 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 800682c:	4b18      	ldr	r3, [pc, #96]	; (8006890 <xQueueSemaphoreTake+0x1f8>)
 800682e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	e76c      	b.n	8006718 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800683e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006840:	f000 f967 	bl	8006b12 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006844:	f000 fdbe 	bl	80073c4 <xTaskResumeAll>
 8006848:	e766      	b.n	8006718 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800684a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800684c:	f000 f961 	bl	8006b12 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006850:	f000 fdb8 	bl	80073c4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006856:	f000 f9ae 	bl	8006bb6 <prvIsQueueEmpty>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	f43f af5b 	beq.w	8006718 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00d      	beq.n	8006884 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 8006868:	f002 f90e 	bl	8008a88 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800686c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800686e:	f000 f8a8 	bl	80069c2 <prvGetDisinheritPriorityAfterTimeout>
 8006872:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	69f9      	ldr	r1, [r7, #28]
 800687a:	4618      	mov	r0, r3
 800687c:	f001 fc06 	bl	800808c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8006880:	f002 f932 	bl	8008ae8 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006884:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006886:	4618      	mov	r0, r3
 8006888:	3730      	adds	r7, #48	; 0x30
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	e000ed04 	.word	0xe000ed04

08006894 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b090      	sub	sp, #64	; 0x40
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80068a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10a      	bne.n	80068c0 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d103      	bne.n	80068ce <xQueueReceiveFromISR+0x3a>
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <xQueueReceiveFromISR+0x3e>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e000      	b.n	80068d4 <xQueueReceiveFromISR+0x40>
 80068d2:	2300      	movs	r3, #0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	623b      	str	r3, [r7, #32]
    }
 80068ea:	bf00      	nop
 80068ec:	e7fe      	b.n	80068ec <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068ee:	f002 f9ad 	bl	8008c4c <vPortValidateInterruptPriority>
        __asm volatile
 80068f2:	f3ef 8211 	mrs	r2, BASEPRI
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	61fa      	str	r2, [r7, #28]
 8006908:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 800690a:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	2b00      	cmp	r3, #0
 8006918:	d046      	beq.n	80069a8 <xQueueReceiveFromISR+0x114>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006920:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006928:	f000 f8cd 	bl	8006ac6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	1e5a      	subs	r2, r3, #1
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8006934:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693c:	d112      	bne.n	8006964 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d02d      	beq.n	80069a2 <xQueueReceiveFromISR+0x10e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006948:	3310      	adds	r3, #16
 800694a:	4618      	mov	r0, r3
 800694c:	f001 f82e 	bl	80079ac <xTaskRemoveFromEventList>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d025      	beq.n	80069a2 <xQueueReceiveFromISR+0x10e>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d022      	beq.n	80069a2 <xQueueReceiveFromISR+0x10e>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	e01e      	b.n	80069a2 <xQueueReceiveFromISR+0x10e>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8006964:	f000 fe3a 	bl	80075dc <uxTaskGetNumberOfTasks>
 8006968:	62b8      	str	r0, [r7, #40]	; 0x28
 800696a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800696e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006970:	429a      	cmp	r2, r3
 8006972:	d916      	bls.n	80069a2 <xQueueReceiveFromISR+0x10e>
 8006974:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006978:	2b7f      	cmp	r3, #127	; 0x7f
 800697a:	d10a      	bne.n	8006992 <xQueueReceiveFromISR+0xfe>
        __asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	617b      	str	r3, [r7, #20]
    }
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <xQueueReceiveFromISR+0xfc>
 8006992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006996:	3301      	adds	r3, #1
 8006998:	b2db      	uxtb	r3, r3
 800699a:	b25a      	sxtb	r2, r3
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80069a2:	2301      	movs	r3, #1
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a6:	e001      	b.n	80069ac <xQueueReceiveFromISR+0x118>
        }
        else
        {
            xReturn = pdFAIL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ae:	613b      	str	r3, [r7, #16]
        __asm volatile
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f383 8811 	msr	BASEPRI, r3
    }
 80069b6:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80069b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3740      	adds	r7, #64	; 0x40
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d006      	beq.n	80069e0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f1c3 0305 	rsb	r3, r3, #5
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	e001      	b.n	80069e4 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80069e4:	68fb      	ldr	r3, [r7, #12]
    }
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b086      	sub	sp, #24
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80069fe:	2300      	movs	r3, #0
 8006a00:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10d      	bne.n	8006a2c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d14d      	bne.n	8006ab4 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f001 fa91 	bl	8007f44 <xTaskPriorityDisinherit>
 8006a22:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	609a      	str	r2, [r3, #8]
 8006a2a:	e043      	b.n	8006ab4 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d119      	bne.n	8006a66 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6858      	ldr	r0, [r3, #4]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	f002 fb3d 	bl	80090bc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	441a      	add	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d32b      	bcc.n	8006ab4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	605a      	str	r2, [r3, #4]
 8006a64:	e026      	b.n	8006ab4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68d8      	ldr	r0, [r3, #12]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	f002 fb23 	bl	80090bc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	425b      	negs	r3, r3
 8006a80:	441a      	add	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d207      	bcs.n	8006aa2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	425b      	negs	r3, r3
 8006a9c:	441a      	add	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d105      	bne.n	8006ab4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8006abc:	697b      	ldr	r3, [r7, #20]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b082      	sub	sp, #8
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d018      	beq.n	8006b0a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	441a      	add	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d303      	bcc.n	8006afa <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68d9      	ldr	r1, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	461a      	mov	r2, r3
 8006b04:	6838      	ldr	r0, [r7, #0]
 8006b06:	f002 fad9 	bl	80090bc <memcpy>
    }
}
 8006b0a:	bf00      	nop
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006b1a:	f001 ffb5 	bl	8008a88 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b24:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b26:	e011      	b.n	8006b4c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d012      	beq.n	8006b56 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3324      	adds	r3, #36	; 0x24
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 ff39 	bl	80079ac <xTaskRemoveFromEventList>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8006b40:	f001 f886 	bl	8007c50 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	dce9      	bgt.n	8006b28 <prvUnlockQueue+0x16>
 8006b54:	e000      	b.n	8006b58 <prvUnlockQueue+0x46>
                    break;
 8006b56:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	22ff      	movs	r2, #255	; 0xff
 8006b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006b60:	f001 ffc2 	bl	8008ae8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006b64:	f001 ff90 	bl	8008a88 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b6e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b70:	e011      	b.n	8006b96 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d012      	beq.n	8006ba0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3310      	adds	r3, #16
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 ff14 	bl	80079ac <xTaskRemoveFromEventList>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006b8a:	f001 f861 	bl	8007c50 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	dce9      	bgt.n	8006b72 <prvUnlockQueue+0x60>
 8006b9e:	e000      	b.n	8006ba2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006ba0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	22ff      	movs	r2, #255	; 0xff
 8006ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006baa:	f001 ff9d 	bl	8008ae8 <vPortExitCritical>
}
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006bbe:	f001 ff63 	bl	8008a88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d102      	bne.n	8006bd0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	e001      	b.n	8006bd4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006bd4:	f001 ff88 	bl	8008ae8 <vPortExitCritical>

    return xReturn;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006bea:	f001 ff4d 	bl	8008a88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d102      	bne.n	8006c00 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e001      	b.n	8006c04 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006c04:	f001 ff70 	bl	8008ae8 <vPortExitCritical>

    return xReturn;
 8006c08:	68fb      	ldr	r3, [r7, #12]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	60fb      	str	r3, [r7, #12]
    }
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d024      	beq.n	8006c8e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c44:	2300      	movs	r3, #0
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	e01e      	b.n	8006c88 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8006c4a:	4a18      	ldr	r2, [pc, #96]	; (8006cac <vQueueAddToRegistry+0x98>)
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	4413      	add	r3, r2
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d105      	bne.n	8006c66 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	00db      	lsls	r3, r3, #3
 8006c5e:	4a13      	ldr	r2, [pc, #76]	; (8006cac <vQueueAddToRegistry+0x98>)
 8006c60:	4413      	add	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]
                    break;
 8006c64:	e013      	b.n	8006c8e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <vQueueAddToRegistry+0x6e>
 8006c6c:	4a0f      	ldr	r2, [pc, #60]	; (8006cac <vQueueAddToRegistry+0x98>)
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	4a0b      	ldr	r2, [pc, #44]	; (8006cac <vQueueAddToRegistry+0x98>)
 8006c7e:	4413      	add	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	3301      	adds	r3, #1
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2b07      	cmp	r3, #7
 8006c8c:	d9dd      	bls.n	8006c4a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	2000023c 	.word	0x2000023c

08006cb0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006cc0:	f001 fee2 	bl	8008a88 <vPortEnterCritical>
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cca:	b25b      	sxtb	r3, r3
 8006ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd0:	d103      	bne.n	8006cda <vQueueWaitForMessageRestricted+0x2a>
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ce0:	b25b      	sxtb	r3, r3
 8006ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce6:	d103      	bne.n	8006cf0 <vQueueWaitForMessageRestricted+0x40>
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cf0:	f001 fefa 	bl	8008ae8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d106      	bne.n	8006d0a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	3324      	adds	r3, #36	; 0x24
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fe0b 	bl	8007920 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006d0a:	6978      	ldr	r0, [r7, #20]
 8006d0c:	f7ff ff01 	bl	8006b12 <prvUnlockQueue>
    }
 8006d10:	bf00      	nop
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08c      	sub	sp, #48	; 0x30
 8006d1c:	af04      	add	r7, sp, #16
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	4613      	mov	r3, r2
 8006d26:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d28:	88fb      	ldrh	r3, [r7, #6]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f001 ffcd 	bl	8008ccc <pvPortMalloc>
 8006d32:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d013      	beq.n	8006d62 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d3a:	2058      	movs	r0, #88	; 0x58
 8006d3c:	f001 ffc6 	bl	8008ccc <pvPortMalloc>
 8006d40:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d008      	beq.n	8006d5a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006d48:	2258      	movs	r2, #88	; 0x58
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	69f8      	ldr	r0, [r7, #28]
 8006d4e:	f002 f989 	bl	8009064 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
 8006d58:	e005      	b.n	8006d66 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8006d5a:	6978      	ldr	r0, [r7, #20]
 8006d5c:	f002 f870 	bl	8008e40 <vPortFree>
 8006d60:	e001      	b.n	8006d66 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d013      	beq.n	8006d94 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d6c:	88fa      	ldrh	r2, [r7, #6]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	9303      	str	r3, [sp, #12]
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	9302      	str	r3, [sp, #8]
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	68b9      	ldr	r1, [r7, #8]
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 f80e 	bl	8006da4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006d88:	69f8      	ldr	r0, [r7, #28]
 8006d8a:	f000 f899 	bl	8006ec0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	e002      	b.n	8006d9a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d94:	f04f 33ff 	mov.w	r3, #4294967295
 8006d98:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
    }
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3720      	adds	r7, #32
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	461a      	mov	r2, r3
 8006dbc:	21a5      	movs	r1, #165	; 0xa5
 8006dbe:	f002 f951 	bl	8009064 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	f023 0307 	bic.w	r3, r3, #7
 8006dda:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <prvInitialiseNewTask+0x58>
        __asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	617b      	str	r3, [r7, #20]
    }
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d01e      	beq.n	8006e40 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e02:	2300      	movs	r3, #0
 8006e04:	61fb      	str	r3, [r7, #28]
 8006e06:	e012      	b.n	8006e2e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	7819      	ldrb	r1, [r3, #0]
 8006e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	4413      	add	r3, r2
 8006e16:	3334      	adds	r3, #52	; 0x34
 8006e18:	460a      	mov	r2, r1
 8006e1a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	4413      	add	r3, r2
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d006      	beq.n	8006e36 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	2b09      	cmp	r3, #9
 8006e32:	d9e9      	bls.n	8006e08 <prvInitialiseNewTask+0x64>
 8006e34:	e000      	b.n	8006e38 <prvInitialiseNewTask+0x94>
            {
                break;
 8006e36:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d90a      	bls.n	8006e5c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	613b      	str	r3, [r7, #16]
    }
 8006e58:	bf00      	nop
 8006e5a:	e7fe      	b.n	8006e5a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d901      	bls.n	8006e66 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e62:	2304      	movs	r3, #4
 8006e64:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e6a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e70:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	3304      	adds	r3, #4
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe ff44 	bl	8005d04 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	3318      	adds	r3, #24
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe ff3f 	bl	8005d04 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	f1c3 0205 	rsb	r2, r3, #5
 8006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e94:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e9a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	68f9      	ldr	r1, [r7, #12]
 8006ea0:	69b8      	ldr	r0, [r7, #24]
 8006ea2:	f001 fcc3 	bl	800882c <pxPortInitialiseStack>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eaa:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006eb8:	bf00      	nop
 8006eba:	3720      	adds	r7, #32
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006ec8:	f001 fdde 	bl	8008a88 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006ecc:	4b40      	ldr	r3, [pc, #256]	; (8006fd0 <prvAddNewTaskToReadyList+0x110>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	4a3f      	ldr	r2, [pc, #252]	; (8006fd0 <prvAddNewTaskToReadyList+0x110>)
 8006ed4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006ed6:	4b3f      	ldr	r3, [pc, #252]	; (8006fd4 <prvAddNewTaskToReadyList+0x114>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006ede:	4a3d      	ldr	r2, [pc, #244]	; (8006fd4 <prvAddNewTaskToReadyList+0x114>)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ee4:	4b3a      	ldr	r3, [pc, #232]	; (8006fd0 <prvAddNewTaskToReadyList+0x110>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d110      	bne.n	8006f0e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006eec:	f000 fed4 	bl	8007c98 <prvInitialiseTaskLists>
 8006ef0:	e00d      	b.n	8006f0e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006ef2:	4b39      	ldr	r3, [pc, #228]	; (8006fd8 <prvAddNewTaskToReadyList+0x118>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d109      	bne.n	8006f0e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006efa:	4b36      	ldr	r3, [pc, #216]	; (8006fd4 <prvAddNewTaskToReadyList+0x114>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d802      	bhi.n	8006f0e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006f08:	4a32      	ldr	r2, [pc, #200]	; (8006fd4 <prvAddNewTaskToReadyList+0x114>)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006f0e:	4b33      	ldr	r3, [pc, #204]	; (8006fdc <prvAddNewTaskToReadyList+0x11c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3301      	adds	r3, #1
 8006f14:	4a31      	ldr	r2, [pc, #196]	; (8006fdc <prvAddNewTaskToReadyList+0x11c>)
 8006f16:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f18:	4b30      	ldr	r3, [pc, #192]	; (8006fdc <prvAddNewTaskToReadyList+0x11c>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	2201      	movs	r2, #1
 8006f26:	409a      	lsls	r2, r3
 8006f28:	4b2d      	ldr	r3, [pc, #180]	; (8006fe0 <prvAddNewTaskToReadyList+0x120>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	4a2c      	ldr	r2, [pc, #176]	; (8006fe0 <prvAddNewTaskToReadyList+0x120>)
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f36:	492b      	ldr	r1, [pc, #172]	; (8006fe4 <prvAddNewTaskToReadyList+0x124>)
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	440b      	add	r3, r1
 8006f42:	3304      	adds	r3, #4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	609a      	str	r2, [r3, #8]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	60da      	str	r2, [r3, #12]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	3204      	adds	r2, #4
 8006f5e:	605a      	str	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	609a      	str	r2, [r3, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4a1b      	ldr	r2, [pc, #108]	; (8006fe4 <prvAddNewTaskToReadyList+0x124>)
 8006f76:	441a      	add	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	615a      	str	r2, [r3, #20]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f80:	4918      	ldr	r1, [pc, #96]	; (8006fe4 <prvAddNewTaskToReadyList+0x124>)
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	1c59      	adds	r1, r3, #1
 8006f90:	4814      	ldr	r0, [pc, #80]	; (8006fe4 <prvAddNewTaskToReadyList+0x124>)
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4403      	add	r3, r0
 8006f9c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006f9e:	f001 fda3 	bl	8008ae8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006fa2:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <prvAddNewTaskToReadyList+0x118>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00e      	beq.n	8006fc8 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006faa:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <prvAddNewTaskToReadyList+0x114>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d207      	bcs.n	8006fc8 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006fb8:	4b0b      	ldr	r3, [pc, #44]	; (8006fe8 <prvAddNewTaskToReadyList+0x128>)
 8006fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006fc8:	bf00      	nop
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20000354 	.word	0x20000354
 8006fd4:	2000027c 	.word	0x2000027c
 8006fd8:	20000360 	.word	0x20000360
 8006fdc:	20000370 	.word	0x20000370
 8006fe0:	2000035c 	.word	0x2000035c
 8006fe4:	20000280 	.word	0x20000280
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d017      	beq.n	800702e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <vTaskDelay+0x60>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <vTaskDelay+0x30>
        __asm volatile
 8007006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	60bb      	str	r3, [r7, #8]
    }
 8007018:	bf00      	nop
 800701a:	e7fe      	b.n	800701a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800701c:	f000 f9c4 	bl	80073a8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007020:	2100      	movs	r1, #0
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 f8fe 	bl	8008224 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8007028:	f000 f9cc 	bl	80073c4 <xTaskResumeAll>
 800702c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d107      	bne.n	8007044 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <vTaskDelay+0x64>)
 8007036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	2000037c 	.word	0x2000037c
 8007050:	e000ed04 	.word	0xe000ed04

08007054 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800705c:	f001 fd14 	bl	8008a88 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d102      	bne.n	800706c <vTaskSuspend+0x18>
 8007066:	4b43      	ldr	r3, [pc, #268]	; (8007174 <vTaskSuspend+0x120>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	e000      	b.n	800706e <vTaskSuspend+0x1a>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	3304      	adds	r3, #4
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe feaf 	bl	8005dd8 <uxListRemove>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d115      	bne.n	80070ac <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007084:	493c      	ldr	r1, [pc, #240]	; (8007178 <vTaskSuspend+0x124>)
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	440b      	add	r3, r1
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10a      	bne.n	80070ac <vTaskSuspend+0x58>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	2201      	movs	r2, #1
 800709c:	fa02 f303 	lsl.w	r3, r2, r3
 80070a0:	43da      	mvns	r2, r3
 80070a2:	4b36      	ldr	r3, [pc, #216]	; (800717c <vTaskSuspend+0x128>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4013      	ands	r3, r2
 80070a8:	4a34      	ldr	r2, [pc, #208]	; (800717c <vTaskSuspend+0x128>)
 80070aa:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	3318      	adds	r3, #24
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe fe8d 	bl	8005dd8 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	3304      	adds	r3, #4
 80070c2:	4619      	mov	r1, r3
 80070c4:	482e      	ldr	r0, [pc, #184]	; (8007180 <vTaskSuspend+0x12c>)
 80070c6:	f7fe fe2a 	bl	8005d1e <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80070ca:	2300      	movs	r3, #0
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	e010      	b.n	80070f2 <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	4413      	add	r3, r2
 80070d6:	3354      	adds	r3, #84	; 0x54
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d105      	bne.n	80070ec <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	4413      	add	r3, r2
 80070e6:	3354      	adds	r3, #84	; 0x54
 80070e8:	2200      	movs	r2, #0
 80070ea:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	3301      	adds	r3, #1
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	ddeb      	ble.n	80070d0 <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 80070f8:	f001 fcf6 	bl	8008ae8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80070fc:	4b21      	ldr	r3, [pc, #132]	; (8007184 <vTaskSuspend+0x130>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d005      	beq.n	8007110 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8007104:	f001 fcc0 	bl	8008a88 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8007108:	f000 fe44 	bl	8007d94 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 800710c:	f001 fcec 	bl	8008ae8 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8007110:	4b18      	ldr	r3, [pc, #96]	; (8007174 <vTaskSuspend+0x120>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	429a      	cmp	r2, r3
 8007118:	d127      	bne.n	800716a <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 800711a:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <vTaskSuspend+0x130>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d017      	beq.n	8007152 <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8007122:	4b19      	ldr	r3, [pc, #100]	; (8007188 <vTaskSuspend+0x134>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <vTaskSuspend+0xec>
        __asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	60fb      	str	r3, [r7, #12]
    }
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8007140:	4b12      	ldr	r3, [pc, #72]	; (800718c <vTaskSuspend+0x138>)
 8007142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007150:	e00b      	b.n	800716a <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007152:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <vTaskSuspend+0x12c>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4b0e      	ldr	r3, [pc, #56]	; (8007190 <vTaskSuspend+0x13c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d103      	bne.n	8007166 <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 800715e:	4b05      	ldr	r3, [pc, #20]	; (8007174 <vTaskSuspend+0x120>)
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]
    }
 8007164:	e001      	b.n	800716a <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 8007166:	f000 fb5b 	bl	8007820 <vTaskSwitchContext>
    }
 800716a:	bf00      	nop
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	2000027c 	.word	0x2000027c
 8007178:	20000280 	.word	0x20000280
 800717c:	2000035c 	.word	0x2000035c
 8007180:	20000340 	.word	0x20000340
 8007184:	20000360 	.word	0x20000360
 8007188:	2000037c 	.word	0x2000037c
 800718c:	e000ed04 	.word	0xe000ed04
 8007190:	20000354 	.word	0x20000354

08007194 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10a      	bne.n	80071c0 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	60fb      	str	r3, [r7, #12]
    }
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	4a0a      	ldr	r2, [pc, #40]	; (80071f0 <prvTaskIsTaskSuspended+0x5c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d10a      	bne.n	80071e0 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	4a09      	ldr	r2, [pc, #36]	; (80071f4 <prvTaskIsTaskSuspended+0x60>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d005      	beq.n	80071e0 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 80071dc:	2301      	movs	r3, #1
 80071de:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80071e0:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80071e2:	4618      	mov	r0, r3
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	20000340 	.word	0x20000340
 80071f4:	20000314 	.word	0x20000314

080071f8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10a      	bne.n	8007220 <vTaskResume+0x28>
        __asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	60fb      	str	r3, [r7, #12]
    }
 800721c:	bf00      	nop
 800721e:	e7fe      	b.n	800721e <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007220:	4b34      	ldr	r3, [pc, #208]	; (80072f4 <vTaskResume+0xfc>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	429a      	cmp	r2, r3
 8007228:	d05f      	beq.n	80072ea <vTaskResume+0xf2>
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d05c      	beq.n	80072ea <vTaskResume+0xf2>
        {
            taskENTER_CRITICAL();
 8007230:	f001 fc2a 	bl	8008a88 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007234:	6978      	ldr	r0, [r7, #20]
 8007236:	f7ff ffad 	bl	8007194 <prvTaskIsTaskSuspended>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d052      	beq.n	80072e6 <vTaskResume+0xee>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	3304      	adds	r3, #4
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe fdc7 	bl	8005dd8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724e:	2201      	movs	r2, #1
 8007250:	409a      	lsls	r2, r3
 8007252:	4b29      	ldr	r3, [pc, #164]	; (80072f8 <vTaskResume+0x100>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4313      	orrs	r3, r2
 8007258:	4a27      	ldr	r2, [pc, #156]	; (80072f8 <vTaskResume+0x100>)
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007260:	4926      	ldr	r1, [pc, #152]	; (80072fc <vTaskResume+0x104>)
 8007262:	4613      	mov	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	440b      	add	r3, r1
 800726c:	3304      	adds	r3, #4
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	609a      	str	r2, [r3, #8]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	60da      	str	r2, [r3, #12]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	3204      	adds	r2, #4
 8007288:	605a      	str	r2, [r3, #4]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	1d1a      	adds	r2, r3, #4
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	609a      	str	r2, [r3, #8]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4a17      	ldr	r2, [pc, #92]	; (80072fc <vTaskResume+0x104>)
 80072a0:	441a      	add	r2, r3
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	615a      	str	r2, [r3, #20]
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072aa:	4914      	ldr	r1, [pc, #80]	; (80072fc <vTaskResume+0x104>)
 80072ac:	4613      	mov	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	440b      	add	r3, r1
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	1c59      	adds	r1, r3, #1
 80072ba:	4810      	ldr	r0, [pc, #64]	; (80072fc <vTaskResume+0x104>)
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4403      	add	r3, r0
 80072c6:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072cc:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <vTaskResume+0xfc>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d307      	bcc.n	80072e6 <vTaskResume+0xee>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 80072d6:	4b0a      	ldr	r3, [pc, #40]	; (8007300 <vTaskResume+0x108>)
 80072d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80072e6:	f001 fbff 	bl	8008ae8 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80072ea:	bf00      	nop
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	2000027c 	.word	0x2000027c
 80072f8:	2000035c 	.word	0x2000035c
 80072fc:	20000280 	.word	0x20000280
 8007300:	e000ed04 	.word	0xe000ed04

08007304 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800730a:	4b20      	ldr	r3, [pc, #128]	; (800738c <vTaskStartScheduler+0x88>)
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	2300      	movs	r3, #0
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	2300      	movs	r3, #0
 8007314:	2282      	movs	r2, #130	; 0x82
 8007316:	491e      	ldr	r1, [pc, #120]	; (8007390 <vTaskStartScheduler+0x8c>)
 8007318:	481e      	ldr	r0, [pc, #120]	; (8007394 <vTaskStartScheduler+0x90>)
 800731a:	f7ff fcfd 	bl	8006d18 <xTaskCreate>
 800731e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d102      	bne.n	800732c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8007326:	f000 fffd 	bl	8008324 <xTimerCreateTimerTask>
 800732a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d116      	bne.n	8007360 <vTaskStartScheduler+0x5c>
        __asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	60bb      	str	r3, [r7, #8]
    }
 8007344:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8007346:	4b14      	ldr	r3, [pc, #80]	; (8007398 <vTaskStartScheduler+0x94>)
 8007348:	f04f 32ff 	mov.w	r2, #4294967295
 800734c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800734e:	4b13      	ldr	r3, [pc, #76]	; (800739c <vTaskStartScheduler+0x98>)
 8007350:	2201      	movs	r2, #1
 8007352:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007354:	4b12      	ldr	r3, [pc, #72]	; (80073a0 <vTaskStartScheduler+0x9c>)
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800735a:	f001 faf3 	bl	8008944 <xPortStartScheduler>
 800735e:	e00e      	b.n	800737e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d10a      	bne.n	800737e <vTaskStartScheduler+0x7a>
        __asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	607b      	str	r3, [r7, #4]
    }
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800737e:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <vTaskStartScheduler+0xa0>)
 8007380:	681b      	ldr	r3, [r3, #0]
}
 8007382:	bf00      	nop
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20000378 	.word	0x20000378
 8007390:	08009118 	.word	0x08009118
 8007394:	08007c69 	.word	0x08007c69
 8007398:	20000374 	.word	0x20000374
 800739c:	20000360 	.word	0x20000360
 80073a0:	20000358 	.word	0x20000358
 80073a4:	20000014 	.word	0x20000014

080073a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80073ac:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <vTaskSuspendAll+0x18>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3301      	adds	r3, #1
 80073b2:	4a03      	ldr	r2, [pc, #12]	; (80073c0 <vTaskSuspendAll+0x18>)
 80073b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80073b6:	bf00      	nop
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	2000037c 	.word	0x2000037c

080073c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80073ce:	2300      	movs	r3, #0
 80073d0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80073d2:	4b71      	ldr	r3, [pc, #452]	; (8007598 <xTaskResumeAll+0x1d4>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <xTaskResumeAll+0x2c>
        __asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	607b      	str	r3, [r7, #4]
    }
 80073ec:	bf00      	nop
 80073ee:	e7fe      	b.n	80073ee <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80073f0:	f001 fb4a 	bl	8008a88 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80073f4:	4b68      	ldr	r3, [pc, #416]	; (8007598 <xTaskResumeAll+0x1d4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	4a67      	ldr	r2, [pc, #412]	; (8007598 <xTaskResumeAll+0x1d4>)
 80073fc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073fe:	4b66      	ldr	r3, [pc, #408]	; (8007598 <xTaskResumeAll+0x1d4>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	f040 80c0 	bne.w	8007588 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007408:	4b64      	ldr	r3, [pc, #400]	; (800759c <xTaskResumeAll+0x1d8>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 80bb 	beq.w	8007588 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007412:	e08a      	b.n	800752a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007414:	4b62      	ldr	r3, [pc, #392]	; (80075a0 <xTaskResumeAll+0x1dc>)
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	6a12      	ldr	r2, [r2, #32]
 800742a:	609a      	str	r2, [r3, #8]
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	69fa      	ldr	r2, [r7, #28]
 8007432:	69d2      	ldr	r2, [r2, #28]
 8007434:	605a      	str	r2, [r3, #4]
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	3318      	adds	r3, #24
 800743e:	429a      	cmp	r2, r3
 8007440:	d103      	bne.n	800744a <xTaskResumeAll+0x86>
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	6a1a      	ldr	r2, [r3, #32]
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	605a      	str	r2, [r3, #4]
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	2200      	movs	r2, #0
 800744e:	629a      	str	r2, [r3, #40]	; 0x28
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	1e5a      	subs	r2, r3, #1
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	68d2      	ldr	r2, [r2, #12]
 8007468:	609a      	str	r2, [r3, #8]
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	6892      	ldr	r2, [r2, #8]
 8007472:	605a      	str	r2, [r3, #4]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	3304      	adds	r3, #4
 800747c:	429a      	cmp	r2, r3
 800747e:	d103      	bne.n	8007488 <xTaskResumeAll+0xc4>
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	605a      	str	r2, [r3, #4]
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	2200      	movs	r2, #0
 800748c:	615a      	str	r2, [r3, #20]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	1e5a      	subs	r2, r3, #1
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	2201      	movs	r2, #1
 800749e:	409a      	lsls	r2, r3
 80074a0:	4b40      	ldr	r3, [pc, #256]	; (80075a4 <xTaskResumeAll+0x1e0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	4a3f      	ldr	r2, [pc, #252]	; (80075a4 <xTaskResumeAll+0x1e0>)
 80074a8:	6013      	str	r3, [r2, #0]
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ae:	493e      	ldr	r1, [pc, #248]	; (80075a8 <xTaskResumeAll+0x1e4>)
 80074b0:	4613      	mov	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	440b      	add	r3, r1
 80074ba:	3304      	adds	r3, #4
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60bb      	str	r3, [r7, #8]
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	609a      	str	r2, [r3, #8]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	60da      	str	r2, [r3, #12]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	3204      	adds	r2, #4
 80074d6:	605a      	str	r2, [r3, #4]
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	1d1a      	adds	r2, r3, #4
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	609a      	str	r2, [r3, #8]
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e4:	4613      	mov	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4a2e      	ldr	r2, [pc, #184]	; (80075a8 <xTaskResumeAll+0x1e4>)
 80074ee:	441a      	add	r2, r3
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	615a      	str	r2, [r3, #20]
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f8:	492b      	ldr	r1, [pc, #172]	; (80075a8 <xTaskResumeAll+0x1e4>)
 80074fa:	4613      	mov	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	440b      	add	r3, r1
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	1c59      	adds	r1, r3, #1
 8007508:	4827      	ldr	r0, [pc, #156]	; (80075a8 <xTaskResumeAll+0x1e4>)
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4403      	add	r3, r0
 8007514:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751a:	4b24      	ldr	r3, [pc, #144]	; (80075ac <xTaskResumeAll+0x1e8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	429a      	cmp	r2, r3
 8007522:	d302      	bcc.n	800752a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8007524:	4b22      	ldr	r3, [pc, #136]	; (80075b0 <xTaskResumeAll+0x1ec>)
 8007526:	2201      	movs	r2, #1
 8007528:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800752a:	4b1d      	ldr	r3, [pc, #116]	; (80075a0 <xTaskResumeAll+0x1dc>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f47f af70 	bne.w	8007414 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800753a:	f000 fc2b 	bl	8007d94 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800753e:	4b1d      	ldr	r3, [pc, #116]	; (80075b4 <xTaskResumeAll+0x1f0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d010      	beq.n	800756c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800754a:	f000 f853 	bl	80075f4 <xTaskIncrementTick>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8007554:	4b16      	ldr	r3, [pc, #88]	; (80075b0 <xTaskResumeAll+0x1ec>)
 8007556:	2201      	movs	r2, #1
 8007558:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	3b01      	subs	r3, #1
 800755e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1f1      	bne.n	800754a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8007566:	4b13      	ldr	r3, [pc, #76]	; (80075b4 <xTaskResumeAll+0x1f0>)
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800756c:	4b10      	ldr	r3, [pc, #64]	; (80075b0 <xTaskResumeAll+0x1ec>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d009      	beq.n	8007588 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8007574:	2301      	movs	r3, #1
 8007576:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007578:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <xTaskResumeAll+0x1f4>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007588:	f001 faae 	bl	8008ae8 <vPortExitCritical>

    return xAlreadyYielded;
 800758c:	69bb      	ldr	r3, [r7, #24]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	2000037c 	.word	0x2000037c
 800759c:	20000354 	.word	0x20000354
 80075a0:	20000314 	.word	0x20000314
 80075a4:	2000035c 	.word	0x2000035c
 80075a8:	20000280 	.word	0x20000280
 80075ac:	2000027c 	.word	0x2000027c
 80075b0:	20000368 	.word	0x20000368
 80075b4:	20000364 	.word	0x20000364
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80075c2:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <xTaskGetTickCount+0x1c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80075c8:	687b      	ldr	r3, [r7, #4]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	20000358 	.word	0x20000358

080075dc <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80075e0:	4b03      	ldr	r3, [pc, #12]	; (80075f0 <uxTaskGetNumberOfTasks+0x14>)
 80075e2:	681b      	ldr	r3, [r3, #0]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	20000354 	.word	0x20000354

080075f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08a      	sub	sp, #40	; 0x28
 80075f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075fe:	4b7d      	ldr	r3, [pc, #500]	; (80077f4 <xTaskIncrementTick+0x200>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f040 80ec 	bne.w	80077e0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007608:	4b7b      	ldr	r3, [pc, #492]	; (80077f8 <xTaskIncrementTick+0x204>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3301      	adds	r3, #1
 800760e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007610:	4a79      	ldr	r2, [pc, #484]	; (80077f8 <xTaskIncrementTick+0x204>)
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d120      	bne.n	800765e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800761c:	4b77      	ldr	r3, [pc, #476]	; (80077fc <xTaskIncrementTick+0x208>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <xTaskIncrementTick+0x48>
        __asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	607b      	str	r3, [r7, #4]
    }
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <xTaskIncrementTick+0x46>
 800763c:	4b6f      	ldr	r3, [pc, #444]	; (80077fc <xTaskIncrementTick+0x208>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	61fb      	str	r3, [r7, #28]
 8007642:	4b6f      	ldr	r3, [pc, #444]	; (8007800 <xTaskIncrementTick+0x20c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a6d      	ldr	r2, [pc, #436]	; (80077fc <xTaskIncrementTick+0x208>)
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	4a6d      	ldr	r2, [pc, #436]	; (8007800 <xTaskIncrementTick+0x20c>)
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	4b6c      	ldr	r3, [pc, #432]	; (8007804 <xTaskIncrementTick+0x210>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3301      	adds	r3, #1
 8007656:	4a6b      	ldr	r2, [pc, #428]	; (8007804 <xTaskIncrementTick+0x210>)
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	f000 fb9b 	bl	8007d94 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800765e:	4b6a      	ldr	r3, [pc, #424]	; (8007808 <xTaskIncrementTick+0x214>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6a3a      	ldr	r2, [r7, #32]
 8007664:	429a      	cmp	r2, r3
 8007666:	f0c0 80a6 	bcc.w	80077b6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800766a:	4b64      	ldr	r3, [pc, #400]	; (80077fc <xTaskIncrementTick+0x208>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d104      	bne.n	800767e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007674:	4b64      	ldr	r3, [pc, #400]	; (8007808 <xTaskIncrementTick+0x214>)
 8007676:	f04f 32ff 	mov.w	r2, #4294967295
 800767a:	601a      	str	r2, [r3, #0]
                    break;
 800767c:	e09b      	b.n	80077b6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800767e:	4b5f      	ldr	r3, [pc, #380]	; (80077fc <xTaskIncrementTick+0x208>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800768e:	6a3a      	ldr	r2, [r7, #32]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	429a      	cmp	r2, r3
 8007694:	d203      	bcs.n	800769e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007696:	4a5c      	ldr	r2, [pc, #368]	; (8007808 <xTaskIncrementTick+0x214>)
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800769c:	e08b      	b.n	80077b6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	68d2      	ldr	r2, [r2, #12]
 80076ac:	609a      	str	r2, [r3, #8]
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	6892      	ldr	r2, [r2, #8]
 80076b6:	605a      	str	r2, [r3, #4]
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	3304      	adds	r3, #4
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d103      	bne.n	80076cc <xTaskIncrementTick+0xd8>
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	605a      	str	r2, [r3, #4]
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	2200      	movs	r2, #0
 80076d0:	615a      	str	r2, [r3, #20]
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	1e5a      	subs	r2, r3, #1
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d01e      	beq.n	8007722 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	6a12      	ldr	r2, [r2, #32]
 80076f2:	609a      	str	r2, [r3, #8]
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	69d2      	ldr	r2, [r2, #28]
 80076fc:	605a      	str	r2, [r3, #4]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	3318      	adds	r3, #24
 8007706:	429a      	cmp	r2, r3
 8007708:	d103      	bne.n	8007712 <xTaskIncrementTick+0x11e>
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	6a1a      	ldr	r2, [r3, #32]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	605a      	str	r2, [r3, #4]
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	2200      	movs	r2, #0
 8007716:	629a      	str	r2, [r3, #40]	; 0x28
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	1e5a      	subs	r2, r3, #1
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	2201      	movs	r2, #1
 8007728:	409a      	lsls	r2, r3
 800772a:	4b38      	ldr	r3, [pc, #224]	; (800780c <xTaskIncrementTick+0x218>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4313      	orrs	r3, r2
 8007730:	4a36      	ldr	r2, [pc, #216]	; (800780c <xTaskIncrementTick+0x218>)
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007738:	4935      	ldr	r1, [pc, #212]	; (8007810 <xTaskIncrementTick+0x21c>)
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	440b      	add	r3, r1
 8007744:	3304      	adds	r3, #4
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	609a      	str	r2, [r3, #8]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	60da      	str	r2, [r3, #12]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	3204      	adds	r2, #4
 8007760:	605a      	str	r2, [r3, #4]
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	1d1a      	adds	r2, r3, #4
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	609a      	str	r2, [r3, #8]
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4a26      	ldr	r2, [pc, #152]	; (8007810 <xTaskIncrementTick+0x21c>)
 8007778:	441a      	add	r2, r3
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	615a      	str	r2, [r3, #20]
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007782:	4923      	ldr	r1, [pc, #140]	; (8007810 <xTaskIncrementTick+0x21c>)
 8007784:	4613      	mov	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	1c59      	adds	r1, r3, #1
 8007792:	481f      	ldr	r0, [pc, #124]	; (8007810 <xTaskIncrementTick+0x21c>)
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4403      	add	r3, r0
 800779e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a4:	4b1b      	ldr	r3, [pc, #108]	; (8007814 <xTaskIncrementTick+0x220>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	429a      	cmp	r2, r3
 80077ac:	f67f af5d 	bls.w	800766a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80077b0:	2301      	movs	r3, #1
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077b4:	e759      	b.n	800766a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077b6:	4b17      	ldr	r3, [pc, #92]	; (8007814 <xTaskIncrementTick+0x220>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077bc:	4914      	ldr	r1, [pc, #80]	; (8007810 <xTaskIncrementTick+0x21c>)
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d901      	bls.n	80077d2 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80077ce:	2301      	movs	r3, #1
 80077d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80077d2:	4b11      	ldr	r3, [pc, #68]	; (8007818 <xTaskIncrementTick+0x224>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d007      	beq.n	80077ea <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 80077da:	2301      	movs	r3, #1
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
 80077de:	e004      	b.n	80077ea <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80077e0:	4b0e      	ldr	r3, [pc, #56]	; (800781c <xTaskIncrementTick+0x228>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3301      	adds	r3, #1
 80077e6:	4a0d      	ldr	r2, [pc, #52]	; (800781c <xTaskIncrementTick+0x228>)
 80077e8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3728      	adds	r7, #40	; 0x28
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	2000037c 	.word	0x2000037c
 80077f8:	20000358 	.word	0x20000358
 80077fc:	2000030c 	.word	0x2000030c
 8007800:	20000310 	.word	0x20000310
 8007804:	2000036c 	.word	0x2000036c
 8007808:	20000374 	.word	0x20000374
 800780c:	2000035c 	.word	0x2000035c
 8007810:	20000280 	.word	0x20000280
 8007814:	2000027c 	.word	0x2000027c
 8007818:	20000368 	.word	0x20000368
 800781c:	20000364 	.word	0x20000364

08007820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007826:	4b27      	ldr	r3, [pc, #156]	; (80078c4 <vTaskSwitchContext+0xa4>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800782e:	4b26      	ldr	r3, [pc, #152]	; (80078c8 <vTaskSwitchContext+0xa8>)
 8007830:	2201      	movs	r2, #1
 8007832:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007834:	e03f      	b.n	80078b6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8007836:	4b24      	ldr	r3, [pc, #144]	; (80078c8 <vTaskSwitchContext+0xa8>)
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800783c:	4b23      	ldr	r3, [pc, #140]	; (80078cc <vTaskSwitchContext+0xac>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	fab3 f383 	clz	r3, r3
 8007848:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	f1c3 031f 	rsb	r3, r3, #31
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	491f      	ldr	r1, [pc, #124]	; (80078d0 <vTaskSwitchContext+0xb0>)
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10a      	bne.n	800787c <vTaskSwitchContext+0x5c>
        __asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	607b      	str	r3, [r7, #4]
    }
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <vTaskSwitchContext+0x5a>
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	4613      	mov	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4a12      	ldr	r2, [pc, #72]	; (80078d0 <vTaskSwitchContext+0xb0>)
 8007888:	4413      	add	r3, r2
 800788a:	613b      	str	r3, [r7, #16]
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	605a      	str	r2, [r3, #4]
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	3308      	adds	r3, #8
 800789e:	429a      	cmp	r2, r3
 80078a0:	d104      	bne.n	80078ac <vTaskSwitchContext+0x8c>
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	605a      	str	r2, [r3, #4]
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	4a08      	ldr	r2, [pc, #32]	; (80078d4 <vTaskSwitchContext+0xb4>)
 80078b4:	6013      	str	r3, [r2, #0]
}
 80078b6:	bf00      	nop
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	2000037c 	.word	0x2000037c
 80078c8:	20000368 	.word	0x20000368
 80078cc:	2000035c 	.word	0x2000035c
 80078d0:	20000280 	.word	0x20000280
 80078d4:	2000027c 	.word	0x2000027c

080078d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10a      	bne.n	80078fe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	60fb      	str	r3, [r7, #12]
    }
 80078fa:	bf00      	nop
 80078fc:	e7fe      	b.n	80078fc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078fe:	4b07      	ldr	r3, [pc, #28]	; (800791c <vTaskPlaceOnEventList+0x44>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3318      	adds	r3, #24
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fe fa2d 	bl	8005d66 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800790c:	2101      	movs	r1, #1
 800790e:	6838      	ldr	r0, [r7, #0]
 8007910:	f000 fc88 	bl	8008224 <prvAddCurrentTaskToDelayedList>
}
 8007914:	bf00      	nop
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	2000027c 	.word	0x2000027c

08007920 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	613b      	str	r3, [r7, #16]
    }
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	4b16      	ldr	r3, [pc, #88]	; (80079a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	61da      	str	r2, [r3, #28]
 8007956:	4b14      	ldr	r3, [pc, #80]	; (80079a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	6892      	ldr	r2, [r2, #8]
 800795e:	621a      	str	r2, [r3, #32]
 8007960:	4b11      	ldr	r3, [pc, #68]	; (80079a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	3218      	adds	r2, #24
 800796a:	605a      	str	r2, [r3, #4]
 800796c:	4b0e      	ldr	r3, [pc, #56]	; (80079a8 <vTaskPlaceOnEventListRestricted+0x88>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f103 0218 	add.w	r2, r3, #24
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	609a      	str	r2, [r3, #8]
 8007978:	4b0b      	ldr	r3, [pc, #44]	; (80079a8 <vTaskPlaceOnEventListRestricted+0x88>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	629a      	str	r2, [r3, #40]	; 0x28
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8007990:	f04f 33ff 	mov.w	r3, #4294967295
 8007994:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	68b8      	ldr	r0, [r7, #8]
 800799a:	f000 fc43 	bl	8008224 <prvAddCurrentTaskToDelayedList>
    }
 800799e:	bf00      	nop
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	2000027c 	.word	0x2000027c

080079ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b08b      	sub	sp, #44	; 0x2c
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	60fb      	str	r3, [r7, #12]
    }
 80079d4:	bf00      	nop
 80079d6:	e7fe      	b.n	80079d6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079dc:	61fb      	str	r3, [r7, #28]
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	6a3a      	ldr	r2, [r7, #32]
 80079e4:	6a12      	ldr	r2, [r2, #32]
 80079e6:	609a      	str	r2, [r3, #8]
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	6a3a      	ldr	r2, [r7, #32]
 80079ee:	69d2      	ldr	r2, [r2, #28]
 80079f0:	605a      	str	r2, [r3, #4]
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	3318      	adds	r3, #24
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d103      	bne.n	8007a06 <xTaskRemoveFromEventList+0x5a>
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	6a1a      	ldr	r2, [r3, #32]
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	605a      	str	r2, [r3, #4]
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	1e5a      	subs	r2, r3, #1
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a16:	4b4a      	ldr	r3, [pc, #296]	; (8007b40 <xTaskRemoveFromEventList+0x194>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d15e      	bne.n	8007adc <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	6a3a      	ldr	r2, [r7, #32]
 8007a2a:	68d2      	ldr	r2, [r2, #12]
 8007a2c:	609a      	str	r2, [r3, #8]
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	6a3a      	ldr	r2, [r7, #32]
 8007a34:	6892      	ldr	r2, [r2, #8]
 8007a36:	605a      	str	r2, [r3, #4]
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	3304      	adds	r3, #4
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d103      	bne.n	8007a4c <xTaskRemoveFromEventList+0xa0>
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	605a      	str	r2, [r3, #4]
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	615a      	str	r2, [r3, #20]
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	1e5a      	subs	r2, r3, #1
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	2201      	movs	r2, #1
 8007a62:	409a      	lsls	r2, r3
 8007a64:	4b37      	ldr	r3, [pc, #220]	; (8007b44 <xTaskRemoveFromEventList+0x198>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	4a36      	ldr	r2, [pc, #216]	; (8007b44 <xTaskRemoveFromEventList+0x198>)
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a72:	4935      	ldr	r1, [pc, #212]	; (8007b48 <xTaskRemoveFromEventList+0x19c>)
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	3304      	adds	r3, #4
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	609a      	str	r2, [r3, #8]
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	689a      	ldr	r2, [r3, #8]
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	60da      	str	r2, [r3, #12]
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	6a3a      	ldr	r2, [r7, #32]
 8007a98:	3204      	adds	r2, #4
 8007a9a:	605a      	str	r2, [r3, #4]
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	1d1a      	adds	r2, r3, #4
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	609a      	str	r2, [r3, #8]
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4a25      	ldr	r2, [pc, #148]	; (8007b48 <xTaskRemoveFromEventList+0x19c>)
 8007ab2:	441a      	add	r2, r3
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	615a      	str	r2, [r3, #20]
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abc:	4922      	ldr	r1, [pc, #136]	; (8007b48 <xTaskRemoveFromEventList+0x19c>)
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	440b      	add	r3, r1
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	1c59      	adds	r1, r3, #1
 8007acc:	481e      	ldr	r0, [pc, #120]	; (8007b48 <xTaskRemoveFromEventList+0x19c>)
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4403      	add	r3, r0
 8007ad8:	6019      	str	r1, [r3, #0]
 8007ada:	e01b      	b.n	8007b14 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007adc:	4b1b      	ldr	r3, [pc, #108]	; (8007b4c <xTaskRemoveFromEventList+0x1a0>)
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	61da      	str	r2, [r3, #28]
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	621a      	str	r2, [r3, #32]
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	6a3a      	ldr	r2, [r7, #32]
 8007af6:	3218      	adds	r2, #24
 8007af8:	605a      	str	r2, [r3, #4]
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	f103 0218 	add.w	r2, r3, #24
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	609a      	str	r2, [r3, #8]
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	4a11      	ldr	r2, [pc, #68]	; (8007b4c <xTaskRemoveFromEventList+0x1a0>)
 8007b08:	629a      	str	r2, [r3, #40]	; 0x28
 8007b0a:	4b10      	ldr	r3, [pc, #64]	; (8007b4c <xTaskRemoveFromEventList+0x1a0>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	4a0e      	ldr	r2, [pc, #56]	; (8007b4c <xTaskRemoveFromEventList+0x1a0>)
 8007b12:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b18:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <xTaskRemoveFromEventList+0x1a4>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d905      	bls.n	8007b2e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007b22:	2301      	movs	r3, #1
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <xTaskRemoveFromEventList+0x1a8>)
 8007b28:	2201      	movs	r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	e001      	b.n	8007b32 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	372c      	adds	r7, #44	; 0x2c
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	2000037c 	.word	0x2000037c
 8007b44:	2000035c 	.word	0x2000035c
 8007b48:	20000280 	.word	0x20000280
 8007b4c:	20000314 	.word	0x20000314
 8007b50:	2000027c 	.word	0x2000027c
 8007b54:	20000368 	.word	0x20000368

08007b58 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b60:	4b06      	ldr	r3, [pc, #24]	; (8007b7c <vTaskInternalSetTimeOutState+0x24>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007b68:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <vTaskInternalSetTimeOutState+0x28>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	605a      	str	r2, [r3, #4]
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	2000036c 	.word	0x2000036c
 8007b80:	20000358 	.word	0x20000358

08007b84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b088      	sub	sp, #32
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	613b      	str	r3, [r7, #16]
    }
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10a      	bne.n	8007bc6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	60fb      	str	r3, [r7, #12]
    }
 8007bc2:	bf00      	nop
 8007bc4:	e7fe      	b.n	8007bc4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8007bc6:	f000 ff5f 	bl	8008a88 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007bca:	4b1f      	ldr	r3, [pc, #124]	; (8007c48 <xTaskCheckForTimeOut+0xc4>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be2:	d102      	bne.n	8007bea <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007be4:	2300      	movs	r3, #0
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	e026      	b.n	8007c38 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	4b17      	ldr	r3, [pc, #92]	; (8007c4c <xTaskCheckForTimeOut+0xc8>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d00a      	beq.n	8007c0c <xTaskCheckForTimeOut+0x88>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d305      	bcc.n	8007c0c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007c00:	2301      	movs	r3, #1
 8007c02:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	e015      	b.n	8007c38 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d20b      	bcs.n	8007c2e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	1ad2      	subs	r2, r2, r3
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff ff98 	bl	8007b58 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	61fb      	str	r3, [r7, #28]
 8007c2c:	e004      	b.n	8007c38 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007c34:	2301      	movs	r3, #1
 8007c36:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007c38:	f000 ff56 	bl	8008ae8 <vPortExitCritical>

    return xReturn;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3720      	adds	r7, #32
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000358 	.word	0x20000358
 8007c4c:	2000036c 	.word	0x2000036c

08007c50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c50:	b480      	push	{r7}
 8007c52:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007c54:	4b03      	ldr	r3, [pc, #12]	; (8007c64 <vTaskMissedYield+0x14>)
 8007c56:	2201      	movs	r2, #1
 8007c58:	601a      	str	r2, [r3, #0]
}
 8007c5a:	bf00      	nop
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	20000368 	.word	0x20000368

08007c68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007c70:	f000 f852 	bl	8007d18 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <prvIdleTask+0x28>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d9f9      	bls.n	8007c70 <prvIdleTask+0x8>
            {
                taskYIELD();
 8007c7c:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <prvIdleTask+0x2c>)
 8007c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007c8c:	e7f0      	b.n	8007c70 <prvIdleTask+0x8>
 8007c8e:	bf00      	nop
 8007c90:	20000280 	.word	0x20000280
 8007c94:	e000ed04 	.word	0xe000ed04

08007c98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	607b      	str	r3, [r7, #4]
 8007ca2:	e00c      	b.n	8007cbe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4a12      	ldr	r2, [pc, #72]	; (8007cf8 <prvInitialiseTaskLists+0x60>)
 8007cb0:	4413      	add	r3, r2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe f806 	bl	8005cc4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	607b      	str	r3, [r7, #4]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d9ef      	bls.n	8007ca4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007cc4:	480d      	ldr	r0, [pc, #52]	; (8007cfc <prvInitialiseTaskLists+0x64>)
 8007cc6:	f7fd fffd 	bl	8005cc4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007cca:	480d      	ldr	r0, [pc, #52]	; (8007d00 <prvInitialiseTaskLists+0x68>)
 8007ccc:	f7fd fffa 	bl	8005cc4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007cd0:	480c      	ldr	r0, [pc, #48]	; (8007d04 <prvInitialiseTaskLists+0x6c>)
 8007cd2:	f7fd fff7 	bl	8005cc4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8007cd6:	480c      	ldr	r0, [pc, #48]	; (8007d08 <prvInitialiseTaskLists+0x70>)
 8007cd8:	f7fd fff4 	bl	8005cc4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8007cdc:	480b      	ldr	r0, [pc, #44]	; (8007d0c <prvInitialiseTaskLists+0x74>)
 8007cde:	f7fd fff1 	bl	8005cc4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007ce2:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <prvInitialiseTaskLists+0x78>)
 8007ce4:	4a05      	ldr	r2, [pc, #20]	; (8007cfc <prvInitialiseTaskLists+0x64>)
 8007ce6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ce8:	4b0a      	ldr	r3, [pc, #40]	; (8007d14 <prvInitialiseTaskLists+0x7c>)
 8007cea:	4a05      	ldr	r2, [pc, #20]	; (8007d00 <prvInitialiseTaskLists+0x68>)
 8007cec:	601a      	str	r2, [r3, #0]
}
 8007cee:	bf00      	nop
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000280 	.word	0x20000280
 8007cfc:	200002e4 	.word	0x200002e4
 8007d00:	200002f8 	.word	0x200002f8
 8007d04:	20000314 	.word	0x20000314
 8007d08:	20000328 	.word	0x20000328
 8007d0c:	20000340 	.word	0x20000340
 8007d10:	2000030c 	.word	0x2000030c
 8007d14:	20000310 	.word	0x20000310

08007d18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d1e:	e019      	b.n	8007d54 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8007d20:	f000 feb2 	bl	8008a88 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d24:	4b10      	ldr	r3, [pc, #64]	; (8007d68 <prvCheckTasksWaitingTermination+0x50>)
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe f851 	bl	8005dd8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8007d36:	4b0d      	ldr	r3, [pc, #52]	; (8007d6c <prvCheckTasksWaitingTermination+0x54>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	4a0b      	ldr	r2, [pc, #44]	; (8007d6c <prvCheckTasksWaitingTermination+0x54>)
 8007d3e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8007d40:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <prvCheckTasksWaitingTermination+0x58>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	4a0a      	ldr	r2, [pc, #40]	; (8007d70 <prvCheckTasksWaitingTermination+0x58>)
 8007d48:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8007d4a:	f000 fecd 	bl	8008ae8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f810 	bl	8007d74 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d54:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <prvCheckTasksWaitingTermination+0x58>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e1      	bne.n	8007d20 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20000328 	.word	0x20000328
 8007d6c:	20000354 	.word	0x20000354
 8007d70:	2000033c 	.word	0x2000033c

08007d74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 f85d 	bl	8008e40 <vPortFree>
            vPortFree( pxTCB );
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f001 f85a 	bl	8008e40 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d98:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <prvResetNextTaskUnblockTime+0x30>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d104      	bne.n	8007dac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007da2:	4b09      	ldr	r3, [pc, #36]	; (8007dc8 <prvResetNextTaskUnblockTime+0x34>)
 8007da4:	f04f 32ff 	mov.w	r2, #4294967295
 8007da8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007daa:	e005      	b.n	8007db8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007dac:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <prvResetNextTaskUnblockTime+0x30>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a04      	ldr	r2, [pc, #16]	; (8007dc8 <prvResetNextTaskUnblockTime+0x34>)
 8007db6:	6013      	str	r3, [r2, #0]
}
 8007db8:	bf00      	nop
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	2000030c 	.word	0x2000030c
 8007dc8:	20000374 	.word	0x20000374

08007dcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007dd2:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <xTaskGetSchedulerState+0x34>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d102      	bne.n	8007de0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	e008      	b.n	8007df2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007de0:	4b08      	ldr	r3, [pc, #32]	; (8007e04 <xTaskGetSchedulerState+0x38>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d102      	bne.n	8007dee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007de8:	2302      	movs	r3, #2
 8007dea:	607b      	str	r3, [r7, #4]
 8007dec:	e001      	b.n	8007df2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007dee:	2300      	movs	r3, #0
 8007df0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007df2:	687b      	ldr	r3, [r7, #4]
    }
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	20000360 	.word	0x20000360
 8007e04:	2000037c 	.word	0x2000037c

08007e08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007e14:	2300      	movs	r3, #0
 8007e16:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 8087 	beq.w	8007f2e <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e24:	4b44      	ldr	r3, [pc, #272]	; (8007f38 <xTaskPriorityInherit+0x130>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d276      	bcs.n	8007f1c <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	db06      	blt.n	8007e44 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e36:	4b40      	ldr	r3, [pc, #256]	; (8007f38 <xTaskPriorityInherit+0x130>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3c:	f1c3 0205 	rsb	r2, r3, #5
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	6959      	ldr	r1, [r3, #20]
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4a39      	ldr	r2, [pc, #228]	; (8007f3c <xTaskPriorityInherit+0x134>)
 8007e56:	4413      	add	r3, r2
 8007e58:	4299      	cmp	r1, r3
 8007e5a:	d157      	bne.n	8007f0c <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fd ffb9 	bl	8005dd8 <uxListRemove>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10a      	bne.n	8007e82 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	2201      	movs	r2, #1
 8007e72:	fa02 f303 	lsl.w	r3, r2, r3
 8007e76:	43da      	mvns	r2, r3
 8007e78:	4b31      	ldr	r3, [pc, #196]	; (8007f40 <xTaskPriorityInherit+0x138>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	4a30      	ldr	r2, [pc, #192]	; (8007f40 <xTaskPriorityInherit+0x138>)
 8007e80:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e82:	4b2d      	ldr	r3, [pc, #180]	; (8007f38 <xTaskPriorityInherit+0x130>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	2201      	movs	r2, #1
 8007e92:	409a      	lsls	r2, r3
 8007e94:	4b2a      	ldr	r3, [pc, #168]	; (8007f40 <xTaskPriorityInherit+0x138>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	4a29      	ldr	r2, [pc, #164]	; (8007f40 <xTaskPriorityInherit+0x138>)
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea2:	4926      	ldr	r1, [pc, #152]	; (8007f3c <xTaskPriorityInherit+0x134>)
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	440b      	add	r3, r1
 8007eae:	3304      	adds	r3, #4
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	609a      	str	r2, [r3, #8]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	60da      	str	r2, [r3, #12]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	3204      	adds	r2, #4
 8007eca:	605a      	str	r2, [r3, #4]
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	1d1a      	adds	r2, r3, #4
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	609a      	str	r2, [r3, #8]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4a16      	ldr	r2, [pc, #88]	; (8007f3c <xTaskPriorityInherit+0x134>)
 8007ee2:	441a      	add	r2, r3
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	615a      	str	r2, [r3, #20]
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eec:	4913      	ldr	r1, [pc, #76]	; (8007f3c <xTaskPriorityInherit+0x134>)
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	1c59      	adds	r1, r3, #1
 8007efc:	480f      	ldr	r0, [pc, #60]	; (8007f3c <xTaskPriorityInherit+0x134>)
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4403      	add	r3, r0
 8007f08:	6019      	str	r1, [r3, #0]
 8007f0a:	e004      	b.n	8007f16 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	; (8007f38 <xTaskPriorityInherit+0x130>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8007f16:	2301      	movs	r3, #1
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	e008      	b.n	8007f2e <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f20:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <xTaskPriorityInherit+0x130>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d201      	bcs.n	8007f2e <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007f2e:	697b      	ldr	r3, [r7, #20]
    }
 8007f30:	4618      	mov	r0, r3
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	2000027c 	.word	0x2000027c
 8007f3c:	20000280 	.word	0x20000280
 8007f40:	2000035c 	.word	0x2000035c

08007f44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 808c 	beq.w	8008074 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007f5c:	4b48      	ldr	r3, [pc, #288]	; (8008080 <xTaskPriorityDisinherit+0x13c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d00a      	beq.n	8007f7c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	613b      	str	r3, [r7, #16]
    }
 8007f78:	bf00      	nop
 8007f7a:	e7fe      	b.n	8007f7a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10a      	bne.n	8007f9a <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	60fb      	str	r3, [r7, #12]
    }
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f9e:	1e5a      	subs	r2, r3, #1
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d061      	beq.n	8008074 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d15d      	bne.n	8008074 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fd ff0b 	bl	8005dd8 <uxListRemove>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fcc:	2201      	movs	r2, #1
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	43da      	mvns	r2, r3
 8007fd4:	4b2b      	ldr	r3, [pc, #172]	; (8008084 <xTaskPriorityDisinherit+0x140>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	4a2a      	ldr	r2, [pc, #168]	; (8008084 <xTaskPriorityDisinherit+0x140>)
 8007fdc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fea:	f1c3 0205 	rsb	r2, r3, #5
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	409a      	lsls	r2, r3
 8007ffa:	4b22      	ldr	r3, [pc, #136]	; (8008084 <xTaskPriorityDisinherit+0x140>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	4a20      	ldr	r2, [pc, #128]	; (8008084 <xTaskPriorityDisinherit+0x140>)
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	491f      	ldr	r1, [pc, #124]	; (8008088 <xTaskPriorityDisinherit+0x144>)
 800800a:	4613      	mov	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	440b      	add	r3, r1
 8008014:	3304      	adds	r3, #4
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	617b      	str	r3, [r7, #20]
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	609a      	str	r2, [r3, #8]
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	60da      	str	r2, [r3, #12]
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	3204      	adds	r2, #4
 8008030:	605a      	str	r2, [r3, #4]
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	1d1a      	adds	r2, r3, #4
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	609a      	str	r2, [r3, #8]
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4a10      	ldr	r2, [pc, #64]	; (8008088 <xTaskPriorityDisinherit+0x144>)
 8008048:	441a      	add	r2, r3
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	615a      	str	r2, [r3, #20]
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008052:	490d      	ldr	r1, [pc, #52]	; (8008088 <xTaskPriorityDisinherit+0x144>)
 8008054:	4613      	mov	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	440b      	add	r3, r1
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	1c59      	adds	r1, r3, #1
 8008062:	4809      	ldr	r0, [pc, #36]	; (8008088 <xTaskPriorityDisinherit+0x144>)
 8008064:	4613      	mov	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4403      	add	r3, r0
 800806e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8008070:	2301      	movs	r3, #1
 8008072:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008074:	69fb      	ldr	r3, [r7, #28]
    }
 8008076:	4618      	mov	r0, r3
 8008078:	3720      	adds	r7, #32
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	2000027c 	.word	0x2000027c
 8008084:	2000035c 	.word	0x2000035c
 8008088:	20000280 	.word	0x20000280

0800808c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800808c:	b580      	push	{r7, lr}
 800808e:	b08a      	sub	sp, #40	; 0x28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800809a:	2301      	movs	r3, #1
 800809c:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 80a1 	beq.w	80081e8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	613b      	str	r3, [r7, #16]
    }
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d902      	bls.n	80080d4 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	627b      	str	r3, [r7, #36]	; 0x24
 80080d2:	e002      	b.n	80080da <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80080d4:	6a3b      	ldr	r3, [r7, #32]
 80080d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e0:	429a      	cmp	r2, r3
 80080e2:	f000 8081 	beq.w	80081e8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ea:	69fa      	ldr	r2, [r7, #28]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d17b      	bne.n	80081e8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80080f0:	4b3f      	ldr	r3, [pc, #252]	; (80081f0 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6a3a      	ldr	r2, [r7, #32]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d10a      	bne.n	8008110 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	60fb      	str	r3, [r7, #12]
    }
 800810c:	bf00      	nop
 800810e:	e7fe      	b.n	800810e <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	2b00      	cmp	r3, #0
 8008122:	db04      	blt.n	800812e <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	f1c3 0205 	rsb	r2, r3, #5
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	6959      	ldr	r1, [r3, #20]
 8008132:	69ba      	ldr	r2, [r7, #24]
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4a2d      	ldr	r2, [pc, #180]	; (80081f4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800813e:	4413      	add	r3, r2
 8008140:	4299      	cmp	r1, r3
 8008142:	d151      	bne.n	80081e8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	3304      	adds	r3, #4
 8008148:	4618      	mov	r0, r3
 800814a:	f7fd fe45 	bl	8005dd8 <uxListRemove>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10a      	bne.n	800816a <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	2201      	movs	r2, #1
 800815a:	fa02 f303 	lsl.w	r3, r2, r3
 800815e:	43da      	mvns	r2, r3
 8008160:	4b25      	ldr	r3, [pc, #148]	; (80081f8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4013      	ands	r3, r2
 8008166:	4a24      	ldr	r2, [pc, #144]	; (80081f8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8008168:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	2201      	movs	r2, #1
 8008170:	409a      	lsls	r2, r3
 8008172:	4b21      	ldr	r3, [pc, #132]	; (80081f8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4313      	orrs	r3, r2
 8008178:	4a1f      	ldr	r2, [pc, #124]	; (80081f8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008180:	491c      	ldr	r1, [pc, #112]	; (80081f4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8008182:	4613      	mov	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	440b      	add	r3, r1
 800818c:	3304      	adds	r3, #4
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	617b      	str	r3, [r7, #20]
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	609a      	str	r2, [r3, #8]
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	60da      	str	r2, [r3, #12]
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	6a3a      	ldr	r2, [r7, #32]
 80081a6:	3204      	adds	r2, #4
 80081a8:	605a      	str	r2, [r3, #4]
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	1d1a      	adds	r2, r3, #4
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	609a      	str	r2, [r3, #8]
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4a0d      	ldr	r2, [pc, #52]	; (80081f4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80081c0:	441a      	add	r2, r3
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	615a      	str	r2, [r3, #20]
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ca:	490a      	ldr	r1, [pc, #40]	; (80081f4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80081cc:	4613      	mov	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4413      	add	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	440b      	add	r3, r1
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	1c59      	adds	r1, r3, #1
 80081da:	4806      	ldr	r0, [pc, #24]	; (80081f4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4403      	add	r3, r0
 80081e6:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80081e8:	bf00      	nop
 80081ea:	3728      	adds	r7, #40	; 0x28
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	2000027c 	.word	0x2000027c
 80081f4:	20000280 	.word	0x20000280
 80081f8:	2000035c 	.word	0x2000035c

080081fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8008200:	4b07      	ldr	r3, [pc, #28]	; (8008220 <pvTaskIncrementMutexHeldCount+0x24>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d004      	beq.n	8008212 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8008208:	4b05      	ldr	r3, [pc, #20]	; (8008220 <pvTaskIncrementMutexHeldCount+0x24>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800820e:	3201      	adds	r2, #1
 8008210:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8008212:	4b03      	ldr	r3, [pc, #12]	; (8008220 <pvTaskIncrementMutexHeldCount+0x24>)
 8008214:	681b      	ldr	r3, [r3, #0]
    }
 8008216:	4618      	mov	r0, r3
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	2000027c 	.word	0x2000027c

08008224 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800822e:	4b36      	ldr	r3, [pc, #216]	; (8008308 <prvAddCurrentTaskToDelayedList+0xe4>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008234:	4b35      	ldr	r3, [pc, #212]	; (800830c <prvAddCurrentTaskToDelayedList+0xe8>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3304      	adds	r3, #4
 800823a:	4618      	mov	r0, r3
 800823c:	f7fd fdcc 	bl	8005dd8 <uxListRemove>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10b      	bne.n	800825e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008246:	4b31      	ldr	r3, [pc, #196]	; (800830c <prvAddCurrentTaskToDelayedList+0xe8>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	2201      	movs	r2, #1
 800824e:	fa02 f303 	lsl.w	r3, r2, r3
 8008252:	43da      	mvns	r2, r3
 8008254:	4b2e      	ldr	r3, [pc, #184]	; (8008310 <prvAddCurrentTaskToDelayedList+0xec>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4013      	ands	r3, r2
 800825a:	4a2d      	ldr	r2, [pc, #180]	; (8008310 <prvAddCurrentTaskToDelayedList+0xec>)
 800825c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008264:	d124      	bne.n	80082b0 <prvAddCurrentTaskToDelayedList+0x8c>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d021      	beq.n	80082b0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800826c:	4b29      	ldr	r3, [pc, #164]	; (8008314 <prvAddCurrentTaskToDelayedList+0xf0>)
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	4b26      	ldr	r3, [pc, #152]	; (800830c <prvAddCurrentTaskToDelayedList+0xe8>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	609a      	str	r2, [r3, #8]
 800827a:	4b24      	ldr	r3, [pc, #144]	; (800830c <prvAddCurrentTaskToDelayedList+0xe8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	6892      	ldr	r2, [r2, #8]
 8008282:	60da      	str	r2, [r3, #12]
 8008284:	4b21      	ldr	r3, [pc, #132]	; (800830c <prvAddCurrentTaskToDelayedList+0xe8>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	3204      	adds	r2, #4
 800828e:	605a      	str	r2, [r3, #4]
 8008290:	4b1e      	ldr	r3, [pc, #120]	; (800830c <prvAddCurrentTaskToDelayedList+0xe8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	1d1a      	adds	r2, r3, #4
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	609a      	str	r2, [r3, #8]
 800829a:	4b1c      	ldr	r3, [pc, #112]	; (800830c <prvAddCurrentTaskToDelayedList+0xe8>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a1d      	ldr	r2, [pc, #116]	; (8008314 <prvAddCurrentTaskToDelayedList+0xf0>)
 80082a0:	615a      	str	r2, [r3, #20]
 80082a2:	4b1c      	ldr	r3, [pc, #112]	; (8008314 <prvAddCurrentTaskToDelayedList+0xf0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3301      	adds	r3, #1
 80082a8:	4a1a      	ldr	r2, [pc, #104]	; (8008314 <prvAddCurrentTaskToDelayedList+0xf0>)
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80082ae:	e026      	b.n	80082fe <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4413      	add	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082b8:	4b14      	ldr	r3, [pc, #80]	; (800830c <prvAddCurrentTaskToDelayedList+0xe8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d209      	bcs.n	80082dc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082c8:	4b13      	ldr	r3, [pc, #76]	; (8008318 <prvAddCurrentTaskToDelayedList+0xf4>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	4b0f      	ldr	r3, [pc, #60]	; (800830c <prvAddCurrentTaskToDelayedList+0xe8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7fd fd46 	bl	8005d66 <vListInsert>
}
 80082da:	e010      	b.n	80082fe <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082dc:	4b0f      	ldr	r3, [pc, #60]	; (800831c <prvAddCurrentTaskToDelayedList+0xf8>)
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	4b0a      	ldr	r3, [pc, #40]	; (800830c <prvAddCurrentTaskToDelayedList+0xe8>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3304      	adds	r3, #4
 80082e6:	4619      	mov	r1, r3
 80082e8:	4610      	mov	r0, r2
 80082ea:	f7fd fd3c 	bl	8005d66 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80082ee:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <prvAddCurrentTaskToDelayedList+0xfc>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d202      	bcs.n	80082fe <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80082f8:	4a09      	ldr	r2, [pc, #36]	; (8008320 <prvAddCurrentTaskToDelayedList+0xfc>)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6013      	str	r3, [r2, #0]
}
 80082fe:	bf00      	nop
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000358 	.word	0x20000358
 800830c:	2000027c 	.word	0x2000027c
 8008310:	2000035c 	.word	0x2000035c
 8008314:	20000340 	.word	0x20000340
 8008318:	20000310 	.word	0x20000310
 800831c:	2000030c 	.word	0x2000030c
 8008320:	20000374 	.word	0x20000374

08008324 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800832a:	2300      	movs	r3, #0
 800832c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800832e:	f000 fa47 	bl	80087c0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8008332:	4b11      	ldr	r3, [pc, #68]	; (8008378 <xTimerCreateTimerTask+0x54>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00b      	beq.n	8008352 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800833a:	4b10      	ldr	r3, [pc, #64]	; (800837c <xTimerCreateTimerTask+0x58>)
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	2302      	movs	r3, #2
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	2300      	movs	r3, #0
 8008344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008348:	490d      	ldr	r1, [pc, #52]	; (8008380 <xTimerCreateTimerTask+0x5c>)
 800834a:	480e      	ldr	r0, [pc, #56]	; (8008384 <xTimerCreateTimerTask+0x60>)
 800834c:	f7fe fce4 	bl	8006d18 <xTaskCreate>
 8008350:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10a      	bne.n	800836e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	603b      	str	r3, [r7, #0]
    }
 800836a:	bf00      	nop
 800836c:	e7fe      	b.n	800836c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800836e:	687b      	ldr	r3, [r7, #4]
    }
 8008370:	4618      	mov	r0, r3
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	200003b0 	.word	0x200003b0
 800837c:	200003b4 	.word	0x200003b4
 8008380:	08009120 	.word	0x08009120
 8008384:	0800842d 	.word	0x0800842d

08008388 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8008394:	e008      	b.n	80083a8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	4413      	add	r3, r2
 800839e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	699a      	ldr	r2, [r3, #24]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	18d1      	adds	r1, r2, r3
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 f8dd 	bl	8008574 <prvInsertTimerInActiveList>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1ea      	bne.n	8008396 <prvReloadTimer+0xe>
        }
    }
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d6:	4b14      	ldr	r3, [pc, #80]	; (8008428 <prvProcessExpiredTimer+0x5c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3304      	adds	r3, #4
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fd fcf7 	bl	8005dd8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	6879      	ldr	r1, [r7, #4]
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f7ff ffc3 	bl	8008388 <prvReloadTimer>
 8008402:	e008      	b.n	8008416 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800840a:	f023 0301 	bic.w	r3, r3, #1
 800840e:	b2da      	uxtb	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	4798      	blx	r3
    }
 800841e:	bf00      	nop
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	200003a8 	.word	0x200003a8

0800842c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008434:	f107 0308 	add.w	r3, r7, #8
 8008438:	4618      	mov	r0, r3
 800843a:	f000 f857 	bl	80084ec <prvGetNextExpireTime>
 800843e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	4619      	mov	r1, r3
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 f803 	bl	8008450 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800844a:	f000 f8d5 	bl	80085f8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800844e:	e7f1      	b.n	8008434 <prvTimerTask+0x8>

08008450 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800845a:	f7fe ffa5 	bl	80073a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800845e:	f107 0308 	add.w	r3, r7, #8
 8008462:	4618      	mov	r0, r3
 8008464:	f000 f866 	bl	8008534 <prvSampleTimeNow>
 8008468:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d130      	bne.n	80084d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10a      	bne.n	800848c <prvProcessTimerOrBlockTask+0x3c>
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	429a      	cmp	r2, r3
 800847c:	d806      	bhi.n	800848c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800847e:	f7fe ffa1 	bl	80073c4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008482:	68f9      	ldr	r1, [r7, #12]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff ffa1 	bl	80083cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800848a:	e024      	b.n	80084d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d008      	beq.n	80084a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008492:	4b13      	ldr	r3, [pc, #76]	; (80084e0 <prvProcessTimerOrBlockTask+0x90>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <prvProcessTimerOrBlockTask+0x50>
 800849c:	2301      	movs	r3, #1
 800849e:	e000      	b.n	80084a2 <prvProcessTimerOrBlockTask+0x52>
 80084a0:	2300      	movs	r3, #0
 80084a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084a4:	4b0f      	ldr	r3, [pc, #60]	; (80084e4 <prvProcessTimerOrBlockTask+0x94>)
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	4619      	mov	r1, r3
 80084b2:	f7fe fbfd 	bl	8006cb0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80084b6:	f7fe ff85 	bl	80073c4 <xTaskResumeAll>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10a      	bne.n	80084d6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80084c0:	4b09      	ldr	r3, [pc, #36]	; (80084e8 <prvProcessTimerOrBlockTask+0x98>)
 80084c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	f3bf 8f6f 	isb	sy
    }
 80084d0:	e001      	b.n	80084d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80084d2:	f7fe ff77 	bl	80073c4 <xTaskResumeAll>
    }
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	200003ac 	.word	0x200003ac
 80084e4:	200003b0 	.word	0x200003b0
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80084f4:	4b0e      	ldr	r3, [pc, #56]	; (8008530 <prvGetNextExpireTime+0x44>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <prvGetNextExpireTime+0x16>
 80084fe:	2201      	movs	r2, #1
 8008500:	e000      	b.n	8008504 <prvGetNextExpireTime+0x18>
 8008502:	2200      	movs	r2, #0
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d105      	bne.n	800851c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <prvGetNextExpireTime+0x44>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	e001      	b.n	8008520 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008520:	68fb      	ldr	r3, [r7, #12]
    }
 8008522:	4618      	mov	r0, r3
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	200003a8 	.word	0x200003a8

08008534 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800853c:	f7ff f83e 	bl	80075bc <xTaskGetTickCount>
 8008540:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008542:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <prvSampleTimeNow+0x3c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	429a      	cmp	r2, r3
 800854a:	d205      	bcs.n	8008558 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800854c:	f000 f912 	bl	8008774 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	e002      	b.n	800855e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800855e:	4a04      	ldr	r2, [pc, #16]	; (8008570 <prvSampleTimeNow+0x3c>)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008564:	68fb      	ldr	r3, [r7, #12]
    }
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	200003b8 	.word	0x200003b8

08008574 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8008582:	2300      	movs	r3, #0
 8008584:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	429a      	cmp	r2, r3
 8008598:	d812      	bhi.n	80085c0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	1ad2      	subs	r2, r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d302      	bcc.n	80085ae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80085a8:	2301      	movs	r3, #1
 80085aa:	617b      	str	r3, [r7, #20]
 80085ac:	e01b      	b.n	80085e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085ae:	4b10      	ldr	r3, [pc, #64]	; (80085f0 <prvInsertTimerInActiveList+0x7c>)
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3304      	adds	r3, #4
 80085b6:	4619      	mov	r1, r3
 80085b8:	4610      	mov	r0, r2
 80085ba:	f7fd fbd4 	bl	8005d66 <vListInsert>
 80085be:	e012      	b.n	80085e6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d206      	bcs.n	80085d6 <prvInsertTimerInActiveList+0x62>
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d302      	bcc.n	80085d6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80085d0:	2301      	movs	r3, #1
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	e007      	b.n	80085e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085d6:	4b07      	ldr	r3, [pc, #28]	; (80085f4 <prvInsertTimerInActiveList+0x80>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3304      	adds	r3, #4
 80085de:	4619      	mov	r1, r3
 80085e0:	4610      	mov	r0, r2
 80085e2:	f7fd fbc0 	bl	8005d66 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80085e6:	697b      	ldr	r3, [r7, #20]
    }
 80085e8:	4618      	mov	r0, r3
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	200003ac 	.word	0x200003ac
 80085f4:	200003a8 	.word	0x200003a8

080085f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b088      	sub	sp, #32
 80085fc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085fe:	e0a6      	b.n	800874e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f2c0 80a3 	blt.w	800874e <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	3304      	adds	r3, #4
 8008618:	4618      	mov	r0, r3
 800861a:	f7fd fbdd 	bl	8005dd8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800861e:	1d3b      	adds	r3, r7, #4
 8008620:	4618      	mov	r0, r3
 8008622:	f7ff ff87 	bl	8008534 <prvSampleTimeNow>
 8008626:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	3b01      	subs	r3, #1
 800862c:	2b08      	cmp	r3, #8
 800862e:	f200 808d 	bhi.w	800874c <prvProcessReceivedCommands+0x154>
 8008632:	a201      	add	r2, pc, #4	; (adr r2, 8008638 <prvProcessReceivedCommands+0x40>)
 8008634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008638:	0800865d 	.word	0x0800865d
 800863c:	0800865d 	.word	0x0800865d
 8008640:	080086c5 	.word	0x080086c5
 8008644:	080086d9 	.word	0x080086d9
 8008648:	08008723 	.word	0x08008723
 800864c:	0800865d 	.word	0x0800865d
 8008650:	0800865d 	.word	0x0800865d
 8008654:	080086c5 	.word	0x080086c5
 8008658:	080086d9 	.word	0x080086d9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008662:	f043 0301 	orr.w	r3, r3, #1
 8008666:	b2da      	uxtb	r2, r3
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	18d1      	adds	r1, r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	69f8      	ldr	r0, [r7, #28]
 800867c:	f7ff ff7a 	bl	8008574 <prvInsertTimerInActiveList>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d063      	beq.n	800874e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b00      	cmp	r3, #0
 8008692:	d009      	beq.n	80086a8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	4413      	add	r3, r2
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	4619      	mov	r1, r3
 80086a0:	69f8      	ldr	r0, [r7, #28]
 80086a2:	f7ff fe71 	bl	8008388 <prvReloadTimer>
 80086a6:	e008      	b.n	80086ba <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ae:	f023 0301 	bic.w	r3, r3, #1
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	69f8      	ldr	r0, [r7, #28]
 80086c0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80086c2:	e044      	b.n	800874e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ca:	f023 0301 	bic.w	r3, r3, #1
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80086d6:	e03a      	b.n	800874e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086de:	f043 0301 	orr.w	r3, r3, #1
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <prvProcessReceivedCommands+0x116>
        __asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	617b      	str	r3, [r7, #20]
    }
 800870a:	bf00      	nop
 800870c:	e7fe      	b.n	800870c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	699a      	ldr	r2, [r3, #24]
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	18d1      	adds	r1, r2, r3
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	69f8      	ldr	r0, [r7, #28]
 800871c:	f7ff ff2a 	bl	8008574 <prvInsertTimerInActiveList>
                        break;
 8008720:	e015      	b.n	800874e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d103      	bne.n	8008738 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8008730:	69f8      	ldr	r0, [r7, #28]
 8008732:	f000 fb85 	bl	8008e40 <vPortFree>
 8008736:	e00a      	b.n	800874e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800873e:	f023 0301 	bic.w	r3, r3, #1
 8008742:	b2da      	uxtb	r2, r3
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800874a:	e000      	b.n	800874e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 800874c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800874e:	4b08      	ldr	r3, [pc, #32]	; (8008770 <prvProcessReceivedCommands+0x178>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f107 0108 	add.w	r1, r7, #8
 8008756:	2200      	movs	r2, #0
 8008758:	4618      	mov	r0, r3
 800875a:	f7fd febd 	bl	80064d8 <xQueueReceive>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	f47f af4d 	bne.w	8008600 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8008766:	bf00      	nop
 8008768:	bf00      	nop
 800876a:	3720      	adds	r7, #32
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	200003b0 	.word	0x200003b0

08008774 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800877a:	e009      	b.n	8008790 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800877c:	4b0e      	ldr	r3, [pc, #56]	; (80087b8 <prvSwitchTimerLists+0x44>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008786:	f04f 31ff 	mov.w	r1, #4294967295
 800878a:	6838      	ldr	r0, [r7, #0]
 800878c:	f7ff fe1e 	bl	80083cc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008790:	4b09      	ldr	r3, [pc, #36]	; (80087b8 <prvSwitchTimerLists+0x44>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1f0      	bne.n	800877c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800879a:	4b07      	ldr	r3, [pc, #28]	; (80087b8 <prvSwitchTimerLists+0x44>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80087a0:	4b06      	ldr	r3, [pc, #24]	; (80087bc <prvSwitchTimerLists+0x48>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a04      	ldr	r2, [pc, #16]	; (80087b8 <prvSwitchTimerLists+0x44>)
 80087a6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80087a8:	4a04      	ldr	r2, [pc, #16]	; (80087bc <prvSwitchTimerLists+0x48>)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6013      	str	r3, [r2, #0]
    }
 80087ae:	bf00      	nop
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	200003a8 	.word	0x200003a8
 80087bc:	200003ac 	.word	0x200003ac

080087c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80087c4:	f000 f960 	bl	8008a88 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80087c8:	4b12      	ldr	r3, [pc, #72]	; (8008814 <prvCheckForValidListAndQueue+0x54>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d11d      	bne.n	800880c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80087d0:	4811      	ldr	r0, [pc, #68]	; (8008818 <prvCheckForValidListAndQueue+0x58>)
 80087d2:	f7fd fa77 	bl	8005cc4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80087d6:	4811      	ldr	r0, [pc, #68]	; (800881c <prvCheckForValidListAndQueue+0x5c>)
 80087d8:	f7fd fa74 	bl	8005cc4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80087dc:	4b10      	ldr	r3, [pc, #64]	; (8008820 <prvCheckForValidListAndQueue+0x60>)
 80087de:	4a0e      	ldr	r2, [pc, #56]	; (8008818 <prvCheckForValidListAndQueue+0x58>)
 80087e0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80087e2:	4b10      	ldr	r3, [pc, #64]	; (8008824 <prvCheckForValidListAndQueue+0x64>)
 80087e4:	4a0d      	ldr	r2, [pc, #52]	; (800881c <prvCheckForValidListAndQueue+0x5c>)
 80087e6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80087e8:	2200      	movs	r2, #0
 80087ea:	210c      	movs	r1, #12
 80087ec:	200a      	movs	r0, #10
 80087ee:	f7fd fbad 	bl	8005f4c <xQueueGenericCreate>
 80087f2:	4603      	mov	r3, r0
 80087f4:	4a07      	ldr	r2, [pc, #28]	; (8008814 <prvCheckForValidListAndQueue+0x54>)
 80087f6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80087f8:	4b06      	ldr	r3, [pc, #24]	; (8008814 <prvCheckForValidListAndQueue+0x54>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008800:	4b04      	ldr	r3, [pc, #16]	; (8008814 <prvCheckForValidListAndQueue+0x54>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4908      	ldr	r1, [pc, #32]	; (8008828 <prvCheckForValidListAndQueue+0x68>)
 8008806:	4618      	mov	r0, r3
 8008808:	f7fe fa04 	bl	8006c14 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800880c:	f000 f96c 	bl	8008ae8 <vPortExitCritical>
    }
 8008810:	bf00      	nop
 8008812:	bd80      	pop	{r7, pc}
 8008814:	200003b0 	.word	0x200003b0
 8008818:	20000380 	.word	0x20000380
 800881c:	20000394 	.word	0x20000394
 8008820:	200003a8 	.word	0x200003a8
 8008824:	200003ac 	.word	0x200003ac
 8008828:	08009128 	.word	0x08009128

0800882c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3b04      	subs	r3, #4
 800883c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008844:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3b04      	subs	r3, #4
 800884a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	f023 0201 	bic.w	r2, r3, #1
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3b04      	subs	r3, #4
 800885a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800885c:	4a0c      	ldr	r2, [pc, #48]	; (8008890 <pxPortInitialiseStack+0x64>)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3b14      	subs	r3, #20
 8008866:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3b04      	subs	r3, #4
 8008872:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f06f 0202 	mvn.w	r2, #2
 800887a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3b20      	subs	r3, #32
 8008880:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008882:	68fb      	ldr	r3, [r7, #12]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	08008895 	.word	0x08008895

08008894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800889e:	4b12      	ldr	r3, [pc, #72]	; (80088e8 <prvTaskExitError+0x54>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a6:	d00a      	beq.n	80088be <prvTaskExitError+0x2a>
        __asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	60fb      	str	r3, [r7, #12]
    }
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <prvTaskExitError+0x28>
        __asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	60bb      	str	r3, [r7, #8]
    }
 80088d0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80088d2:	bf00      	nop
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0fc      	beq.n	80088d4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80088da:	bf00      	nop
 80088dc:	bf00      	nop
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	20000018 	.word	0x20000018
 80088ec:	00000000 	.word	0x00000000

080088f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80088f0:	4b07      	ldr	r3, [pc, #28]	; (8008910 <pxCurrentTCBConst2>)
 80088f2:	6819      	ldr	r1, [r3, #0]
 80088f4:	6808      	ldr	r0, [r1, #0]
 80088f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fa:	f380 8809 	msr	PSP, r0
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f04f 0000 	mov.w	r0, #0
 8008906:	f380 8811 	msr	BASEPRI, r0
 800890a:	4770      	bx	lr
 800890c:	f3af 8000 	nop.w

08008910 <pxCurrentTCBConst2>:
 8008910:	2000027c 	.word	0x2000027c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop

08008918 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008918:	4808      	ldr	r0, [pc, #32]	; (800893c <prvPortStartFirstTask+0x24>)
 800891a:	6800      	ldr	r0, [r0, #0]
 800891c:	6800      	ldr	r0, [r0, #0]
 800891e:	f380 8808 	msr	MSP, r0
 8008922:	f04f 0000 	mov.w	r0, #0
 8008926:	f380 8814 	msr	CONTROL, r0
 800892a:	b662      	cpsie	i
 800892c:	b661      	cpsie	f
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	df00      	svc	0
 8008938:	bf00      	nop
 800893a:	0000      	.short	0x0000
 800893c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008940:	bf00      	nop
 8008942:	bf00      	nop

08008944 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800894a:	4b46      	ldr	r3, [pc, #280]	; (8008a64 <xPortStartScheduler+0x120>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a46      	ldr	r2, [pc, #280]	; (8008a68 <xPortStartScheduler+0x124>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d10a      	bne.n	800896a <xPortStartScheduler+0x26>
        __asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	613b      	str	r3, [r7, #16]
    }
 8008966:	bf00      	nop
 8008968:	e7fe      	b.n	8008968 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800896a:	4b3e      	ldr	r3, [pc, #248]	; (8008a64 <xPortStartScheduler+0x120>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a3f      	ldr	r2, [pc, #252]	; (8008a6c <xPortStartScheduler+0x128>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d10a      	bne.n	800898a <xPortStartScheduler+0x46>
        __asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	60fb      	str	r3, [r7, #12]
    }
 8008986:	bf00      	nop
 8008988:	e7fe      	b.n	8008988 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800898a:	4b39      	ldr	r3, [pc, #228]	; (8008a70 <xPortStartScheduler+0x12c>)
 800898c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	b2db      	uxtb	r3, r3
 8008994:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	22ff      	movs	r2, #255	; 0xff
 800899a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	4b31      	ldr	r3, [pc, #196]	; (8008a74 <xPortStartScheduler+0x130>)
 80089b0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089b2:	4b31      	ldr	r3, [pc, #196]	; (8008a78 <xPortStartScheduler+0x134>)
 80089b4:	2207      	movs	r2, #7
 80089b6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089b8:	e009      	b.n	80089ce <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80089ba:	4b2f      	ldr	r3, [pc, #188]	; (8008a78 <xPortStartScheduler+0x134>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3b01      	subs	r3, #1
 80089c0:	4a2d      	ldr	r2, [pc, #180]	; (8008a78 <xPortStartScheduler+0x134>)
 80089c2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089c4:	78fb      	ldrb	r3, [r7, #3]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089ce:	78fb      	ldrb	r3, [r7, #3]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d6:	2b80      	cmp	r3, #128	; 0x80
 80089d8:	d0ef      	beq.n	80089ba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089da:	4b27      	ldr	r3, [pc, #156]	; (8008a78 <xPortStartScheduler+0x134>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f1c3 0307 	rsb	r3, r3, #7
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	d00a      	beq.n	80089fc <xPortStartScheduler+0xb8>
        __asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	60bb      	str	r3, [r7, #8]
    }
 80089f8:	bf00      	nop
 80089fa:	e7fe      	b.n	80089fa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089fc:	4b1e      	ldr	r3, [pc, #120]	; (8008a78 <xPortStartScheduler+0x134>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	021b      	lsls	r3, r3, #8
 8008a02:	4a1d      	ldr	r2, [pc, #116]	; (8008a78 <xPortStartScheduler+0x134>)
 8008a04:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a06:	4b1c      	ldr	r3, [pc, #112]	; (8008a78 <xPortStartScheduler+0x134>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a0e:	4a1a      	ldr	r2, [pc, #104]	; (8008a78 <xPortStartScheduler+0x134>)
 8008a10:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008a1a:	4b18      	ldr	r3, [pc, #96]	; (8008a7c <xPortStartScheduler+0x138>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a17      	ldr	r2, [pc, #92]	; (8008a7c <xPortStartScheduler+0x138>)
 8008a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a24:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008a26:	4b15      	ldr	r3, [pc, #84]	; (8008a7c <xPortStartScheduler+0x138>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a14      	ldr	r2, [pc, #80]	; (8008a7c <xPortStartScheduler+0x138>)
 8008a2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a30:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008a32:	f000 f8db 	bl	8008bec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008a36:	4b12      	ldr	r3, [pc, #72]	; (8008a80 <xPortStartScheduler+0x13c>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008a3c:	f000 f8fa 	bl	8008c34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a40:	4b10      	ldr	r3, [pc, #64]	; (8008a84 <xPortStartScheduler+0x140>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a0f      	ldr	r2, [pc, #60]	; (8008a84 <xPortStartScheduler+0x140>)
 8008a46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a4a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008a4c:	f7ff ff64 	bl	8008918 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008a50:	f7fe fee6 	bl	8007820 <vTaskSwitchContext>
    prvTaskExitError();
 8008a54:	f7ff ff1e 	bl	8008894 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	e000ed00 	.word	0xe000ed00
 8008a68:	410fc271 	.word	0x410fc271
 8008a6c:	410fc270 	.word	0x410fc270
 8008a70:	e000e400 	.word	0xe000e400
 8008a74:	200003bc 	.word	0x200003bc
 8008a78:	200003c0 	.word	0x200003c0
 8008a7c:	e000ed20 	.word	0xe000ed20
 8008a80:	20000018 	.word	0x20000018
 8008a84:	e000ef34 	.word	0xe000ef34

08008a88 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
        __asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	607b      	str	r3, [r7, #4]
    }
 8008aa0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008aa2:	4b0f      	ldr	r3, [pc, #60]	; (8008ae0 <vPortEnterCritical+0x58>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	4a0d      	ldr	r2, [pc, #52]	; (8008ae0 <vPortEnterCritical+0x58>)
 8008aaa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008aac:	4b0c      	ldr	r3, [pc, #48]	; (8008ae0 <vPortEnterCritical+0x58>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d10f      	bne.n	8008ad4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ab4:	4b0b      	ldr	r3, [pc, #44]	; (8008ae4 <vPortEnterCritical+0x5c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <vPortEnterCritical+0x4c>
        __asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	603b      	str	r3, [r7, #0]
    }
 8008ad0:	bf00      	nop
 8008ad2:	e7fe      	b.n	8008ad2 <vPortEnterCritical+0x4a>
    }
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	20000018 	.word	0x20000018
 8008ae4:	e000ed04 	.word	0xe000ed04

08008ae8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008aee:	4b12      	ldr	r3, [pc, #72]	; (8008b38 <vPortExitCritical+0x50>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10a      	bne.n	8008b0c <vPortExitCritical+0x24>
        __asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	607b      	str	r3, [r7, #4]
    }
 8008b08:	bf00      	nop
 8008b0a:	e7fe      	b.n	8008b0a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008b0c:	4b0a      	ldr	r3, [pc, #40]	; (8008b38 <vPortExitCritical+0x50>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	4a09      	ldr	r2, [pc, #36]	; (8008b38 <vPortExitCritical+0x50>)
 8008b14:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008b16:	4b08      	ldr	r3, [pc, #32]	; (8008b38 <vPortExitCritical+0x50>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d105      	bne.n	8008b2a <vPortExitCritical+0x42>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	f383 8811 	msr	BASEPRI, r3
    }
 8008b28:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008b2a:	bf00      	nop
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	20000018 	.word	0x20000018
 8008b3c:	00000000 	.word	0x00000000

08008b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008b40:	f3ef 8009 	mrs	r0, PSP
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	4b15      	ldr	r3, [pc, #84]	; (8008ba0 <pxCurrentTCBConst>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	f01e 0f10 	tst.w	lr, #16
 8008b50:	bf08      	it	eq
 8008b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5a:	6010      	str	r0, [r2, #0]
 8008b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b64:	f380 8811 	msr	BASEPRI, r0
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f7fe fe56 	bl	8007820 <vTaskSwitchContext>
 8008b74:	f04f 0000 	mov.w	r0, #0
 8008b78:	f380 8811 	msr	BASEPRI, r0
 8008b7c:	bc09      	pop	{r0, r3}
 8008b7e:	6819      	ldr	r1, [r3, #0]
 8008b80:	6808      	ldr	r0, [r1, #0]
 8008b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b86:	f01e 0f10 	tst.w	lr, #16
 8008b8a:	bf08      	it	eq
 8008b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b90:	f380 8809 	msr	PSP, r0
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	f3af 8000 	nop.w

08008ba0 <pxCurrentTCBConst>:
 8008ba0:	2000027c 	.word	0x2000027c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop

08008ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
        __asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	607b      	str	r3, [r7, #4]
    }
 8008bc0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008bc2:	f7fe fd17 	bl	80075f4 <xTaskIncrementTick>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bcc:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <SysTick_Handler+0x40>)
 8008bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	f383 8811 	msr	BASEPRI, r3
    }
 8008bde:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008be0:	bf00      	nop
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	e000ed04 	.word	0xe000ed04

08008bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bf0:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <vPortSetupTimerInterrupt+0x34>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bf6:	4b0b      	ldr	r3, [pc, #44]	; (8008c24 <vPortSetupTimerInterrupt+0x38>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bfc:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <vPortSetupTimerInterrupt+0x3c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a0a      	ldr	r2, [pc, #40]	; (8008c2c <vPortSetupTimerInterrupt+0x40>)
 8008c02:	fba2 2303 	umull	r2, r3, r2, r3
 8008c06:	099b      	lsrs	r3, r3, #6
 8008c08:	4a09      	ldr	r2, [pc, #36]	; (8008c30 <vPortSetupTimerInterrupt+0x44>)
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c0e:	4b04      	ldr	r3, [pc, #16]	; (8008c20 <vPortSetupTimerInterrupt+0x34>)
 8008c10:	2207      	movs	r2, #7
 8008c12:	601a      	str	r2, [r3, #0]
}
 8008c14:	bf00      	nop
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	e000e010 	.word	0xe000e010
 8008c24:	e000e018 	.word	0xe000e018
 8008c28:	20000008 	.word	0x20000008
 8008c2c:	10624dd3 	.word	0x10624dd3
 8008c30:	e000e014 	.word	0xe000e014

08008c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008c34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c44 <vPortEnableVFP+0x10>
 8008c38:	6801      	ldr	r1, [r0, #0]
 8008c3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c3e:	6001      	str	r1, [r0, #0]
 8008c40:	4770      	bx	lr
 8008c42:	0000      	.short	0x0000
 8008c44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop

08008c4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008c52:	f3ef 8305 	mrs	r3, IPSR
 8008c56:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b0f      	cmp	r3, #15
 8008c5c:	d914      	bls.n	8008c88 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c5e:	4a17      	ldr	r2, [pc, #92]	; (8008cbc <vPortValidateInterruptPriority+0x70>)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c68:	4b15      	ldr	r3, [pc, #84]	; (8008cc0 <vPortValidateInterruptPriority+0x74>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	7afa      	ldrb	r2, [r7, #11]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d20a      	bcs.n	8008c88 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	607b      	str	r3, [r7, #4]
    }
 8008c84:	bf00      	nop
 8008c86:	e7fe      	b.n	8008c86 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c88:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <vPortValidateInterruptPriority+0x78>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c90:	4b0d      	ldr	r3, [pc, #52]	; (8008cc8 <vPortValidateInterruptPriority+0x7c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d90a      	bls.n	8008cae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	603b      	str	r3, [r7, #0]
    }
 8008caa:	bf00      	nop
 8008cac:	e7fe      	b.n	8008cac <vPortValidateInterruptPriority+0x60>
    }
 8008cae:	bf00      	nop
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	e000e3f0 	.word	0xe000e3f0
 8008cc0:	200003bc 	.word	0x200003bc
 8008cc4:	e000ed0c 	.word	0xe000ed0c
 8008cc8:	200003c0 	.word	0x200003c0

08008ccc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08a      	sub	sp, #40	; 0x28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8008cd8:	f7fe fb66 	bl	80073a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008cdc:	4b53      	ldr	r3, [pc, #332]	; (8008e2c <pvPortMalloc+0x160>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008ce4:	f000 f908 	bl	8008ef8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d012      	beq.n	8008d14 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8008cee:	2208      	movs	r2, #8
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	3308      	adds	r3, #8
 8008cfa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	43db      	mvns	r3, r3
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d804      	bhi.n	8008d10 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	607b      	str	r3, [r7, #4]
 8008d0e:	e001      	b.n	8008d14 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	db70      	blt.n	8008dfc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d06d      	beq.n	8008dfc <pvPortMalloc+0x130>
 8008d20:	4b43      	ldr	r3, [pc, #268]	; (8008e30 <pvPortMalloc+0x164>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d868      	bhi.n	8008dfc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008d2a:	4b42      	ldr	r3, [pc, #264]	; (8008e34 <pvPortMalloc+0x168>)
 8008d2c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008d2e:	4b41      	ldr	r3, [pc, #260]	; (8008e34 <pvPortMalloc+0x168>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d34:	e004      	b.n	8008d40 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d903      	bls.n	8008d52 <pvPortMalloc+0x86>
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1f1      	bne.n	8008d36 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008d52:	4b36      	ldr	r3, [pc, #216]	; (8008e2c <pvPortMalloc+0x160>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d04f      	beq.n	8008dfc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2208      	movs	r2, #8
 8008d62:	4413      	add	r3, r2
 8008d64:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	1ad2      	subs	r2, r2, r3
 8008d76:	2308      	movs	r3, #8
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d91f      	bls.n	8008dbe <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4413      	add	r3, r2
 8008d84:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00a      	beq.n	8008da6 <pvPortMalloc+0xda>
        __asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	613b      	str	r3, [r7, #16]
    }
 8008da2:	bf00      	nop
 8008da4:	e7fe      	b.n	8008da4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	1ad2      	subs	r2, r2, r3
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008db8:	6978      	ldr	r0, [r7, #20]
 8008dba:	f000 f8f9 	bl	8008fb0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008dbe:	4b1c      	ldr	r3, [pc, #112]	; (8008e30 <pvPortMalloc+0x164>)
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	4a19      	ldr	r2, [pc, #100]	; (8008e30 <pvPortMalloc+0x164>)
 8008dca:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dcc:	4b18      	ldr	r3, [pc, #96]	; (8008e30 <pvPortMalloc+0x164>)
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	4b19      	ldr	r3, [pc, #100]	; (8008e38 <pvPortMalloc+0x16c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d203      	bcs.n	8008de0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dd8:	4b15      	ldr	r3, [pc, #84]	; (8008e30 <pvPortMalloc+0x164>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a16      	ldr	r2, [pc, #88]	; (8008e38 <pvPortMalloc+0x16c>)
 8008dde:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	2200      	movs	r2, #0
 8008df0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008df2:	4b12      	ldr	r3, [pc, #72]	; (8008e3c <pvPortMalloc+0x170>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3301      	adds	r3, #1
 8008df8:	4a10      	ldr	r2, [pc, #64]	; (8008e3c <pvPortMalloc+0x170>)
 8008dfa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008dfc:	f7fe fae2 	bl	80073c4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00a      	beq.n	8008e20 <pvPortMalloc+0x154>
        __asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	60fb      	str	r3, [r7, #12]
    }
 8008e1c:	bf00      	nop
 8008e1e:	e7fe      	b.n	8008e1e <pvPortMalloc+0x152>
    return pvReturn;
 8008e20:	69fb      	ldr	r3, [r7, #28]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3728      	adds	r7, #40	; 0x28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	20012fcc 	.word	0x20012fcc
 8008e30:	20012fd0 	.word	0x20012fd0
 8008e34:	20012fc4 	.word	0x20012fc4
 8008e38:	20012fd4 	.word	0x20012fd4
 8008e3c:	20012fd8 	.word	0x20012fd8

08008e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d049      	beq.n	8008ee6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008e52:	2308      	movs	r3, #8
 8008e54:	425b      	negs	r3, r3
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	4413      	add	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	db0a      	blt.n	8008e7e <vPortFree+0x3e>
        __asm volatile
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	60fb      	str	r3, [r7, #12]
    }
 8008e7a:	bf00      	nop
 8008e7c:	e7fe      	b.n	8008e7c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00a      	beq.n	8008e9c <vPortFree+0x5c>
        __asm volatile
 8008e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	60bb      	str	r3, [r7, #8]
    }
 8008e98:	bf00      	nop
 8008e9a:	e7fe      	b.n	8008e9a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	0fdb      	lsrs	r3, r3, #31
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01c      	beq.n	8008ee6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d118      	bne.n	8008ee6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8008ec0:	f7fe fa72 	bl	80073a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	4b09      	ldr	r3, [pc, #36]	; (8008ef0 <vPortFree+0xb0>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4413      	add	r3, r2
 8008ece:	4a08      	ldr	r2, [pc, #32]	; (8008ef0 <vPortFree+0xb0>)
 8008ed0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ed2:	6938      	ldr	r0, [r7, #16]
 8008ed4:	f000 f86c 	bl	8008fb0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008ed8:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <vPortFree+0xb4>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3301      	adds	r3, #1
 8008ede:	4a05      	ldr	r2, [pc, #20]	; (8008ef4 <vPortFree+0xb4>)
 8008ee0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008ee2:	f7fe fa6f 	bl	80073c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008ee6:	bf00      	nop
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20012fd0 	.word	0x20012fd0
 8008ef4:	20012fdc 	.word	0x20012fdc

08008ef8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008efe:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8008f02:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008f04:	4b25      	ldr	r3, [pc, #148]	; (8008f9c <prvHeapInit+0xa4>)
 8008f06:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f003 0307 	and.w	r3, r3, #7
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00c      	beq.n	8008f2c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3307      	adds	r3, #7
 8008f16:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0307 	bic.w	r3, r3, #7
 8008f1e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	4a1d      	ldr	r2, [pc, #116]	; (8008f9c <prvHeapInit+0xa4>)
 8008f28:	4413      	add	r3, r2
 8008f2a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f30:	4a1b      	ldr	r2, [pc, #108]	; (8008fa0 <prvHeapInit+0xa8>)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008f36:	4b1a      	ldr	r3, [pc, #104]	; (8008fa0 <prvHeapInit+0xa8>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	4413      	add	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008f44:	2208      	movs	r2, #8
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	1a9b      	subs	r3, r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 0307 	bic.w	r3, r3, #7
 8008f52:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4a13      	ldr	r2, [pc, #76]	; (8008fa4 <prvHeapInit+0xac>)
 8008f58:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008f5a:	4b12      	ldr	r3, [pc, #72]	; (8008fa4 <prvHeapInit+0xac>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008f62:	4b10      	ldr	r3, [pc, #64]	; (8008fa4 <prvHeapInit+0xac>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2200      	movs	r2, #0
 8008f68:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	1ad2      	subs	r2, r2, r3
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f78:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <prvHeapInit+0xac>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	4a08      	ldr	r2, [pc, #32]	; (8008fa8 <prvHeapInit+0xb0>)
 8008f86:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	4a07      	ldr	r2, [pc, #28]	; (8008fac <prvHeapInit+0xb4>)
 8008f8e:	6013      	str	r3, [r2, #0]
}
 8008f90:	bf00      	nop
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	200003c4 	.word	0x200003c4
 8008fa0:	20012fc4 	.word	0x20012fc4
 8008fa4:	20012fcc 	.word	0x20012fcc
 8008fa8:	20012fd4 	.word	0x20012fd4
 8008fac:	20012fd0 	.word	0x20012fd0

08008fb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fb8:	4b28      	ldr	r3, [pc, #160]	; (800905c <prvInsertBlockIntoFreeList+0xac>)
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	e002      	b.n	8008fc4 <prvInsertBlockIntoFreeList+0x14>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d8f7      	bhi.n	8008fbe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	4413      	add	r3, r2
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d108      	bne.n	8008ff2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	441a      	add	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	441a      	add	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	429a      	cmp	r2, r3
 8009004:	d118      	bne.n	8009038 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	4b15      	ldr	r3, [pc, #84]	; (8009060 <prvInsertBlockIntoFreeList+0xb0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	429a      	cmp	r2, r3
 8009010:	d00d      	beq.n	800902e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	441a      	add	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	601a      	str	r2, [r3, #0]
 800902c:	e008      	b.n	8009040 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800902e:	4b0c      	ldr	r3, [pc, #48]	; (8009060 <prvInsertBlockIntoFreeList+0xb0>)
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	e003      	b.n	8009040 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	429a      	cmp	r2, r3
 8009046:	d002      	beq.n	800904e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800904e:	bf00      	nop
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	20012fc4 	.word	0x20012fc4
 8009060:	20012fcc 	.word	0x20012fcc

08009064 <memset>:
 8009064:	4402      	add	r2, r0
 8009066:	4603      	mov	r3, r0
 8009068:	4293      	cmp	r3, r2
 800906a:	d100      	bne.n	800906e <memset+0xa>
 800906c:	4770      	bx	lr
 800906e:	f803 1b01 	strb.w	r1, [r3], #1
 8009072:	e7f9      	b.n	8009068 <memset+0x4>

08009074 <__libc_init_array>:
 8009074:	b570      	push	{r4, r5, r6, lr}
 8009076:	4d0d      	ldr	r5, [pc, #52]	; (80090ac <__libc_init_array+0x38>)
 8009078:	4c0d      	ldr	r4, [pc, #52]	; (80090b0 <__libc_init_array+0x3c>)
 800907a:	1b64      	subs	r4, r4, r5
 800907c:	10a4      	asrs	r4, r4, #2
 800907e:	2600      	movs	r6, #0
 8009080:	42a6      	cmp	r6, r4
 8009082:	d109      	bne.n	8009098 <__libc_init_array+0x24>
 8009084:	4d0b      	ldr	r5, [pc, #44]	; (80090b4 <__libc_init_array+0x40>)
 8009086:	4c0c      	ldr	r4, [pc, #48]	; (80090b8 <__libc_init_array+0x44>)
 8009088:	f000 f826 	bl	80090d8 <_init>
 800908c:	1b64      	subs	r4, r4, r5
 800908e:	10a4      	asrs	r4, r4, #2
 8009090:	2600      	movs	r6, #0
 8009092:	42a6      	cmp	r6, r4
 8009094:	d105      	bne.n	80090a2 <__libc_init_array+0x2e>
 8009096:	bd70      	pop	{r4, r5, r6, pc}
 8009098:	f855 3b04 	ldr.w	r3, [r5], #4
 800909c:	4798      	blx	r3
 800909e:	3601      	adds	r6, #1
 80090a0:	e7ee      	b.n	8009080 <__libc_init_array+0xc>
 80090a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090a6:	4798      	blx	r3
 80090a8:	3601      	adds	r6, #1
 80090aa:	e7f2      	b.n	8009092 <__libc_init_array+0x1e>
 80090ac:	08009150 	.word	0x08009150
 80090b0:	08009150 	.word	0x08009150
 80090b4:	08009150 	.word	0x08009150
 80090b8:	08009154 	.word	0x08009154

080090bc <memcpy>:
 80090bc:	440a      	add	r2, r1
 80090be:	4291      	cmp	r1, r2
 80090c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80090c4:	d100      	bne.n	80090c8 <memcpy+0xc>
 80090c6:	4770      	bx	lr
 80090c8:	b510      	push	{r4, lr}
 80090ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090d2:	4291      	cmp	r1, r2
 80090d4:	d1f9      	bne.n	80090ca <memcpy+0xe>
 80090d6:	bd10      	pop	{r4, pc}

080090d8 <_init>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	bf00      	nop
 80090dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090de:	bc08      	pop	{r3}
 80090e0:	469e      	mov	lr, r3
 80090e2:	4770      	bx	lr

080090e4 <_fini>:
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e6:	bf00      	nop
 80090e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ea:	bc08      	pop	{r3}
 80090ec:	469e      	mov	lr, r3
 80090ee:	4770      	bx	lr
